{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#installation-instructions","title":"Installation Instructions","text":"<p>CoastSeg is a Jupyter and Python based program that runs in a conda environment. Please see the installation guide</p> <p>Check out the CoastSeg YouTube Channel for tutorials! </p> <p></p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>CoastSeg works best on sand and gravel beaches. It is not as effective at other sites or a marsh beaches.</p> <p>Please see Getting Started guide, which includes instructions for</p> <ul> <li>Pre-requisites (accounts, data access)</li> <li>Installation and setup</li> <li>Extracting shorelines</li> <li>Applying tidal corrections to extracted shorelines</li> </ul>"},{"location":"#what-is-coastseg","title":"What is CoastSeg?","text":"<p>\u2b50 Check out the CoastSeg paper for free: CoastSeg Paper</p> <p>CoastSeg is an interactive browser-based program that aims to broaden the adoption of satellite-derived shoreline (SDS) detection and coastal landcover mapping workflows among coastal scientists and coastal resource management practitioners. SDS is a sub-field of coastal sciences that aims to detect and post-process a time-series of shoreline locations from publicly available satellite imagery.</p> <p>CoastSeg is a Python package installed via pip into a conda environment that serves as an toolkit for building custom SDS workflows. CoastSeg also provides full SDS workflow implementations via Jupyter notebooks and Python scripts that call functions and classes in the core CoastSeg toolkit for specific workflows. CoastSeg provides two fully functioning SDS workflows and its design allows for collaborators in the SDS software community to contribute additional workflows. All the codes, notebooks, scripts, and documentation are hosted on the CoastSeg GitHub repository.</p> <p>So-called `instantaneous' SDS workflows, such as the implementation of CoastSat, where shorelines are extracted from each individual satellite image rather than temporal composites, follow a basic recipe, namely:</p> <ol> <li>waterline estimation, where the 2D (x,y) location of the land-sea interface is determined    and</li> <li>water-level correction, where the waterline location is mapped onto a shore-perpendicular transect, converted to a linear distance along that transect, then corrected for water level, and referenced to a particular elevation contour on the beach.</li> </ol>"},{"location":"#project-aims","title":"Project Aims","text":"<p>CoastSeg has three broad aims. The first aim is to be a toolkit consisting functions that operate the core SDS workflow functionalities. This includes file input/output, image downloading, geospatial conversion, tidal model API handling, mapping 2D shorelines to 1D transect-based measurements, and numerous other functions common to a basic SDS workflow, regardless of a particular waterline estimation methodology. This waterline detection algorithm will be crucial to the success of any SDS workflow because it is the step that identifies the the boundary between sea and land which serves as the basis for shoreline mapping. The idea behind the design of CoastSeg is that users could extend or customize functionality using scripts and notebooks.</p> <p>The second aim of CoastSeg is therefore to provide fully functioning SDS implementations in an accessible browser notebook format. Our principal objective to date has been to re-implement and improve upon a popular existing toolbox, CoastSat, allowing the user to carry out the well-established CoastSat SDS workflow, but in a more accessible and convenient way within the CoastSeg platform. In order to achieve this, we developed CoastSat-package, a Python package that is installed into the CoastSeg conda environment. CoastSat-package contains re-implemented versions of the original CoastSat codes, addresses the lack of pip or conda installability of CoastSat, and isolates the CoastSeg-specific enhancements from the original CoastSat code.</p> <p>The third and final aim of CoastSeg is to implement a method to carry out SDS workflows in experimental and collaborative contexts, which aids both oversight and reproducibility as well as practical needs based on division of labor. We do this using sessions, a mechanism for saving the current state of the application into a session's folder. This folder contains all necessary inputs, outputs, and references to downloaded data used to generate the results. Sessions allow users to iteratively experiment with different combinations of settings and makes CoastSeg fully reproducible because everything needed to reproduce the session is saved to the folder. Users can share their sessions with others, enabling peers to replicate experiments, build upon previous work, or access data downloaded by someone else. This simplifies handovers to new users from existing users, simplifies teaching of the program, and encourages collective experimentation which may result in better shoreline data.</p> <p>CoastSeg is also designed to be extendable, serving as a hub that hosts alternative SDS workflows and similar workflows that can be encoded in a Jupyter notebook built upon the CoastSeg and CoastSat-package core functionalities. Additional notebooks can be designed to carry out shoreline extraction and coastal landcover mapping using alternative methods. We provide an example of an alternative SDS workflow based on a deep-learning based semantic segmentation model that is briefly summarized at the end of this paper. To implement a custom waterline detection workflow the originator of that workflow would contribute new Jupyter notebook, and add their specific waterline detection algorithm to the CoastSeg source code, so it could be used in their notebook's implementation.</p> <p></p>"},{"location":"#utility-scripts","title":"Utility Scripts","text":"<p>CoastSeg comes with a collection of pre-processing script utilities for common i/o problems. Please see the Scripts guide, which includes the list of available scripts, and how to use them.</p>"},{"location":"#doodleversezoo-models-used-in-coastseg","title":"Doodleverse/Zoo models Used in CoastSeg","text":"<p>A lot of work underpins the 'Zoo' method for SDS, which uses models and datasets developed over several years and still under an active cycle of improvement. That is, once we find the time!</p> <p>You can find all the available models at segmentation_zoo. Made using the following software, implemented as Doodleverse/Segmentation Gym:</p> <ul> <li>Segmentation Gym: Buscombe, D., &amp; Goldstein, E. B. (2022). A reproducible and reusable pipeline for segmentation of geoscientific imagery. Earth and Space Science, 9, e2022EA002332. https://doi.org/10.1029/2022EA002332</li> </ul> <p>Using the following datasets:</p> <ul> <li>Buscombe, Daniel. (2022). Images and 2-class labels for semantic segmentation of Sentinel-2 and Landsat RGB, NIR, and SWIR satellite images of coasts (water, other) (v1.0) [Data set]. Zenodo. https://doi.org/10.5281/zenodo.7384263</li> <li>Wernette, P.A., Buscombe, D.D., Favela, J., Fitzpatrick, S., and Goldstein E., 2022, Coast Train--Labeled imagery for training and evaluation of data-driven models for image segmentation: U.S. Geological Survey data release, https://doi.org/10.5066/P91NP87I. See https://coasttrain.github.io/CoastTrain/ for more information</li> <li>Buscombe, Daniel. (2023). June 2023 Supplement Images and 4-class labels for semantic segmentation of Sentinel-2 and Landsat RGB, NIR, and SWIR satellite images of coasts (water, whitewater, sediment, other) (v1.0) [Data set]. Zenodo. https://doi.org/10.5281/zenodo.8011926</li> <li>Buscombe, Daniel, Goldstein, Evan, Bernier, Julie, Bosse, Stephen, Colacicco, Rosa, Corak, Nick, Fitzpatrick, Sharon, del Jes\u00fas Gonz\u00e1lez Guill\u00e9n, Anais, Ku, Venus, Paprocki, Julie, Platt, Lindsay, Steele, Bethel, Wright, Kyle, &amp; Yasin, Brandon. (2022). Images and 4-class labels for semantic segmentation of Sentinel-2 and Landsat RGB satellite images of coasts (water, whitewater, sediment, other) (v1.0) [Data set]. Zenodo. https://doi.org/10.5281/zenodo.7335647</li> </ul>"},{"location":"#data-sources","title":"Data Sources","text":"<p>The CoastSeg transect and slope database is available</p> <ul> <li>Buscombe, D., &amp; Fitzpatrick, S. (2023). CoastSeg: Beach transects and beachface slope database v1.0 (v1.0) [Data set]. Zenodo. https://doi.org/10.5281/zenodo.8187949</li> </ul> <p>Beach face slope and transect data have been derived from:</p> <ol> <li> <p>Doran, K.S., Long, J.W., Birchler, J.J., Brenner, O.T., Hardy, M.W., Morgan, K.L.M, Stockdon, H.F., and Torres, M.L., 2017, Lidar-derived beach morphology (dune crest, dune toe, and shoreline) for U.S. sandy coastlines (ver. 4.0, October 2020): U.S. Geological Survey data release, https://doi.org/10.5066/F7GF0S0Z.</p> </li> <li> <p>Kilian Vos. (2023). Time-series of shoreline change along the Pacific Rim (v1.4) [Data set]. Zenodo. https://doi.org/10.5281/zenodo.7758183</p> </li> <li> <p>Andrew Short. (2022). Sediment size dataset for Australia [Data set]. In Australian Coastal Systems (0.1, p. XXV, 1241). Springer Cham. https://doi.org/10.5281/zenodo.7127186</p> </li> <li> <p>Vos, Kilian, Wen, Deng, Harley, Mitchell D., Turner, Ian L., &amp; Splinter, Kristen D. (2022). Beach-face slope dataset for Australia (Version 2) [Data set]. Zenodo. https://doi.org/10.5281/zenodo.7272538</p> </li> <li> <p>Gibbs, A.E., Ohman, K.A., Coppersmith, R., and Richmond, B.M., 2017, National Assessment of Shoreline Change: A GIS compilation of updated vector shorelines and associated shoreline change data for the north coast of Alaska, U.S. Canadian border to Icy Cape: U.S. Geological Survey data release, https://doi.org/10.5066/F72Z13N1.</p> </li> <li> <p>Himmelstoss, E.A., Kratzmann, M., Hapke, C., Thieler, E.R., and List, J., 2010, The National Assessment of Shoreline Change: A GIS Compilation of Vector Shorelines and Associated Shoreline Change Data for the New England and Mid-Atlantic Coasts: U.S. Geological Survey Open-File Report 2010-1119, available at https://pubs.usgs.gov/of/2010/1119/.</p> </li> <li> <p>Snyder, A.G., and Gibbs, A.E., 2019, National assessment of shoreline change: A GIS compilation of updated vector shorelines and associated shoreline change data for the north coast of Alaska, Icy Cape to Cape Prince of Wales: U.S. Geological Survey data release, https://doi.org/10.5066/P9H1S1PV</p> </li> <li> <p>Romine, B.M., Fletcher, C.H., Genz, A.S., Barbee, M.M., Dyer, Matthew, Anderson, T.R., Lim, S.C., Vitousek, Sean, Bochicchio, Christopher, and Richmond, B.M., 2012, National Assessment of Shoreline Change: A GIS compilation of vector shorelines and associated shoreline change data for the sandy shorelines of Kauai, Oahu, and Maui, Hawaii: U.S. Geological Survey Open-File Report 2011-1009, available online at https://pubs.usgs.gov/of/2011/1009/.</p> </li> <li> <p>Gibbs, A.E., Jones, B.M., and Richmond, B.M., 2020, A GIS compilation of vector shorelines and coastal bluff edge positions, and associated rate-of-change data for Barter Island, Alaska: U.S. Geological Survey data release, https://doi.org/10.5066/P9CRBC5I.</p> </li> <li> <p>Sturdivant, E.J., Zeigler, S.L., Gutierrez, B.T., and Weber, K.M., 2019, Barrier island geomorphology and shorebird habitat metrics\u2013Sixteen sites on the U.S. Atlantic Coast, 2013\u20132014: U.S. Geological Survey data release, https://doi.org/10.5066/P9V7F6UX.</p> </li> </ol> <p>Additional contributions:</p> <ol> <li>Sean Vitousek, USGS</li> </ol>"},{"location":"#authors-and-contributions","title":"Authors and Contributions","text":"<p>Package maintainers:</p> <ul> <li>@2320sharon : Lead Software Developer / Contracted to USGS Pacific Coastal and Marine Science Center.</li> <li>@dbuscombe-usgs Contracted to USGS Pacific Coastal and Marine Science Center.</li> <li>@mlundine : USGS Pacific Coastal and Marine Science Center.</li> </ul> <p>Contributions:</p> <ul> <li>@ebgoldstein</li> <li>@venuswku</li> <li>@robbibt</li> <li>@edlazarus</li> <li>Beta testers: Catherine Janda, Ann Gibbs, Jon Warrick, Andrea O\u2019Neill, Kathryn Weber, Julia Heslin (USGS)</li> <li>We would like to express our gratitude to all the contributors who made this release possible. Thank you to everyone who tested the beta versions of coastseg and provided us with the feedback we needed to improve coastseg. Thanks also to the developers and maintainers of pyTMD, DEA-tools, xarray, and GDAL, without which this project would be impossible</li> </ul>"},{"location":"#related-packages","title":"Related Packages","text":"<ul> <li>CoastSat</li> <li>coastsat-package</li> <li>Zoo</li> <li>pyTMD</li> <li>dea-tools</li> </ul> <p>See also other related repositories in the Satellite Shorelines GitHub Organization</p>"},{"location":"Apply-Tidal_Correction_Script/","title":"\u26a0\ufe0f Before you begin \u26a0\ufe0f","text":"<p>Make sure you have downloaded the FES2014 tide model following the guide 'How to Download the Tide Model'</p>"},{"location":"Apply-Tidal_Correction_Script/#apply-tide-correction-script","title":"Apply Tide Correction Script","text":""},{"location":"Apply-Tidal_Correction_Script/#example-1-apply-tide-correction-to-a-session-and-provide-tide-model-location","title":"Example 1: Apply Tide Correction to a session and provide tide model location","text":"<p>1.Choose a session</p> <ul> <li>In this example I will be using session <code>dnz3_extract_shorelines_10_yr</code> and using ROI <code>ID_dnz3_datetime12-22-23__09_10_44</code></li> <li>Example: <code>C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44</code></li> </ul> <p>2.Get the location of the config_gdf.geojson file</p> <ul> <li>This parameter is used after the <code>-C</code></li> <li>Example: <code>-C \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\config_gdf.geojson\"</code></li> </ul> <p>3.Get the location of the transect_time_series.csv file</p> <ul> <li>This parameter is used after the <code>-T</code></li> <li>Example: <code>-T \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\transect_time_series.csv\"</code></li> </ul> <p>4.Get the location of the tide_model</p> <ul> <li>This parameter is used after the <code>-M</code></li> <li>Example: <code>-M \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\tide_model\"</code></li> </ul> <p>5.Select a Beach Elevation</p> <ul> <li>This is the elevation of the beach in meters relative to MSL(Mean Sea Level) for the ROI you have selected</li> <li>Example: <code>-E 3.2</code></li> </ul> <p>6.Select a Beach Slope</p> <ul> <li>This is the slope of the beach in meters for the ROI you have selected</li> <li>Example: <code>-S 2.1</code></li> </ul> <p>7.Assemble the command</p> <ul> <li>Assemble all commands into a single line. I recommended using notepad to combine all the commands into a single line</li> </ul> <pre><code>python apply_tidal_correction.py -E 3.2 -S 2.1 -C\n\"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\config_gdf.geojson\" -T\n\"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\transect_time_series.csv\"\n-M \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\tide_model\"\n</code></pre> <p>8.Run the command</p> <ul> <li>It takes a few minutes to predict the tides</li> </ul> <p></p>"},{"location":"Apply-Tidal_Correction_Script/#parameters","title":"Parameters:","text":"<p>1.-C (or -c) [CONFIG_FILE_PATH]</p> <ul> <li>Description: Path to the configuration file.</li> <li>Example: <code>-C \"path_to_config_file\"</code></li> <li><code>CONFIG_FILE_PATH</code>: Path to the configuration file. This is the <code>config_gdf.geojson</code> in the session directory generated when shorelines were extracted</li> </ul> <p>2.-T (or -t) [RAW_TIMESERIES_FILE_PATH]</p> <ul> <li>Description: Path to the raw timeseries file.</li> <li>Example: <code>-T \"path_to_timeseries_file\"</code></li> <li><code>RAW_TIMESERIES_FILE_PATH</code>: Path to a csv file containing the time series created by extracting shorelines with coastseg. This timeseries   represents the intersection of each transect with the shoreline extracted for a particular date and time. It is not tidally corrected.</li> </ul> <p>3.-E (or -e) [REFERENCE_ELEVATION]</p> <ul> <li>Description: Set the reference elevation value. This is a float number.</li> <li>Example: <code>-E 3</code></li> </ul> <p>4.-S (or -s) [BEACH_SLOPE]</p> <ul> <li>Description: Set the beach slope value. This is a float number.</li> <li>Example: <code>-S 2</code></li> </ul>"},{"location":"Apply-Tidal_Correction_Script/#optional-configuration-options","title":"Optional Configuration Options","text":"<p>If you didn't install the tide model in the default location you will need to modify the following variables</p> <p>5.-P (or -p) [TIDE_PREDICTIONS_FILE_NAME]</p> <ul> <li>Description: File name for saving a csv file containing the tide predictions for each date time in the timeseries provided.</li> <li>By Default this file is named \"tidal_predictions.csv\"</li> <li>Example: <code>-P \"tidal_predictions.csv\"</code></li> </ul> <p>6.-O (or -o) [TIDALLY_CORRECTED_FILE_NAME]</p> <ul> <li>Description: File name for saving the tidally corrected time series csv file.</li> <li>By Default this file is named \"tidally_corrected_time_series.csv\"</li> <li>Example: <code>-O \"tidally_corrected_time_series.csv\"</code></li> </ul> <p>7.-R (or -r) [MODEL_REGIONS_GEOJSON_PATH]</p> <ul> <li>Description: Path to the model regions GeoJSON file.</li> <li>By default the program looks for <code>tide_regions_map.geojson</code> in the <code>scripts</code> directory</li> <li>Example: <code>-R \"c:\\coastseg\\scripts\\tide_regions_map.geojson\"</code></li> <li><code>MODEL_REGIONS_GEOJSON_PATH</code>: Path to the location of the geojson file containing the regions used to create the clipped tide model in the previous steps. This file is typically located in the scripts directory within coastseg. \"c:\\coastseg\\scripts\\tide_regions_map.geojson\"`</li> </ul> <p>8.-M (or -m) [FES_2014_MODEL_PATH]</p> <ul> <li>Description: Path to the FES 2014 tide model directory.</li> <li>Example: <code>-M \"c:\\coastseg\\tide_model\"</code></li> <li><code>FES_2014_MODEL_PATH</code>: Path to the FES 2014 tide model, by default attempts to load from <code>coastseg\\tide_model</code> if you installed the tide_model from in a different location then CoastSeg/tide_model then modify this variable to have the full location to the directory containing the clipped 2014 fes tide model.</li> </ul>"},{"location":"Apply-Tidal_Correction_Script/#running-the-script","title":"Running the script:","text":"<p>Use the parameters as described while executing the script. Here's an example usage: Example 1: Only Required Parameter</p> <pre><code>cd scripts\npython apply_tidal_correction.py -C \"path_to_config\" -T \"path_to_timeseries\" -E 3 -S 2\n</code></pre> <pre><code>python apply_tidal_correction.py -E 3 -S 2 -C \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\fire_island\\ID_ham1_datetime08-03-23__10_58_34\\config_gdf.geojson\" -T \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\fire_island\\ID_ham1_datetime08-03-23__10_58_34\\transect_time_series.csv\"\n</code></pre> <p>Example 2: All Available Parameters</p> <pre><code>cd scripts\npython apply_tidal_correction.py -C \"path_to_config\" -T \"path_to_timeseries\" -E 3 -S 2 -P \"predictions.csv\" -O \"corrected.csv\" -R \"regions.geojson\" -M \"model_directory\"\n</code></pre> <pre><code>cd scripts\npython apply_tidal_correction.py -E 3 -S 2 -C \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\fire_island\\ID_ham1_datetime08-03-23__10_58_34\\config_gdf.geojson\" -T \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\fire_island\\ID_ham1_datetime08-03-23__10_58_34\\transect_time_series.csv\" -P \"tidal_predictions.csv\" -O \"tidally_corrected_time_series.csv\" -R \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\scripts\\tide_regions_map.geojson\" -M \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\tide_model\"\n</code></pre>"},{"location":"Apply-Tidal_Correction_Script/#results","title":"Results","text":"<p>The results will be located in the scripts directory where the <code>apply_tidal_correction.py</code> script is located.</p> <ul> <li><code>tidal_predictions.csv</code>: Contains the tide predictions for each datetime in the timeseries csv file given by <code>RAW_TIMESERIES_FILE_PATH</code>.</li> <li><code>\"tidally_corrected_time_series.csv\"</code>: Contains the tidally corrected time series data based on the timeseries csv file given by <code>RAW_TIMESERIES_FILE_PATH</code>.</li> </ul>"},{"location":"Apply-Tidal_Correction_Script/#credits","title":"Credits","text":"<p>Thank you DEA-Coastlines for making a guide on how to use pyTMD and pyTMD for making a easy to use script to download the AVISO FES 2014 Model. The <code>model_tides</code> in this code has been modified and the original function was originally written by Robbi Bishop-Taylor for the <code>dea-tools</code> package https://github.com/GeoscienceAustralia/dea-notebooks/blob/develop/Tools/dea_tools/coastal.py#L466-L473</p>"},{"location":"CoastSeg-API-Guide/","title":"CoastSeg Scripts Guide","text":"<p>This guide provides instructions on how to use the CoastSeg API to download imagery, extract shorelines, and apply tide correction.</p>"},{"location":"CoastSeg-API-Guide/#contents","title":"Contents","text":"<ul> <li>Script 1: Download Imagery and Initial Shoreline Extraction</li> <li>Script 2: Extract Shorelines from a previously downloaded session</li> <li>Applying Tide Correction (Optional)</li> </ul>"},{"location":"CoastSeg-API-Guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Ensure you have the CoastSeg conda environment set up and activated. If not, please follow the setup instructions provided in the CoastSeg documentation.</li> <li>Download the tide model required for tide correction. You can find instructions and download links here.</li> </ul>"},{"location":"CoastSeg-API-Guide/#running-the-scripts","title":"Running the Scripts","text":""},{"location":"CoastSeg-API-Guide/#script-1-download-imagery-and-initial-shoreline-extraction","title":"Script 1: Download Imagery and Initial Shoreline Extraction","text":"<p>1.Activate the CoastSeg Conda Environment:</p> <p>Open your terminal and activate the CoastSeg conda environment by running:</p> <pre><code>  conda activate coastseg\n</code></pre> <p>2.Launch the Script</p> <ul> <li>Navigate to the directory containing your script and run:</li> </ul> <pre><code>     python 1_download_imagery.py\n</code></pre> <p>The script performs the following actions:</p> <ul> <li>Initializes the Google Earth Engine.</li> <li>Downloads imagery based on specified regions of interest (ROIs).</li> <li>Extracts shorelines from the downloaded imagery.</li> <li>Optionally applies tide correction (uncomment the tide correction section if needed).</li> </ul> <p>3.Understanding the Script Output:</p> <ul> <li>The script will download imagery to the specified data folder.</li> <li>Extracted shorelines will be saved in the session's directory.</li> <li>Check the terminal for logs and messages indicating the progress and completion of tasks.</li> </ul>"},{"location":"CoastSeg-API-Guide/#script-2-extract-shorelines-from-a-previously-downloaded-session","title":"Script 2: Extract Shorelines from a previously downloaded session","text":"<p>After completing the imagery download and initial extraction, you can proceed with the second script for further shoreline extraction. Note: This script should be run after the first one because it loads the 'sample_session1' created by the first script</p> <p>1.Activate the CoastSeg Conda Environment:</p> <ul> <li>Open your terminal and activate the CoastSeg conda environment by running:</li> </ul> <pre><code>  conda activate coastseg\n</code></pre> <p>2.Uncomment Code to Apply Tide Correction (Optional)</p> <ul> <li> <p>The tide model MUST be downloaded as per the prerequisites. Follow a guide here on how to download it How to Download Tide Model</p> </li> <li> <p>Uncomment the tide correction section in the script (shown below):</p> </li> <li>make sure to enter the <code>beach slope</code> and <code>reference_elevation</code>(relative to MSL) for your site.</li> </ul> <pre><code># coastsegmap.compute_tidal_corrections(roi_ids, beach_slope, reference_elevation)\n</code></pre> <p>3.Launch the Script</p> <ul> <li> <p>Navigate to the directory containing your script and run:</p> </li> <li> <p>This script will use the ROI data downloaded by <code>1_download_imagery.py</code> and extract shorelines from the imagery.</p> </li> <li> <p>If you did not run <code>1_download_imagery.py</code> to download data then this script will not work</p> </li> </ul> <pre><code>     python 2_extract_shorelines.py\n</code></pre> <p>It performs the following:</p> <ul> <li>Loads the download data from a session in 'CoastSeg/data' session created by the first script.</li> <li>Applies the new settings to control shoreline extraction from the downloaded imagery</li> <li>Optionally, applies tide correction (uncomment and configure if needed).</li> </ul>"},{"location":"Contribution-Guide/","title":"Contributing","text":"<p>Thank you for your interest in contributing to CoastSeg we appreciate any contributions. Every little bit helps, and credit will always be given. You can contribute in many ways:</p>"},{"location":"Contribution-Guide/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"Contribution-Guide/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/SatelliteShorelines/CoastSeg/issues/new/choose.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"Contribution-Guide/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"Contribution-Guide/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"Contribution-Guide/#write-documentation","title":"Write Documentation","text":"<p>CoastSeg could always use more documentation, whether as part of the official wiki, in docstrings, or even updates to the readme. Submit an issue with your updated documentation and our team will merge it in and credit you.</p>"},{"location":"Contribution-Guide/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/SatelliteShorelines/CoastSeg/issues/new/choose.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Make sure it passes all of CoastSeg's tests if it doesn't tag one of our developers.</li> </ul>"},{"location":"Contribution-Guide/#testing-guide","title":"Testing Guide","text":"<p>In the activated anaconda environment <code>coastseg_dev</code> change directories to be in the main coastseg directory. Within the main coastseg directory is a directory named <code>tests</code> within anaconda prompt use the command <code>cd tests</code> to change to this directory. Run the command <code>pytest</code> to run all the tests in the <code>tests</code> directory</p>"},{"location":"Contribution-Guide/#how-to-run-all-tests","title":"How to Run All Tests","text":"<p>Run the following commands within the coastseg directory.</p> <pre><code>conda activate coastseg_dev\ncd tests\npytest .\n</code></pre>"},{"location":"Contribution-Guide/#coastseg-directory-structure","title":"CoastSeg Directory Structure","text":"<p>Coastseg has a source layout which is the recommend layout for pypi packages. This means all the source code for coastseg is located under the <code>src</code>(short for source) directory. Within the <code>src</code> directory is another directory <code>coastseg</code>, which contains the source code for coastseg. The source code is what provides all the functions that coastseg uses in notebooks located within the main <code>CoastSeg</code> directory (aka not within the <code>src/coastseg</code> directory). If you want to make any changes to the functionality of coastseg you will be changing the code within the source directory.</p> <p>The UI used in the two notebooks is stored within <code>map_UI.py</code> and <code>models_UI.py</code>. In these files you will find one class that creates all the buttons, widgets and even a map that coastseg uses. By separating the UI from the source code it makes it easier to make UI changes without having to change the source code.</p> <pre><code>\u251c\u2500\u2500 CoastSeg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 |  |_ coastseg\n\u2502\u00a0\u00a0 |  |  |_ __init__.py\n\u2502\u00a0\u00a0 |  |  |_bbox.py\n\u2502\u00a0\u00a0 |  |  |_roi.py\n\u2502\u00a0\u00a0 |  |  |_shoreline.py\n\u2502\u00a0\u00a0 |  |  |_transects.py\n\u2502\u00a0\u00a0 |  |  |_coastseg_map.py\n\u2502\u00a0\u00a0 |  |  |_exception_handler.py\n\u2502\u00a0\u00a0 |  |  |_extracted_shoreline.py\n\u2502\u00a0\u00a0 |  |  |_common.py\n\u2502\u00a0\u00a0 |  |  |_exceptions.py\n\u2502\u00a0\u00a0 |  |  |_map_UI.py\n\u2502\u00a0\u00a0 |  |  |_models_UI.py\n\u2502\u00a0\u00a0 |  |  |_zoo_model.py\n\u2502\u00a0\u00a0 |  |  |_coastseg_logs.py\n\u2502\u00a0\u00a0 |  |  |\n\u2502\u00a0\u00a0 |  |  |bounding_boxes # contains geojson files for the bounding boxes for the shorelines coastseg automatically loads on the map\n\u2502\u00a0\u00a0 |  |  |downloaded_models # directory created by coastseg after a model is downloaded\n\u2502\u00a0\u00a0 |  |  |shorelines # contains geojson files the shorelines coastseg automatically loads on the map\n\u2502\u00a0\u00a0 |  |  |transects # contains geojson files the transects coastseg automatically loads on the map\n|\n\u251c\u2500\u2500 docs\n|   |_config.md\n|   |_install.md # not showing them all here\n|\n\u251c\u2500\u2500 tests # this directory contains automated tests and test data used to run tests\n|   |_ test_data # this directory contains data used by the automated tests\n|   | |_&lt;data used to test coastseg&gt;\n|   |_ __init__.py\n|   |   |_ conftest.py # creates objects and variables used by the rest of the tests\n|   |   |_ test_roi.py # this test file tests roi.py\n|\n|___data\n|    |_ &lt;data downloaded here&gt; # directory automatically created by coastseg when imagery is downloaded\n|\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 .github\n\u2514\u2500\u2500 .gitignore\n\u2514\u2500\u2500 pyproject.toml\n</code></pre>"},{"location":"Getting-Started_to_contribute/","title":"Getting Started to Contribute","text":""},{"location":"Getting-Started_to_contribute/#getting-started-guide-for-contributors","title":"Getting Started Guide for Contributors","text":"<p>Ready to contribute? Here's how to set up CoastSeg for local development. This guide will walk you through the installation process, testing procedures, and best practices for contributing to CoastSeg.</p> <ol> <li>Make a Fork</li> </ol> <p>Click the <code>fork</code> button located at the top right of the coastseg repository. This will create a fork copy of the coastseg repository that you can edit on your GitHub account. Learn How to Fork from GitHub Docs</p> <p></p> <ol> <li> <p>Clone your fork locally:</p> </li> <li> <p>git clone your fork of coastseg onto your local computer   <pre><code>git clone https://github.com/your-username/CoastSeg.git\n</code></pre></p> </li> <li> <p>Create an Anaconda Environment for CoastSeg Development</p> </li> <li> <p>We will install the CoastSeg package and its development dependencies in this environment.</p> </li> </ol> <pre><code>conda create --name coastseg_dev python=3.10 -y\n</code></pre> <ol> <li>Activate the Conda Environment</li> </ol> <pre><code>conda activate coastseg_dev\n</code></pre> <ol> <li> <p>Change Directory to the CoastSeg</p> </li> <li> <p>Go to the location where CoastSeg was installed on your computer.    <code>cd &lt;directory where you have coastseg source code installed&gt;</code> Example: <code>cd c:\\users\\CoastSeg</code> <pre><code>cd CoastSeg\n</code></pre></p> </li> <li> <p>Install CoastSeg locally as a pip editable installation    <pre><code>pip install -e .\n</code></pre></p> </li> <li> <p>This command reads the required dependencies from CoastSeg's <code>pyproject.toml</code> file and installs them within your anaconda environment.</p> </li> <li>Make sure to run this command in the <code>CoastSeg</code> directory that contains the <code>pyproject.toml</code> file otherwise this command will fail because pip won't find the <code>pyproject.toml</code> file</li> <li><code>-e</code> means create an editable install of the package. This will add the files to the python path on your computer making it possible to find the sub directories of the package.See the official documentation.</li> <li> <p><code>.</code> means use the current working directory to install</p> </li> <li> <p>Install Geopandas and JupyterLab Locally</p> </li> </ol> <pre><code>conda install -c conda-forge jupyterlab geopandas -y\n</code></pre> <ol> <li> <p>Install the Development Dependencies    <pre><code>pip install build pytest black\n</code></pre></p> </li> <li> <p><code>black</code> is a python formater that you can run on the code</p> </li> <li> <p><code>pytest</code> is used to automatically run tests on the code</p> </li> <li> <p>Create a branch for local development:</p> </li> </ol> <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> <ol> <li> <p>When you're done making changes, use <code>pytest</code> to check that your changes pass the tests.</p> <pre><code>conda activate coastseg_dev\ncd CoastSeg\ncd tests\npytest .\n</code></pre> </li> <li> <p>Format the code using Black     To make your code adhere to python style standards use the <code>black</code> code formatter to automatically format the code. You'll need to change directories to the <code>src</code> directory, then to the sub directory <code>coastseg</code> and run the <code>black</code> here. If you were to run <code>black</code> in the main coastseg directory it would not format the code because the code for coastseg is located in directory <code>coastseg&gt;src&gt;coastseg</code>.</p> </li> </ol> <pre><code>conda activate coastseg_dev\ncd src\ncd coastseg\nblack .\n</code></pre> <ol> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>git add .\n</code></pre> <pre><code>git commit -m \"Your detailed description of your changes.\"\n</code></pre> <pre><code>git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"How-to-Create-Reference-Shorelines-%26-Transects%26ROIs/","title":"How to Create Reference Shorelines & Transects & ROIs","text":"<p>To learn how to load these features in follow the guide at How to Upload Features</p>"},{"location":"How-to-Create-Reference-Shorelines-%26-Transects%26ROIs/#how-to-create-reference-shoreline","title":"How to Create Reference Shoreline","text":"<p>In order to extract shorelines with CoastSeg you will need a reference shoreline. If you have interior and exterior shorelines you will need to select only one reference shoreline and adjust the shoreline buffer so that the other shoreline doesn't get picked up.</p> <p>In this example we will be creating a reference Shoreline for Eastern Long Island in New York.</p>"},{"location":"How-to-Create-Reference-Shorelines-%26-Transects%26ROIs/#option-1-how-to-create-reference-shorelines-in-qgis","title":"Option 1 : How to Create Reference Shorelines in QGIS","text":"<ol> <li>Load base imagery from google satellite</li> <li>Create a new shapefile</li> <li>Digitize the shoreline from the imagery</li> <li>Save the shorelines in crs 'epsg:4326'</li> </ol>"},{"location":"How-to-Create-Reference-Shorelines-%26-Transects%26ROIs/#option-2-how-to-create-reference-shorelines-in-geojsonio","title":"Option 2: How to Create Reference Shorelines in geojson.io","text":"<ol> <li> <p>Use the Line tool in https://geojson.io/ to create a reference shoreline</p> </li> <li> <p>Make sure to draw the shoreline with many shoreline points</p> </li> <li> <p>This matters because coastseg dilates each point the shoreline consists of to create the reference shoreline buffer</p> </li> <li> <p>If you use a very small reference shoreline buffer (&lt;100m) and not enough points your reference shoreline will look like the image below.</p> </li> </ol> <p></p> <ol> <li>Download the geojson file.</li> </ol> <p></p>"},{"location":"How-to-Create-Reference-Shorelines-%26-Transects%26ROIs/#how-to-load-the-reference-shoreline-into-coastseg","title":"How to Load the Reference Shoreline into CoastSeg","text":"<ol> <li>Move the geojson file into the coastseg folder</li> <li>Click the \"load shoreline file\" button</li> <li>Scroll down to the bottom and click the reference shoreline file</li> <li>click select to load the reference shoreline on the map</li> </ol>"},{"location":"How-to-Create-Reference-Shorelines-%26-Transects%26ROIs/#how-to-create-transects","title":"How to Create Transects","text":""},{"location":"How-to-Create-Reference-Shorelines-%26-Transects%26ROIs/#option-1-create-transects-in-qgis","title":"Option 1: Create Transects in QGIS","text":"<ul> <li>The guide below demonstrates how to create transects that you can load into Coastseg. It was created by Catherine Janda &amp; Sharon Fitzpatrick   Create.your.own.transects.in_QGIS.docx</li> </ul>"},{"location":"How-to-Create-Reference-Shorelines-%26-Transects%26ROIs/#option-2-create-transects-in-geojsonio","title":"Option 2: Create Transects in geojson.io","text":"<p>1.Always put the origin (starting point) of the transect on land and the end point on the sea.</p> <p></p> <p>2.Modify the geoJSON file to give each transect a unique \"id\" (Optional)</p> <ul> <li>If you don't give each transect an ID one will be automatically assigned by CoastSeg</li> </ul> <p> </p> <p>3.Save the a geoJSON file</p> <p></p>"},{"location":"How-to-Create-Reference-Shorelines-%26-Transects%26ROIs/#how-to-create-rois","title":"How to Create ROIs","text":"<p>1.Use the box tool in https://geojson.io/ to create a ROI</p> <p>2.Edit the geojson contents to give each ROI its own ID otherwise CoastSeg will automatically assign them</p> <ul> <li> <p>This example shows how to do it with a transect but the process is the same for ROIs</p> </li> <li> <p>Make your ROI ID follows the format &lt;3 letters 1 number&gt; example : fvk6</p> </li> </ul> <p> </p> <p>3.Save the a geoJSON file</p>"},{"location":"How-to-Download-Tide-Model-updated/","title":"Overview","text":"<p>This guide will walk you through signing up for the necessary account and then choosing between two methods to download and clip the tide model for use in CoastSeg.</p>"},{"location":"How-to-Download-Tide-Model-updated/#part-1-download-the-tide-model","title":"Part 1: Download the Tide Model","text":""},{"location":"How-to-Download-Tide-Model-updated/#step-1-register","title":"Step 1: Register","text":"<ul> <li>Sign Up: Begin by registering on the AVISO platform. Visit the AVISO Registration Page  to create your account.</li> </ul>"},{"location":"How-to-Download-Tide-Model-updated/#step-2-select-the-tide-model","title":"Step 2: Select the Tide Model","text":"<ul> <li>Select the FES Model During the registration process, you'll be presented with various data models to choose from. Ensure you select the FES (Finite Element Solution - Oceanic Tides Heights) model.</li> </ul>"},{"location":"How-to-Download-Tide-Model-updated/#step-3-account-verification","title":"Step 3: Account Verification","text":"<ul> <li>Confirmation Email: After completing the registration, AVISO will send you a confirmation email. Check your inbox (and spam folder if necessary) for this email.</li> <li>Verify Your Account: Click on the link provided in the email to verify your account. This step is crucial to activate your account and gain access to the data models.</li> </ul>"},{"location":"How-to-Download-Tide-Model-updated/#step-4-accessing-your-dashboard","title":"Step 4: Accessing Your Dashboard","text":"<ul> <li>Login: Once your account is verified, log into your AVISO account.</li> <li>Navigate to Products: On your account dashboard, you'll find a left side menu. Click on the My products option. </li> </ul>"},{"location":"How-to-Download-Tide-Model-updated/#step-5-confirm-your-subscription","title":"Step 5: Confirm Your Subscription","text":"<ul> <li>Check Your Subscriptions: In the \"Your current subscriptions\" section, ensure that the FES (Finite Element Solution - Oceanic Tides Heights) model is listed. This confirms that you've successfully subscribed to the desired model.</li> </ul>"},{"location":"How-to-Download-Tide-Model-updated/#part-2-download-and-clip-the-tide-model","title":"Part 2: Download and Clip the Tide Model","text":"<p>You have two options to download and clip the tide model: use the Jupyter Notebook (Recommended) or using a Script (Alternative). </p>"},{"location":"How-to-Download-Tide-Model-updated/#space-and-time-requirements","title":"Space and Time Requirements","text":"<ul> <li>Storage Space: Ensure you have at least 14GB of free space available.</li> <li>Time Commitment: The download and setup process for the fes2014 model takes approximately 1-2 hours. This is a one-time requirement.</li> </ul>"},{"location":"How-to-Download-Tide-Model-updated/#option-1-using-the-download_tide_modelipynb-notebook-recommended","title":"Option 1: Using the Download_tide_model.ipynb Notebook (Recommended)","text":"<p>The easiest way to download and clip the tide model is to use this notebook. Run all the code in the notebook and you're done!</p> <ol> <li>Prepare: Ensure you have you are in an activated coastseg environment and know your AVISO email and password.</li> <li>Open Notebook: Launch <code>Download_tide_model.ipynb</code> in Jupyter Notebook.</li> </ol> <pre><code>cd CoastSeg\njupyter lab Download_tide_model.ipynb\n</code></pre> <p>3.Run Code: Execute all cells in the notebook. The code will guide you through the download and clipping process automatically.</p> <p>4.Check Results: Confirm that the model files are correctly downloaded and clipped in the specified directory.</p> <ul> <li> <p>Example Output from Downloading Tide Model Step in Notebook </p> </li> <li> <p>Example Output from Clipping Tide Model Step in Notebook </p> </li> </ul> <p>5.Downloaded Tide Model Contents</p> <p></p>"},{"location":"How-to-Download-Tide-Model-updated/#option-2-using-the-script-alternative","title":"Option 2: Using the Script (Alternative)","text":""},{"location":"How-to-Download-Tide-Model-updated/#setup","title":"Setup","text":"<ol> <li>Create Directory: Navigate to your CoastSeg installation directory and create a new folder named tide_model.</li> <li>Script Location: Change directory to the scripts folder within CoastSeg.</li> </ol> <pre><code>cd &lt;location of your coastseg directory&gt;\nmkdir tide_model\ncd scripts\n</code></pre>"},{"location":"How-to-Download-Tide-Model-updated/#download-clip","title":"Download &amp; Clip","text":"<p>1.Run Download Script: Execute the <code>aviso_fes_tides.py</code> script with the necessary parameters, including your AVISO credentials and target directory for the tide model.</p> <ul> <li>\u26a0\ufe0f Enter your AVISO password when prompted. Note that the password won't display as you type. After you have finished typing, press Enter to proceed.</li> <li>Replace <code>C:\\Users\\Sample\\coastseg</code> with the actual location of your CoastSeg directory.</li> <li></li> </ul> <p>Example command:</p> <pre><code> python aviso_fes_tides.py --user your_email@example.com -D C:\\Users\\Sample\\coastseg\\tide_model --load --log --tide FES2014 -G\n</code></pre> <p>2.Clip Model to Regions: After downloading, run the <code>clip_and_write_new_nc_files_cmd_line.py</code> script with the paths to your tide model directory and the regions geojson file.</p> <p>To make the tide predictions compute faster we will clip the model it to various regions across the planet. After we've clipped the model to each region, when we want to predict the tide at a particular latitude and longitude we first figure out which region the point lies within, then we load the tide model we clipped to that region.</p> <ul> <li><code>-R or --regions_file</code> the full path to the regions geojson file. You should find this file <code>tide_regions_map.geojson</code> in the <code>scripts</code></li> <li><code>-T or --tide_model</code> the full path to the directory containing the tide model downloaded</li> <li>Replace <code>C:\\Users\\Sample\\coastseg</code> with the actual location of your CoastSeg directory.</li> </ul> <pre><code>python clip_and_write_new_nc_files_cmd_line.py -T C:\\Users\\Sample\\coastseg\\tide_model -R C:\\Users\\Sample\\coastseg\\scripts\\tide_regions_map.geojson\n</code></pre> <p>3.Validate: Ensure each region directory under tide_model contains clipped tide model files.</p> <ul> <li>Each region will have the same format as region0 the full list of files is omitted for brevity.</li> </ul> <pre><code>\u251c\u2500\u2500 CoastSeg\n|\n|___scripts\n|    |_ aviso_fes_tides.py\n|    |_ clip_and_write_new_nc_files_cmd_line.py\n|    |_ tide_regions_map.geojson\n|\n|___tide_model\n|    |_ fes2014\n|    |     |_load_tide\n|    |     |       |__2n2.nc.gz\n|    |     |       |__eps2.nc.gz\n|    |     |       |__ ....\n|    |     |_ocean_tide\n|    |     |       |__2n2.nc.gz\n|    |     |       |__eps2.nc.gz\n|    |     |       |__ ....\n|    |\n|    |_ region0\n|    |     |_fes2014\n|    |     |       |__load_tide\n|    |     |       |       |__2n2.nc\n|    |     |       |       |__eps2.nc\n|    |     |       |       |__....\n|    |     |       |__ocean_tide\n|    |     |       |       |__2n2.nc\n|    |     |       |       |__eps2.nc\n|    |     |       |       |__....\n|    |_ region1\n|    |_ region2\n|    |_ region3\n|    |_ region4\n|    |_ region5\n|    |_ region6\n|    |_ region7\n|    |_ region8\n|    |_ region9\n|    |_ region10\n</code></pre> <p>4.Downloaded Tide Model Contents</p> <p></p>"},{"location":"How-to-Download-Tide-Model-updated/#running-into-problems","title":"Running into Problems?","text":"<ol> <li>Your account may not be verified yet, which means you can't download the model</li> <li>Occasionally the AVISO server goes down. Wait a few hours and try again and see if its working.</li> </ol>"},{"location":"How-to-Download-Tide-Model-updated/#troubleshooting","title":"Troubleshooting","text":"<p>If you are running coastseg on a secure network you may need to make the following modifications to your <code>.condarc</code> file.</p> <ol> <li>If you get an error message similar to <code>CondaValueError: You have chosen a non-default solver backend(libmamba) but it was not recongized</code></li> <li>Solution: comment out the line in the .condarc file <code>solve:libmamba</code></li> <li>You may also need to modify the <code>ssl_verify</code> to either True or False depending on your network security.</li> <li>Always switch <code>ssl_verify</code> to True if you ever set it it to False for debugging purposes.</li> </ol>"},{"location":"How-to-Download-Tide-Model-updated/#how-to-perform-tide-correction","title":"How to Perform Tide Correction","text":"<p>\u26a0\ufe0f You must have run the script to download the FES2014 tide model before attempting to correct tides This script provides utilities for modeling tides and correcting time series data based on tide predictions.</p>"},{"location":"How-to-Download-Tide-Model-updated/#important-read-before-using-tide-correction-button","title":"\u26a0\ufe0f Important: Read Before Using Tide Correction Button","text":"<p>If the tide model was NOT downloaded to <code>CoastSeg/tide_model</code> then the tide correction button will NOT work. The tide correction button will try to load the tide model from <code>&lt;CoastSeg location&gt;/tide_model</code> and an error will occur. Instead follow the instructions in at Option 2: Tide Correction Script</p> <p>If you downloaded the tide model to a different location follow the instructions at Option 2: Tide Correction Script to use the script <code>apply_tidal_correction.py</code></p>"},{"location":"How-to-Download-Tide-Model-updated/#option-1-tide-correction-button-method","title":"Option 1: Tide Correction Button Method","text":"<p>Ever since coastseg 1.1.0 released you can now use the <code>correct tides</code> button in coastseg to automatically correct the timeseries. This button will automatically find which files need to be tidally corrected and apply the tidal correction for you.</p>"},{"location":"How-to-Download-Tide-Model-updated/#important","title":"\u26a0\ufe0f Important","text":"<p>If the tide model was NOT downloaded to <code>CoastSeg/tide_model</code> then the tide correction button will NOT work. The tide correction button will try to load the tide model from <code>&lt;CoastSeg location&gt;/tide_model</code> and an error will occur. Instead follow the instructions in at Option 2: Tide Correction Script</p>"},{"location":"How-to-Download-Tide-Model-updated/#steps","title":"Steps","text":"<p>WARNING You must have downloaded the tide model to the <code>tide_model</code> folder within coastseg for this button to work correctly.</p> <p>1.Enter the beach slope</p> <ul> <li>This is the beach slope in meters for the ROI you have selected.</li> </ul> <p>2.Enter the beach elevation</p> <ul> <li>This is the beach elevation in meters for the ROI you have selected.</li> </ul> <p>3.Select the ROIs' ids to tidally correct</p> <p>4.Click compute tides and wait a few minutes.</p> <p>If you encounter any issues or have any questions please submit an issue at CoastSeg Issues</p> <p></p>"},{"location":"How-to-Download-Tide-Model-updated/#option-2-tide-correction-script","title":"Option 2: Tide Correction Script","text":"<p>\u26a0\ufe0f If the tide model was NOT downloaded to <code>CoastSeg/tide_model</code>, then you must use the tide correction script.</p>"},{"location":"How-to-Download-Tide-Model-updated/#example-1-apply-tide-correction-to-a-session-and-provide-tide-model-location","title":"Example 1: Apply Tide Correction to a session and provide tide model location","text":"<ol> <li>Choose a session</li> <li>In this example I will be using session <code>dnz3_extract_shorelines_10_yr</code> and using ROI <code>ID_dnz3_datetime12-22-23__09_10_44</code></li> <li>Example: <code>C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44</code></li> <li>Get the location of the config_gdf.geojson file</li> <li>This parameter is used after the <code>-C</code></li> <li>Example: <code>-C \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\config_gdf.geojson\"</code></li> <li>Get the location of the transect_time_series.csv file</li> <li>This parameter is used after the <code>-T</code></li> <li>Example: <code>-T \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\transect_time_series.csv\"</code></li> <li>Get the location of the tide_model</li> <li>This parameter is used after the <code>-M</code></li> <li>Example: <code>-M \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\tide_model\"</code></li> <li>Select a Beach Elevation</li> <li>This is the elevation of the beach in meters for the ROI you have selected</li> <li>Example: <code>-E 3.2</code></li> <li>Select a Beach Slope</li> <li>This is the slope of the beach in meters for the ROI you have selected</li> <li>Example: <code>-S 2.1</code></li> <li>Assemble the command</li> <li>Assemble all commands into a single line. I recommended using notepad to combine all the commands into a single line    <pre><code>python apply_tidal_correction.py -E 3.2 -S 2.1 -C\n\"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\config_gdf.geojson\" -T\n\"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\transect_time_series.csv\"\n-M \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\tide_model\"\n</code></pre></li> <li>Run the command</li> <li>It takes a few minutes to predict the tides</li> </ol>"},{"location":"How-to-Download-Tide-Model-updated/#parameters","title":"Parameters:","text":"<ol> <li> <p>-C (or -c) [CONFIG_FILE_PATH]</p> </li> <li> <p>Description: Path to the configuration file.</p> </li> <li>Example: <code>-C \"path_to_config_file\"</code></li> <li> <p><code>CONFIG_FILE_PATH</code>: Path to the configuration file. This is the <code>config_gdf.geojson</code> in the session directory generated when shorelines were extracted</p> </li> <li> <p>-T (or -t) [RAW_TIMESERIES_FILE_PATH]</p> </li> <li> <p>Description: Path to the raw timeseries file.</p> </li> <li>Example: <code>-T \"path_to_timeseries_file\"</code></li> <li> <p><code>RAW_TIMESERIES_FILE_PATH</code>: Path to a csv file containing the time series created by extracting shorelines with coastseg. This timeseries      represents the intersection of each transect with the shoreline extracted for a particular date and time. It is not tidally corrected.</p> </li> <li> <p>-E (or -e) [REFERENCE_ELEVATION]</p> </li> <li> <p>Description: Set the reference elevation value. This is a float number.</p> </li> <li> <p>Example: <code>-E 3</code></p> </li> <li> <p>-S (or -s) [BEACH_SLOPE]</p> </li> <li>Description: Set the beach slope value. This is a float number.</li> <li>Example: <code>-S 2</code></li> </ol>"},{"location":"How-to-Download-Tide-Model-updated/#optional-configuration-options","title":"Optional Configuration Options","text":"<p>If you didn't install the tide model in the default location you will need to modify the following variables</p> <ol> <li> <p>-P (or -p) [TIDE_PREDICTIONS_FILE_NAME]</p> </li> <li> <p>Description: File name for saving a csv file containing the tide predictions for each date time in the timeseries provided.</p> </li> <li>By Default this file is named \"tidal_predictions.csv\"</li> <li> <p>Example: <code>-P \"tidal_predictions.csv\"</code></p> </li> <li> <p>-O (or -o) [TIDALLY_CORRECTED_FILE_NAME]</p> </li> <li> <p>Description: File name for saving the tidally corrected time series csv file.</p> </li> <li>By Default this file is named \"tidally_corrected_time_series.csv\"</li> <li> <p>Example: <code>-O \"tidally_corrected_time_series.csv\"</code></p> </li> <li> <p>-R (or -r) [MODEL_REGIONS_GEOJSON_PATH]</p> </li> <li> <p>Description: Path to the model regions GeoJSON file.</p> </li> <li>By default the program looks for <code>tide_regions_map.geojson</code> in the <code>scripts</code> directory</li> <li>Example: <code>-R \"c:\\coastseg\\scripts\\tide_regions_map.geojson\"</code></li> <li> <p><code>MODEL_REGIONS_GEOJSON_PATH</code>: Path to the location of the geojson file containing the regions used to create the clipped tide model in the previous steps. This file is typically located in the scripts directory within coastseg. \"c:\\coastseg\\scripts\\tide_regions_map.geojson\"`</p> </li> <li> <p>-M (or -m) [FES_2014_MODEL_PATH]</p> </li> <li>Description: Path to the FES 2014 tide model directory.</li> <li>Example: <code>-M \"c:\\coastseg\\tide_model\"</code></li> <li><code>FES_2014_MODEL_PATH</code>: Path to the FES 2014 tide model, by default attempts to load from <code>coastseg\\tide_model</code> if you installed the tide_model from      step 3 in a different location modify this variable to have the full location to the directory containing the clipped 2014 fes tide model.</li> </ol>"},{"location":"How-to-Download-Tide-Model-updated/#running-the-script","title":"Running the script:","text":"<p>Use the parameters as described while executing the script. Here's an example usage: Example 1: Only Required Parameter</p> <pre><code>cd scripts\npython apply_tidal_correction.py -C \"path_to_config\" -T \"path_to_timeseries\" -E 3 -S 2\n</code></pre> <pre><code>python apply_tidal_correction.py -E 3 -S 2 -C \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\fire_island\\ID_ham1_datetime08-03-23__10_58_34\\config_gdf.geojson\" -T \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\fire_island\\ID_ham1_datetime08-03-23__10_58_34\\transect_time_series.csv\"\n</code></pre> <p>Example 2: All Available Parameters</p> <pre><code>cd scripts\npython apply_tidal_correction.py -C \"path_to_config\" -T \"path_to_timeseries\" -E 3 -S 2 -P \"predictions.csv\" -O \"corrected.csv\" -R \"regions.geojson\" -M \"model_directory\"\n</code></pre> <pre><code>cd scripts\npython apply_tidal_correction.py -E 3 -S 2 -C \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\fire_island\\ID_ham1_datetime08-03-23__10_58_34\\config_gdf.geojson\" -T \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\fire_island\\ID_ham1_datetime08-03-23__10_58_34\\transect_time_series.csv\" -P \"tidal_predictions.csv\" -O \"tidally_corrected_time_series.csv\" -R \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\scripts\\tide_regions_map.geojson\" -M \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\tide_model\"\n</code></pre>"},{"location":"How-to-Download-Tide-Model-updated/#results","title":"Results","text":"<p>The results will be located in the scripts directory where the <code>apply_tidal_correction.py</code> script is located.</p> <ul> <li><code>tidal_predictions.csv</code>: Contains the tide predictions for each datetime in the timeseries csv file given by <code>RAW_TIMESERIES_FILE_PATH</code>.</li> <li><code>\"tidally_corrected_time_series.csv\"</code>: Contains the tidally corrected time series data based on the timeseries csv file given by <code>RAW_TIMESERIES_FILE_PATH</code>.</li> </ul>"},{"location":"How-to-Download-Tide-Model-updated/#credits","title":"Credits","text":"<p>Thank you DEA-Coastlines for making a guide on how to use pyTMD and pyTMD for making a easy to use script to download the AVISO FES 2014 Model. The <code>model_tides</code> in this code has been modified and the original function was originally written by Robbi Bishop-Taylor for the <code>dea-tools</code> package https://github.com/GeoscienceAustralia/dea-notebooks/blob/develop/Tools/dea_tools/coastal.py#L466-L473</p>"},{"location":"How-to-Download-Tide-Model/","title":"Overview","text":"<p>This guide will walk you through signing up for the necessary account and then choosing between two methods to download and clip the tide model for use in CoastSeg.</p>"},{"location":"How-to-Download-Tide-Model/#part-1-download-the-tide-model","title":"Part 1: Download the Tide Model","text":""},{"location":"How-to-Download-Tide-Model/#step-1-register","title":"Step 1: Register","text":"<ul> <li>Sign Up: Begin by registering on the AVISO platform. Visit the AVISO Registration Page  to create your account.</li> </ul>"},{"location":"How-to-Download-Tide-Model/#step-2-select-the-tide-model","title":"Step 2: Select the Tide Model","text":"<ul> <li>Select the FES Model During the registration process, you'll be presented with various data models to choose from. Ensure you select the FES (Finite Element Solution - Oceanic Tides Heights) model.</li> </ul>"},{"location":"How-to-Download-Tide-Model/#step-3-account-verification","title":"Step 3: Account Verification","text":"<ul> <li>Confirmation Email: After completing the registration, AVISO will send you a confirmation email. Check your inbox (and spam folder if necessary) for this email.</li> <li>Verify Your Account: Click on the link provided in the email to verify your account. This step is crucial to activate your account and gain access to the data models.</li> </ul>"},{"location":"How-to-Download-Tide-Model/#step-4-accessing-your-dashboard","title":"Step 4: Accessing Your Dashboard","text":"<ul> <li>Login: Once your account is verified, log into your AVISO account.</li> <li>Navigate to Products: On your account dashboard, you'll find a left side menu. Click on the My products option. </li> </ul>"},{"location":"How-to-Download-Tide-Model/#step-5-confirm-your-subscription","title":"Step 5: Confirm Your Subscription","text":"<ul> <li>Check Your Subscriptions: In the \"Your current subscriptions\" section, ensure that the FES (Finite Element Solution - Oceanic Tides Heights) model is listed. This confirms that you've successfully subscribed to the desired model.</li> </ul>"},{"location":"How-to-Download-Tide-Model/#part-2-download-and-clip-the-tide-model","title":"Part 2: Download and Clip the Tide Model","text":"<p>You have two options to download and clip the tide model: use the Jupyter Notebook (Recommended) or using a Script (Alternative). </p>"},{"location":"How-to-Download-Tide-Model/#space-and-time-requirements","title":"Space and Time Requirements","text":"<ul> <li>Storage Space: Ensure you have at least 14GB of free space available.</li> <li>Time Commitment: The download and setup process for the fes2014 model takes approximately 1-2 hours. This is a one-time requirement.</li> </ul>"},{"location":"How-to-Download-Tide-Model/#option-1-using-the-download_tide_modelipynb-notebook-recommended","title":"Option 1: Using the Download_tide_model.ipynb Notebook (Recommended)","text":"<p>The easiest way to download and clip the tide model is to use this notebook. Run all the code in the notebook and you're done!</p> <ol> <li>Prepare: Ensure you have you are in an activated coastseg environment and know your AVISO email and password.</li> <li>Open Notebook: Launch <code>Download_tide_model.ipynb</code> in Jupyter Notebook.</li> </ol> <pre><code>cd CoastSeg\njupyter lab Download_tide_model.ipynb\n</code></pre> <p>3.Run Code: Execute all cells in the notebook. The code will guide you through the download and clipping process automatically.</p> <p>4.Check Results: Confirm that the model files are correctly downloaded and clipped in the specified directory.</p> <ul> <li> <p>Example Output from Downloading Tide Model Step in Notebook </p> </li> <li> <p>Example Output from Clipping Tide Model Step in Notebook </p> </li> </ul> <p>5.Downloaded Tide Model Contents</p> <p></p>"},{"location":"How-to-Download-Tide-Model/#option-2-using-the-script-alternative","title":"Option 2: Using the Script (Alternative)","text":""},{"location":"How-to-Download-Tide-Model/#setup","title":"Setup","text":"<ol> <li>Create Directory: Navigate to your CoastSeg installation directory and create a new folder named tide_model.</li> <li>Script Location: Change directory to the scripts folder within CoastSeg.</li> </ol> <pre><code>cd &lt;location of your coastseg directory&gt;\nmkdir tide_model\ncd scripts\n</code></pre>"},{"location":"How-to-Download-Tide-Model/#download-clip","title":"Download &amp; Clip","text":"<p>1.Run Download Script: Execute the <code>aviso_fes_tides.py</code> script with the necessary parameters, including your AVISO credentials and target directory for the tide model.</p> <ul> <li>\u26a0\ufe0f Enter your AVISO password when prompted. Note that the password won't display as you type. After you have finished typing, press Enter to proceed.</li> <li>Replace <code>C:\\Users\\Sample\\coastseg</code> with the actual location of your CoastSeg directory.</li> <li></li> </ul> <p>Example command:</p> <pre><code> python aviso_fes_tides.py --user your_email@example.com -D C:\\Users\\Sample\\coastseg\\tide_model --load --log --tide FES2014 -G\n</code></pre> <p>2.Clip Model to Regions: After downloading, run the <code>clip_and_write_new_nc_files_cmd_line.py</code> script with the paths to your tide model directory and the regions geojson file.</p> <p>To make the tide predictions compute faster we will clip the model it to various regions across the planet. After we've clipped the model to each region, when we want to predict the tide at a particular latitude and longitude we first figure out which region the point lies within, then we load the tide model we clipped to that region.</p> <ul> <li><code>-R or --regions_file</code> the full path to the regions geojson file. You should find this file <code>tide_regions_map.geojson</code> in the <code>scripts</code></li> <li><code>-T or --tide_model</code> the full path to the directory containing the tide model downloaded</li> <li>Replace <code>C:\\Users\\Sample\\coastseg</code> with the actual location of your CoastSeg directory.</li> </ul> <pre><code>python clip_and_write_new_nc_files_cmd_line.py -T C:\\Users\\Sample\\coastseg\\tide_model -R C:\\Users\\Sample\\coastseg\\scripts\\tide_regions_map.geojson\n</code></pre> <p>3.Validate: Ensure each region directory under tide_model contains clipped tide model files.</p> <ul> <li>Each region will have the same format as region0 the full list of files is omitted for brevity.</li> </ul> <pre><code>\u251c\u2500\u2500 CoastSeg\n|\n|___scripts\n|    |_ aviso_fes_tides.py\n|    |_ clip_and_write_new_nc_files_cmd_line.py\n|    |_ tide_regions_map.geojson\n|\n|___tide_model\n|    |_ fes2014\n|    |     |_load_tide\n|    |     |       |__2n2.nc.gz\n|    |     |       |__eps2.nc.gz\n|    |     |       |__ ....\n|    |     |_ocean_tide\n|    |     |       |__2n2.nc.gz\n|    |     |       |__eps2.nc.gz\n|    |     |       |__ ....\n|    |\n|    |_ region0\n|    |     |_fes2014\n|    |     |       |__load_tide\n|    |     |       |       |__2n2.nc\n|    |     |       |       |__eps2.nc\n|    |     |       |       |__....\n|    |     |       |__ocean_tide\n|    |     |       |       |__2n2.nc\n|    |     |       |       |__eps2.nc\n|    |     |       |       |__....\n|    |_ region1\n|    |_ region2\n|    |_ region3\n|    |_ region4\n|    |_ region5\n|    |_ region6\n|    |_ region7\n|    |_ region8\n|    |_ region9\n|    |_ region10\n</code></pre> <p>4.Downloaded Tide Model Contents</p> <p></p>"},{"location":"How-to-Download-Tide-Model/#running-into-problems","title":"Running into Problems?","text":"<ol> <li>Your account may not be verified yet, which means you can't download the model</li> <li>Occasionally the AVISO server goes down. Wait a few hours and try again and see if its working.</li> </ol>"},{"location":"How-to-Download-Tide-Model/#troubleshooting","title":"Troubleshooting","text":"<p>If you are running coastseg on a secure network you may need to make the following modifications to your <code>.condarc</code> file.</p> <ol> <li>If you get an error message similar to <code>CondaValueError: You have chosen a non-default solver backend(libmamba) but it was not recongized</code></li> <li>Solution: comment out the line in the .condarc file <code>solve:libmamba</code></li> <li>You may also need to modify the <code>ssl_verify</code> to either True or False depending on your network security.</li> <li>Always switch <code>ssl_verify</code> to True if you ever set it it to False for debugging purposes.</li> </ol>"},{"location":"How-to-Download-Tide-Model/#how-to-perform-tide-correction","title":"How to Perform Tide Correction","text":"<p>\u26a0\ufe0f You must have run the script to download the FES2014 tide model before attempting to correct tides This script provides utilities for modeling tides and correcting time series data based on tide predictions.</p>"},{"location":"How-to-Download-Tide-Model/#important-read-before-using-tide-correction-button","title":"\u26a0\ufe0f Important: Read Before Using Tide Correction Button","text":"<p>If the tide model was NOT downloaded to <code>CoastSeg/tide_model</code> then the tide correction button will NOT work. The tide correction button will try to load the tide model from <code>&lt;CoastSeg location&gt;/tide_model</code> and an error will occur. Instead follow the instructions in at Option 2: Tide Correction Script</p> <p>If you downloaded the tide model to a different location follow the instructions at Option 2: Tide Correction Script to use the script <code>apply_tidal_correction.py</code></p>"},{"location":"How-to-Download-Tide-Model/#option-1-tide-correction-button-method","title":"Option 1: Tide Correction Button Method","text":"<p>Ever since coastseg 1.1.0 released you can now use the <code>correct tides</code> button in coastseg to automatically correct the timeseries. This button will automatically find which files need to be tidally corrected and apply the tidal correction for you.</p>"},{"location":"How-to-Download-Tide-Model/#important","title":"\u26a0\ufe0f Important","text":"<p>If the tide model was NOT downloaded to <code>CoastSeg/tide_model</code> then the tide correction button will NOT work. The tide correction button will try to load the tide model from <code>&lt;CoastSeg location&gt;/tide_model</code> and an error will occur. Instead follow the instructions in at Option 2: Tide Correction Script</p>"},{"location":"How-to-Download-Tide-Model/#steps","title":"Steps","text":"<p>WARNING You must have downloaded the tide model to the <code>tide_model</code> folder within coastseg for this button to work correctly.</p> <p>1.Enter the beach slope</p> <ul> <li>This is the beach slope in meters for the ROI you have selected.</li> </ul> <p>2.Enter the beach elevation</p> <ul> <li>This is the beach elevation in meters for the ROI you have selected.</li> </ul> <p>3.Select the ROIs' ids to tidally correct</p> <p>4.Click compute tides and wait a few minutes.</p> <p>If you encounter any issues or have any questions please submit an issue at CoastSeg Issues</p> <p></p>"},{"location":"How-to-Download-Tide-Model/#option-2-tide-correction-script","title":"Option 2: Tide Correction Script","text":"<p>\u26a0\ufe0f If the tide model was NOT downloaded to <code>CoastSeg/tide_model</code>, then you must use the tide correction script.</p>"},{"location":"How-to-Download-Tide-Model/#example-1-apply-tide-correction-to-a-session-and-provide-tide-model-location","title":"Example 1: Apply Tide Correction to a session and provide tide model location","text":"<ol> <li>Choose a session</li> <li>In this example I will be using session <code>dnz3_extract_shorelines_10_yr</code> and using ROI <code>ID_dnz3_datetime12-22-23__09_10_44</code></li> <li>Example: <code>C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44</code></li> <li>Get the location of the config_gdf.geojson file</li> <li>This parameter is used after the <code>-C</code></li> <li>Example: <code>-C \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\config_gdf.geojson\"</code></li> <li>Get the location of the transect_time_series.csv file</li> <li>This parameter is used after the <code>-T</code></li> <li>Example: <code>-T \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\transect_time_series.csv\"</code></li> <li>Get the location of the tide_model</li> <li>This parameter is used after the <code>-M</code></li> <li>Example: <code>-M \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\tide_model\"</code></li> <li>Select a Beach Elevation</li> <li>This is the elevation of the beach in meters for the ROI you have selected</li> <li>Example: <code>-E 3.2</code></li> <li>Select a Beach Slope</li> <li>This is the slope of the beach in meters for the ROI you have selected</li> <li>Example: <code>-S 2.1</code></li> <li>Assemble the command</li> <li>Assemble all commands into a single line. I recommended using notepad to combine all the commands into a single line    <pre><code>python apply_tidal_correction.py -E 3.2 -S 2.1 -C\n\"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\config_gdf.geojson\" -T\n\"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\transect_time_series.csv\"\n-M \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\tide_model\"\n</code></pre></li> <li>Run the command</li> <li>It takes a few minutes to predict the tides</li> </ol>"},{"location":"How-to-Download-Tide-Model/#parameters","title":"Parameters:","text":"<ol> <li> <p>-C (or -c) [CONFIG_FILE_PATH]</p> </li> <li> <p>Description: Path to the configuration file.</p> </li> <li>Example: <code>-C \"path_to_config_file\"</code></li> <li> <p><code>CONFIG_FILE_PATH</code>: Path to the configuration file. This is the <code>config_gdf.geojson</code> in the session directory generated when shorelines were extracted</p> </li> <li> <p>-T (or -t) [RAW_TIMESERIES_FILE_PATH]</p> </li> <li> <p>Description: Path to the raw timeseries file.</p> </li> <li>Example: <code>-T \"path_to_timeseries_file\"</code></li> <li> <p><code>RAW_TIMESERIES_FILE_PATH</code>: Path to a csv file containing the time series created by extracting shorelines with coastseg. This timeseries      represents the intersection of each transect with the shoreline extracted for a particular date and time. It is not tidally corrected.</p> </li> <li> <p>-E (or -e) [REFERENCE_ELEVATION]</p> </li> <li> <p>Description: Set the reference elevation value. This is a float number.</p> </li> <li> <p>Example: <code>-E 3</code></p> </li> <li> <p>-S (or -s) [BEACH_SLOPE]</p> </li> <li>Description: Set the beach slope value. This is a float number.</li> <li>Example: <code>-S 2</code></li> </ol>"},{"location":"How-to-Download-Tide-Model/#optional-configuration-options","title":"Optional Configuration Options","text":"<p>If you didn't install the tide model in the default location you will need to modify the following variables</p> <ol> <li> <p>-P (or -p) [TIDE_PREDICTIONS_FILE_NAME]</p> </li> <li> <p>Description: File name for saving a csv file containing the tide predictions for each date time in the timeseries provided.</p> </li> <li>By Default this file is named \"tidal_predictions.csv\"</li> <li> <p>Example: <code>-P \"tidal_predictions.csv\"</code></p> </li> <li> <p>-O (or -o) [TIDALLY_CORRECTED_FILE_NAME]</p> </li> <li> <p>Description: File name for saving the tidally corrected time series csv file.</p> </li> <li>By Default this file is named \"tidally_corrected_time_series.csv\"</li> <li> <p>Example: <code>-O \"tidally_corrected_time_series.csv\"</code></p> </li> <li> <p>-R (or -r) [MODEL_REGIONS_GEOJSON_PATH]</p> </li> <li> <p>Description: Path to the model regions GeoJSON file.</p> </li> <li>By default the program looks for <code>tide_regions_map.geojson</code> in the <code>scripts</code> directory</li> <li>Example: <code>-R \"c:\\coastseg\\scripts\\tide_regions_map.geojson\"</code></li> <li> <p><code>MODEL_REGIONS_GEOJSON_PATH</code>: Path to the location of the geojson file containing the regions used to create the clipped tide model in the previous steps. This file is typically located in the scripts directory within coastseg. \"c:\\coastseg\\scripts\\tide_regions_map.geojson\"`</p> </li> <li> <p>-M (or -m) [FES_2014_MODEL_PATH]</p> </li> <li>Description: Path to the FES 2014 tide model directory.</li> <li>Example: <code>-M \"c:\\coastseg\\tide_model\"</code></li> <li><code>FES_2014_MODEL_PATH</code>: Path to the FES 2014 tide model, by default attempts to load from <code>coastseg\\tide_model</code> if you installed the tide_model from      step 3 in a different location modify this variable to have the full location to the directory containing the clipped 2014 fes tide model.</li> </ol>"},{"location":"How-to-Download-Tide-Model/#running-the-script","title":"Running the script:","text":"<p>Use the parameters as described while executing the script. Here's an example usage: Example 1: Only Required Parameter</p> <pre><code>cd scripts\npython apply_tidal_correction.py -C \"path_to_config\" -T \"path_to_timeseries\" -E 3 -S 2\n</code></pre> <pre><code>python apply_tidal_correction.py -E 3 -S 2 -C \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\fire_island\\ID_ham1_datetime08-03-23__10_58_34\\config_gdf.geojson\" -T \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\fire_island\\ID_ham1_datetime08-03-23__10_58_34\\transect_time_series.csv\"\n</code></pre> <p>Example 2: All Available Parameters</p> <pre><code>cd scripts\npython apply_tidal_correction.py -C \"path_to_config\" -T \"path_to_timeseries\" -E 3 -S 2 -P \"predictions.csv\" -O \"corrected.csv\" -R \"regions.geojson\" -M \"model_directory\"\n</code></pre> <pre><code>cd scripts\npython apply_tidal_correction.py -E 3 -S 2 -C \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\fire_island\\ID_ham1_datetime08-03-23__10_58_34\\config_gdf.geojson\" -T \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\fire_island\\ID_ham1_datetime08-03-23__10_58_34\\transect_time_series.csv\" -P \"tidal_predictions.csv\" -O \"tidally_corrected_time_series.csv\" -R \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\scripts\\tide_regions_map.geojson\" -M \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\tide_model\"\n</code></pre>"},{"location":"How-to-Download-Tide-Model/#results","title":"Results","text":"<p>The results will be located in the scripts directory where the <code>apply_tidal_correction.py</code> script is located.</p> <ul> <li><code>tidal_predictions.csv</code>: Contains the tide predictions for each datetime in the timeseries csv file given by <code>RAW_TIMESERIES_FILE_PATH</code>.</li> <li><code>\"tidally_corrected_time_series.csv\"</code>: Contains the tidally corrected time series data based on the timeseries csv file given by <code>RAW_TIMESERIES_FILE_PATH</code>.</li> </ul>"},{"location":"How-to-Download-Tide-Model/#credits","title":"Credits","text":"<p>Thank you DEA-Coastlines for making a guide on how to use pyTMD and pyTMD for making a easy to use script to download the AVISO FES 2014 Model. The <code>model_tides</code> in this code has been modified and the original function was originally written by Robbi Bishop-Taylor for the <code>dea-tools</code> package https://github.com/GeoscienceAustralia/dea-notebooks/blob/develop/Tools/dea_tools/coastal.py#L466-L473</p>"},{"location":"How-to-Filter-Out-Bad-Imagery/","title":"Filtering Imagery","text":"<p>To extract the best shorelines, it's essential to use only high-quality imagery, which means filtering out any poor-quality images. You should filter out bad imagery in <code>data/roi_id/jpg_files/preprocessed/RGB</code> by moving any undesirable images to a designated subdirectory named 'bad'.</p> <p>Filtering the RGB images does not delete any TIFF files but helps to improve the efficiency of shoreline extraction and enhance the quality of the extracted shorelines. For more information on the shoreline extraction process, check out the wiki page about the shoreline extraction process.</p>"},{"location":"How-to-Filter-Out-Bad-Imagery/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"How-to-Filter-Out-Bad-Imagery/#before-you-begin","title":"Before You Begin","text":"<p>Download data with the <code>SDS_coastsat_classifier.ipynb</code> and ensure it is saved to your <code>data</code> directory within CoastSeg.</p>"},{"location":"How-to-Filter-Out-Bad-Imagery/#1-open-the-data-directory","title":"1. Open the <code>data</code> Directory","text":"<ol> <li>Navigate to the <code>data</code> directory within CoastSeg.</li> <li>Click on the ROI directory you want to sort</li> </ol> <p>In this example, you can see that ROI 3 is located within the <code>CoastSeg/data</code> folder. The <code>jpg_files &gt; preprocessed &gt; RGB</code> directory contains all the RGB imagery for all the satellites.</p> <pre><code>\u251c\u2500\u2500 CoastSeg\n|\n|___data\n|    |_ ID_3_datetime11-22-22__11_15_15\n\u2502\u00a0\u00a0 |   |_ L8\n\u2502\u00a0\u00a0 |   |_ L9\n\u2502\u00a0\u00a0 |   |_ S2\n\u2502\u00a0\u00a0 |   |_ jpg_files\n\u2502\u00a0\u00a0 |   |  |_ preprocessed\n|   \u2502\u00a0\u00a0 |   |  |_ RGB\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_RGB_S2.jpg\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_RGB_L8.jpg\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_RGB_L9.jpg\n|   \u2502\u00a0\u00a0 |   |  |_ NIR\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_NIR_S2.jpg\n|   |   \u2502\u00a0\u00a0 |  |  |_ &lt;rest of images...&gt;\n|   \u2502\u00a0\u00a0 |   |  |_ SWIR\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_SWIR_S2.jpg\n|   |   \u2502\u00a0\u00a0 |  |  |_ &lt;rest of images...&gt;\n\u2502\u00a0\u00a0 |   |   |_detection\n|   \u2502\u00a0\u00a0 |   |  |_&lt;jpgs of detected shorelines&gt;\n\u2502\u00a0\u00a0 |   |_config.json\n\u2502\u00a0\u00a0 |   |_config_gdf.json\n\u2502\u00a0\u00a0 |   |_extracted_shorelines.geojson\n</code></pre>"},{"location":"How-to-Filter-Out-Bad-Imagery/#2-navigate-to-the-rgb-directory","title":"2. Navigate to the RGB Directory","text":"<ol> <li>Go to <code>jpg_files &gt; preprocessed &gt; RGB</code> within the ROI directory.</li> <li>Example on Windows: <code>CoastSeg\\data\\ID_yvk1_datetime06-05-23__06_57_26\\jpg_files\\preprocessed\\RGB</code></li> </ol>"},{"location":"How-to-Filter-Out-Bad-Imagery/#3-move-bad-imagery","title":"3. Move Bad Imagery","text":"<ol> <li>Create a subdirectory named 'bad' within the <code>data/roi_id/jpg_files/preprocessed/RGB</code> directory if it does not already exist.</li> <li>Identify the images you want to remove.</li> <li>Move these images to the 'bad' subdirectory.</li> </ol>"},{"location":"How-to-Filter-Out-Bad-Imagery/#4-test-shoreline-extraction","title":"4. Test Shoreline Extraction","text":"<p>Load your ROIs in CoastSeg and run <code>extract shorelines</code> again. None of the images that were sorted into the 'bad' directory will have their shorelines extracted. For more details, refer to the guide How to Extract Shorelines.</p>"},{"location":"How-to-Tidally-Correct/","title":"How to Tidally Correct","text":"<p>\u26a0\ufe0fMake sure you have downloaded the FES2014 tide model following the guide 'How to Download the Tide Model'\u26a0\ufe0f"},{"location":"How-to-Tidally-Correct/#option-1-tide-correction-button-method-recommended","title":"Option 1: Tide Correction Button Method (Recommended)","text":"<p>Ever since coastseg 1.1.0 released you can now use the <code>correct tides</code> button in coastseg to automatically correct the timeseries. This button will automatically find which files need to be tidally corrected and apply the tidal correction for you.</p> <p>\u26a0\ufe0f Important \u26a0\ufe0f</p> <p>If the tide model was NOT downloaded to <code>CoastSeg/tide_model</code> then the tide correction button will NOT work. The tide correction button will try to load the tide model from <code>&lt;CoastSeg location&gt;/tide_model</code> and an error will occur. Instead follow the instructions in at Option 2: Tide Correction Script</p>"},{"location":"How-to-Tidally-Correct/#steps","title":"Steps","text":"<p>WARNING You must have downloaded the tide model to the <code>tide_model</code> folder within coastseg for this button to work correctly.</p> <p>1.Load a Session</p> <ul> <li>Load a session containing extracted shorelines.</li> <li>The following files will be saved to each ROI in the session (any existing files will be overwritten)</li> </ul> <p>-- <code>predicted_tides.csv</code>: contains the tide prediction from the tide model for each transect end point for each date a shoreline was detected on it.</p> <p>-- <code>tidally_corrected_transect_time_series_points.geojson</code> : contains the tidally_corrected shoreline transect intersections points from <code>raw_transect_time_series_merged.csv</code>.</p> <p>-- <code>tidally_corrected_raw_transect_time_series_vectors.geojson</code> : contains the tidally_corrected shoreline transect intersections from <code>raw_transect_time_series_merged.csv</code>. as vectors by connecting points that occurred on the same date together.</p> <p></p> <p>2.Enter the beach slope</p> <ul> <li>This is the beach slope in meters for the ROI you have selected.</li> </ul> <p>3.Enter the beach elevation</p> <ul> <li>This is the beach elevation in meters relative to MSL(Mean Sea Level) for the ROI you have selected.</li> </ul> <p>3.Select the ROIs' ids to tidally correct</p> <p>-- You should see some extracted shorelines on the map if you don't then the ROI ID won't appear in the dropdown</p> <p></p> <p>4.Click 'Correct Tides' and wait a few minutes.</p> <p>If you encounter any issues or have any questions please submit an issue at CoastSeg Issues</p> <p></p>"},{"location":"How-to-Tidally-Correct/#option-2-tide-correction-script","title":"Option 2: Tide Correction Script","text":"<p>\u26a0\ufe0f If the tide model was NOT downloaded to <code>CoastSeg/tide_model</code>, then you must use the tide correction script.</p>"},{"location":"How-to-Tidally-Correct/#example-1-apply-tide-correction-to-a-session-and-provide-tide-model-location","title":"Example 1: Apply Tide Correction to a session and provide tide model location","text":"<p>1.Choose a session</p> <ul> <li>In this example I will be using session <code>dnz3_extract_shorelines_10_yr</code> and using ROI <code>ID_dnz3_datetime12-22-23__09_10_44</code></li> <li>Example: <code>C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44</code></li> </ul> <p>2.Get the location of the config_gdf.geojson file</p> <ul> <li>This parameter is used after the <code>-C</code></li> <li>Example: <code>-C \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\config_gdf.geojson\"</code></li> </ul> <p>3.Get the location of the transect_time_series.csv file</p> <ul> <li>This parameter is used after the <code>-T</code></li> <li>Example: <code>-T \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\transect_time_series.csv\"</code></li> </ul> <p>4.Get the location of the tide_model</p> <ul> <li>This parameter is used after the <code>-M</code></li> <li>Example: <code>-M \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\tide_model\"</code></li> </ul> <p>5.Select a Beach Elevation</p> <ul> <li>This is the elevation of the beach in meters relative to MSL(Mean Sea Level) for the ROI you have selected</li> <li>Example: <code>-E 3.2</code></li> </ul> <p>6.Select a Beach Slope</p> <ul> <li>This is the slope of the beach in meters for the ROI you have selected</li> <li>Example: <code>-S 2.1</code></li> </ul> <p>7.Assemble the command</p> <ul> <li>Assemble all commands into a single line. I recommended using notepad to combine all the commands into a single line</li> </ul> <pre><code>python apply_tidal_correction.py -E 3.2 -S 2.1 -C\n\"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\config_gdf.geojson\" -T\n\"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\transect_time_series.csv\"\n-M \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\tide_model\"\n</code></pre> <p>8.Run the command</p> <ul> <li>It takes a few minutes to predict the tides</li> </ul> <p></p>"},{"location":"How-to-Tidally-Correct/#parameters","title":"Parameters:","text":"<p>1.-C (or -c) [CONFIG_FILE_PATH]</p> <ul> <li>Description: Path to the configuration file.</li> <li>Example: <code>-C \"path_to_config_file\"</code></li> <li><code>CONFIG_FILE_PATH</code>: Path to the configuration file. This is the <code>config_gdf.geojson</code> in the session directory generated when shorelines were extracted</li> </ul> <p>2.-T (or -t) [RAW_TIMESERIES_FILE_PATH]</p> <ul> <li>Description: Path to the raw timeseries file.</li> <li>Example: <code>-T \"path_to_timeseries_file\"</code></li> <li><code>RAW_TIMESERIES_FILE_PATH</code>: Path to a csv file containing the time series created by extracting shorelines with coastseg. This timeseries   represents the intersection of each transect with the shoreline extracted for a particular date and time. It is not tidally corrected.</li> </ul> <p>3.-E (or -e) [REFERENCE_ELEVATION]</p> <ul> <li>Description: Set the reference elevation value. This is a float number.</li> <li>Example: <code>-E 3</code></li> </ul> <p>4.-S (or -s) [BEACH_SLOPE]</p> <ul> <li>Description: Set the beach slope value. This is a float number.</li> <li>Example: <code>-S 2</code></li> </ul>"},{"location":"How-to-Tidally-Correct/#optional-configuration-options","title":"Optional Configuration Options","text":"<p>If you didn't install the tide model in the default location you will need to modify the following variables</p> <p>5.-P (or -p) [TIDE_PREDICTIONS_FILE_NAME]</p> <ul> <li>Description: File name for saving a csv file containing the tide predictions for each date time in the timeseries provided.</li> <li>By Default this file is named \"tidal_predictions.csv\"</li> <li>Example: <code>-P \"tidal_predictions.csv\"</code></li> </ul> <p>6.-O (or -o) [TIDALLY_CORRECTED_FILE_NAME]</p> <ul> <li>Description: File name for saving the tidally corrected time series csv file.</li> <li>By Default this file is named \"tidally_corrected_time_series.csv\"</li> <li>Example: <code>-O \"tidally_corrected_time_series.csv\"</code></li> </ul> <p>7.-R (or -r) [MODEL_REGIONS_GEOJSON_PATH]</p> <ul> <li>Description: Path to the model regions GeoJSON file.</li> <li>By default the program looks for <code>tide_regions_map.geojson</code> in the <code>scripts</code> directory</li> <li>Example: <code>-R \"c:\\coastseg\\scripts\\tide_regions_map.geojson\"</code></li> <li><code>MODEL_REGIONS_GEOJSON_PATH</code>: Path to the location of the geojson file containing the regions used to create the clipped tide model in the previous steps. This file is typically located in the scripts directory within coastseg. \"c:\\coastseg\\scripts\\tide_regions_map.geojson\"`</li> </ul> <p>8.-M (or -m) [FES_2014_MODEL_PATH]</p> <ul> <li>Description: Path to the FES 2014 tide model directory.</li> <li>Example: <code>-M \"c:\\coastseg\\tide_model\"</code></li> <li><code>FES_2014_MODEL_PATH</code>: Path to the FES 2014 tide model, by default attempts to load from <code>coastseg\\tide_model</code> if you installed the tide_model from   step 3 in a different location modify this variable to have the full location to the directory containing the clipped 2014 fes tide model.</li> </ul>"},{"location":"How-to-Tidally-Correct/#running-the-script","title":"Running the script:","text":"<p>Use the parameters as described while executing the script. Here's an example usage: Example 1: Only Required Parameter</p> <pre><code>cd scripts\npython apply_tidal_correction.py -C \"path_to_config\" -T \"path_to_timeseries\" -E 3 -S 2\n</code></pre> <pre><code>python apply_tidal_correction.py -E 3 -S 2 -C \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\fire_island\\ID_ham1_datetime08-03-23__10_58_34\\config_gdf.geojson\" -T \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\fire_island\\ID_ham1_datetime08-03-23__10_58_34\\transect_time_series.csv\"\n</code></pre> <p>Example 2: All Available Parameters</p> <pre><code>cd scripts\npython apply_tidal_correction.py -C \"path_to_config\" -T \"path_to_timeseries\" -E 3 -S 2 -P \"predictions.csv\" -O \"corrected.csv\" -R \"regions.geojson\" -M \"model_directory\"\n</code></pre> <pre><code>cd scripts\npython apply_tidal_correction.py -E 3 -S 2 -C \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\fire_island\\ID_ham1_datetime08-03-23__10_58_34\\config_gdf.geojson\" -T \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\fire_island\\ID_ham1_datetime08-03-23__10_58_34\\transect_time_series.csv\" -P \"tidal_predictions.csv\" -O \"tidally_corrected_time_series.csv\" -R \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\scripts\\tide_regions_map.geojson\" -M \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\tide_model\"\n</code></pre>"},{"location":"How-to-Tidally-Correct/#results","title":"Results","text":"<p>The results will be located in the scripts directory where the <code>apply_tidal_correction.py</code> script is located.</p> <ul> <li><code>tidal_predictions.csv</code>: Contains the tide predictions for each datetime in the timeseries csv file given by <code>RAW_TIMESERIES_FILE_PATH</code>.</li> <li><code>\"tidally_corrected_time_series.csv\"</code>: Contains the tidally corrected time series data based on the timeseries csv file given by <code>RAW_TIMESERIES_FILE_PATH</code>.</li> </ul>"},{"location":"How-to-Tidally-Correct/#credits","title":"Credits","text":"<p>Thank you DEA-Coastlines for making a guide on how to use pyTMD and pyTMD for making a easy to use script to download the AVISO FES 2014 Model. The <code>model_tides</code> in this code has been modified and the original function was originally written by Robbi Bishop-Taylor for the <code>dea-tools</code> package https://github.com/GeoscienceAustralia/dea-notebooks/blob/develop/Tools/dea_tools/coastal.py#L466-L473</p>"},{"location":"How-to-Use-Flip-Transects/","title":"How to Flip Transects","text":""},{"location":"How-to-Use-Flip-Transects/#available-scripts","title":"Available Scripts:","text":"<p>1.transects_swap_points.py</p> <ul> <li>A script that reads a <code>config_gdf.geojson</code> and swaps the origin &amp; end point for each transect.</li> <li>The new transects (default name : <code>reversed_transects.geojson</code> ) are saved to the scripts directory</li> </ul> <p>2.shorten_transects.py</p> <ul> <li>A script that reads a geojson file containing transects and can shorten or length each transect depending on the parameters used</li> <li>The new transects (default name : <code>shortened_transects.geojson</code> ) are saved to the scripts directory</li> </ul>"},{"location":"How-to-Use-Flip-Transects/#prerequisites-for-running-the-script","title":"Prerequisites for running the script","text":"<p>1. Open Anaconda Prompt</p> <ul> <li>Navigate to the Start menu or application directory and open the Anaconda Prompt.</li> </ul> <p>2. Navigate to the Scripts Directory</p> <ul> <li>Replace path_to_your_directory with the location where the coastseg directory is located on your machine.</li> </ul> <pre><code>cd path_to_your_directory\\coastseg\ncd scripts\n</code></pre>"},{"location":"How-to-Use-Flip-Transects/#run-the-script-transects_swap_pointspy","title":"Run the Script transects_swap_points.py","text":"<ul> <li>This will swap each transect's origin and end point</li> </ul> <pre><code>python script_name.py [options]\n</code></pre> <p>1. Example: Use config_gdf.geojson To run the script named transects_swap_points.py, you can execute:</p> <pre><code>python transects_swap_points.py -i 'C:\\path_to_directory\\CoastSeg\\sessions\\ID_rmh16_datetime08-22-23__12_49_23\\config_gdf.geojson'\n</code></pre> <p>2. Example: Use transects.geojson</p> <pre><code>python transects_swap_points.py -i 'C:\\path_to_directory\\CoastSeg\\transects.geojson'\n</code></pre>"},{"location":"How-to-Use-Flip-Transects/#run-the-script-shorten_transectspy","title":"Run the Script shorten_transects.py","text":"<p>Example 1: Shorten the transects by 500m</p> <ul> <li><code>-s</code> shorten the length of the transect by 500 meters by moving the origin seaward</li> </ul> <pre><code>python shorten_transects.py  -i \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\reversed_transects.geojson\" -s 500\n</code></pre> <p>Example 2: Shorten the transects by 500m from the origin and lengthen by 100m from the seaward point</p> <ul> <li> <p><code>-s</code> shorten the length of the transect by 500 meters by moving the origin towards the end point</p> </li> <li> <p><code>-l</code> lengthen the length of the transect by 100 meters by moving the end point more seaward</p> </li> </ul> <pre><code>python shorten_transects.py -i \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\reversed_transects.geojson\" -s  500 -l 100\n</code></pre> <p>Example 3: Shorten the transects by 500m from the origin and lengthen by 100m from the seaward point and save to shortened_transects2.geojson</p> <ul> <li> <p><code>-s</code> shorten the length of the transect by 500 meters by moving the origin towards the end point</p> </li> <li> <p><code>-l</code> lengthen the length of the transect by 100 meters by moving the end point more seaward</p> </li> <li> <p><code>-o</code> save the new transects to file \"shortened_transects2.geojson\"</p> </li> </ul> <pre><code>python shorten_transects.py -i \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\reversed_transects.geojson\" -s  500 -l 100 -o \"shortened_transects2.geojson\"\n</code></pre>"},{"location":"How-to-Use-Flip-Transects/#getting-help","title":"Getting Help","text":"<p>For most scripts, you can get a description of the available options and how to use them by using the -h or --help flag:</p> <pre><code>python script_name.py -h\n</code></pre> <p>Or:</p> <pre><code>python script_name.py --help\n</code></pre> <p>You can also open the script in any text editor or IDE like Notepad++, VSCode, or similar to view the documentation.</p>"},{"location":"How-to-Use-Scripts/","title":"How to Run a Script Using Anaconda Prompt","text":"<p>Running Python scripts using the Anaconda Prompt can be an efficient way to execute your scripts, especially when using libraries that are available in your Anaconda environment. Here's a step-by-step guide to help you run Python scripts using the Anaconda Prompt:</p>"},{"location":"How-to-Use-Scripts/#prerequisites","title":"Prerequisites","text":"<ul> <li>Make sure you have Anaconda or Miniconda installed on your machine.</li> </ul>"},{"location":"How-to-Use-Scripts/#list-of-available-scripts","title":"List of Available Scripts:","text":"<p>1.transects_swap_points.py</p> <ul> <li>A script that reads a <code>config_gdf.geojson</code> and swaps the origin &amp; end point for each transect.</li> <li>The new transects (default name : <code>reversed_transects.geojson</code> ) are saved to the scripts directory</li> </ul> <p>2.shorten_transects.py</p> <ul> <li>A script that reads a geojson file containing transects and can shorten or length each transect depending on the parameters used</li> <li>The new transects (default name : <code>shortened_transects.geojson</code> ) are saved to the scripts directory</li> </ul> <p>3.get_transects_points.py</p> <ul> <li>A script that reads a <code>config_gdf.geojson</code> and creates two geojson files <code>origin_points.geojson</code> containing the origin point &amp; <code>end_points.geojson</code> for each transect.</li> <li>Both of these geojson files are saved to the scripts directory</li> </ul> <p>4.georeference_jpgs.py</p> <ul> <li>A script that takes a list of ROI directories and creates georeferenced jpegs for the \"RGB\", \"NIR\", \"SWIR\", \"MNDWI\", \"NDWI\" subdirectories</li> <li>See a guide on how to use it</li> </ul> <p>5.preview_images_for_dates.py</p> <ul> <li>This script prints the available satellite imagery for ROIs given a list of date ranges. It also saves the results to a file named <code>results.json</code></li> <li>See a guide on how to use it</li> </ul>"},{"location":"How-to-Use-Scripts/#steps","title":"Steps","text":""},{"location":"How-to-Use-Scripts/#1-open-anaconda-prompt","title":"1. Open Anaconda Prompt","text":"<ul> <li>Navigate to the Start menu or application directory and open the Anaconda Prompt.</li> </ul>"},{"location":"How-to-Use-Scripts/#2-navigate-to-the-scripts-directory","title":"2. Navigate to the Scripts Directory","text":"<pre><code>cd path_to_your_directory\\coastseg\ncd scripts\n</code></pre> <p>Replace path_to_your_directory with the location where the coastseg directory is located on your machine.</p>"},{"location":"How-to-Use-Scripts/#3-running-the-script","title":"3. Running the Script","text":"<pre><code>python script_name.py [options]\n</code></pre> <p>Example: To run the script named transects_swap_points.py, you can execute:</p> <pre><code>python transects_swap_points.py -i 'C:\\path_to_directory\\CoastSeg\\sessions\\ID_rmh16_datetime08-22-23__12_49_23\\config_gdf.geojson'\n</code></pre>"},{"location":"How-to-Use-Scripts/#4-getting-help","title":"4. Getting Help","text":"<p>For most scripts, you can get a description of the available options and how to use them by using the -h or --help flag:</p> <pre><code>python script_name.py -h\n</code></pre> <p>Or:</p> <pre><code>python script_name.py --help\n</code></pre>"},{"location":"How-to-Use-Scripts/#5-viewing-script-documentation","title":"5. Viewing Script Documentation","text":"<p>Most well-maintained scripts include a header comment or a docstring at the beginning of the file that provides a brief overview of the script's purpose, usage, and available options. You can open the script in any text editor or IDE like Notepad++, VSCode, or similar to view this documentation.</p>"},{"location":"How-to-Use-Scripts/#guide-for-script-preview_images_for_datespy","title":"Guide for Script preview_images_for_dates.py","text":""},{"location":"How-to-Use-Scripts/#how-to-use","title":"How to Use","text":"<ol> <li>Make sure you performed steps 1 and steps 2</li> <li>Run the script from the command line in an activated coastseg environment by providing the locations of the ROI geojson file and the list of dates as arguments:</li> </ol> <pre><code>python preview_images_for_dates.py \"path/to/your/regions.geojson\" \"2002-01-01,2023-01-15\" \"1984-02-01,1995-02-15\" \"2023-03-01,2023-03-15\"\n</code></pre>"},{"location":"How-to-Use-Scripts/#example","title":"Example","text":"<pre><code>python preview_images_for_dates.py \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\rois.geojson\" \"2002-01-01,2023-01-15\" \"1984-02-01,1995-02-15\" \"2023-03-01,2023-03-15\"\n</code></pre>"},{"location":"How-to-Use-Scripts/#guide-for-script-georeference_jpgspy","title":"Guide for Script georeference_jpgs.py","text":""},{"location":"How-to-Use-Scripts/#overview","title":"Overview","text":"<p>This script georeferences JPEG images using the georeferencing information available in corresponding TIFF images. Georeferencing provides spatial location information to images, allowing them to be placed at a specific location on the Earth's surface.</p>"},{"location":"How-to-Use-Scripts/#how-to-use_1","title":"How to Use","text":"<ol> <li>Make sure you performed steps 1 and steps 2</li> <li>Run the script from the command line in an activated coastseg environment by providing the locations of the ROI directories as arguments:</li> </ol> <pre><code>python georeference_jpegs.py \"C:\\development\\doodleverse\\CoastSeg\\data\\ID_quj9_datetime09-28-23__05_12_40\" \"C:\\development\\doodleverse\\CoastSeg\\data\\ID_tyg8_datetime09-29-23__05_18_40\"\n</code></pre>"},{"location":"How-to-Use-Scripts/#output","title":"Output","text":"<p>For each specified ROI directory, the script will:</p> <ol> <li>Detect JPEG images in the predefined subdirectories \"RGB\", \"NIR\", \"SWIR\", \"MNDWI\", \"NDWI\".</li> <li>Find the corresponding TIFFs with georeferencing info.</li> <li>Apply the georeferencing data from the TIFFs to the JPEGs.</li> <li> <p>Save the georeferenced JPEGs in a subdirectory named georeferenced within each subdirectory.</p> </li> <li> <p>For example, if your RGB directory contains JPEGs and its path is:      <code>path_to_roi_dir1/jpg_files/preprocessed/RGB/</code></p> </li> <li>The georeferenced JPEGs will be saved in: <code>path_to_roi_dir1/jpg_files/preprocessed/RGB/georeferenced/</code></li> </ol>"},{"location":"How-to-Use-Scripts/#what-are-georeferenced-jpegs","title":"What are Georeferenced JPEGs?","text":"<p>Georeferenced JPEGs are standard JPEG images with associated spatial data. This spatial data allows the JPEG to be mapped to a specific location on Earth. The georeferencing information usually includes details about the image's projection, coordinates, and resolution. This is crucial for various applications in geographic information systems (GIS), remote sensing, and cartography, enabling the combination of the image with other spatial datasets in a meaningful way.</p>"},{"location":"basic-install-guide/","title":"Basic Installation Guide","text":""},{"location":"basic-install-guide/#installation-instructions","title":"Installation Instructions","text":"<p>We recommend that you use Windows 10, Windows 11, or Ubuntu Linux. Mac users, please see Mac install guide</p> <p>In order to use Coastseg you need to install Python packages in an environment. We recommend you use Miniforge to install the python packages in an environment for Coastseg.</p> <p>After you install Anaconda/miniforge on your PC (see our How to Install Miniforge), open the Anaconda Prompt/Miniforge Prompt in Windows or Terminal in Mac and Linux. Then use the <code>cd</code> command (change directory) to go the folder where you have downloaded the Coastseg repository.</p> <p>We highly recommend you install CoastSeg using <code>conda</code> following the instructions in Install from conda-forge.</p>"},{"location":"basic-install-guide/#step-1-install-coastseg-from-github","title":"Step 1: Install CoastSeg from Github","text":"<ol> <li>Make sure you have git installed and if not please download it here<ul> <li>This install <code>git</code> as well as <code>git bash</code> on your computer</li> </ul> </li> <li> <p>Open a terminal (or if you are on windows open <code>git bash</code>) and run the command</p> <pre><code>git --version\n</code></pre> <ul> <li>It should return something like this if you have it git installed</li> </ul> <pre><code>git --version\ngit version 2.47.0.windows.1\n</code></pre> </li> <li> <p>Open a terminal that has git installed, then use the <code>cd</code> command ( <code>c</code>hange <code>d</code>irectory) to switch the location you want to install CoastSeg</p> </li> <li>Then use the <code>git clone https://github.com/SatelliteShorelines/CoastSeg.git --depth 1</code> to install the code from github</li> <li>Once the git clone command finishes use the <code>cd</code> command ( <code>c</code>hange <code>d</code>irectory) to switch the CoastSeg directory containing the code you installed.</li> </ol> <pre><code> cd path/to/your/directory \n git clone https://github.com/SatelliteShorelines/CoastSeg.git --depth 1\n cd CoastSeg\n</code></pre>"},{"location":"basic-install-guide/#method-1-install-from-conda-forge-recommended","title":"Method #1: Install from conda-forge (Recommended)","text":"<p>0. Install MiniForge/Anaconda</p> <p>To get started, you'll need to install  MiniForge, which is a free and open-source distribution of Python and R that comes with essential packages and tools for scientific computing and data science.</p> <p>Follow our guide here: How to Install Miniforge</p> <p>Note: CoastSeg will work in Anaconda, however since not all users can use Anaconda due to the EULA we provide only provide installation instructions for Miniforge.</p> <p>1.Create an Conda Environment and Activate it</p> <ul> <li>This command creates an anaconda environment named <code>coastseg</code> and installs <code>python 3.10</code> in it.</li> </ul> <pre><code>conda create --name coastseg python=3.10 -y\nconda activate coastseg\n</code></pre> <p></p> <p>2.Install coastseg</p> <pre><code>conda install -c conda-forge coastseg\n</code></pre> <p></p> <p>3.(Optional) Install Optional Dependencies</p> <ul> <li>Only install these dependencies if you plan to use CoastSeg's Zoo workflow notebook.</li> <li> <p>Warning installing tensorflow will not work correctly on Mac see for more details Mac install guide</p> </li> <li> <p>Note: As of Jan 2,2025 the commands below are only known to work on Windows, not Linux or Apple.</p> </li> </ul> <pre><code>pip install tensorflow==2.12\npip install transformers\n</code></pre>"},{"location":"basic-install-guide/#method-2-install-from-pypi","title":"Method #2: Install from Pypi","text":"<p>1.Create an miniconda/Anaconda environment</p> <ul> <li>This command creates an anaconda environment named <code>coastseg</code> and installs <code>python 3.10</code> in it.   <pre><code>conda create --name coastseg python=3.10 -y\n</code></pre></li> </ul> <p>2.Activate your conda environment</p> <pre><code>conda activate coastseg\n</code></pre> <ul> <li>If you have successfully activated coastseg you should see that your terminal's command line prompt should now start with <code>(coastseg)</code>.</li> </ul> <p></p> <p>3.Install the CoastSeg from PyPi</p> <pre><code>pip install coastseg\n</code></pre> <p>4.Install GDAL from conda-forge</p> <ul> <li>CoastSeg requires <code>gdal</code> to function properly and requires it to be installed from <code>conda-forge</code> due to how it is configured in the conda environment.</li> <li>Make sure to install <code>gdal</code> from the <code>conda-forge</code> channel to ensure you get the latest version and to avoid dependency conflicts.</li> </ul> <pre><code>conda install -c conda-forge  gdal -y\n</code></pre> <p>5.(Optional) Install Optional Dependencies for the Zoo Workflow</p> <ul> <li>Only install these dependencies if you plan to use CoastSeg's Zoo workflow notebook.</li> <li> <p>Warning installing tensorflow will not work correctly on Mac see for more details Mac install guide</p> </li> <li> <p>Note: As of Jan 2,2025 the commands below are only known to work on Windows, not Linux or Apple.</p> </li> </ul> <pre><code>pip install tensorflow==2.12\npip install transformers\n</code></pre> <ul> <li>If you get any errors about numpy try running <code>pip install numpy&lt;2</code></li> </ul>"},{"location":"basic-install-guide/#having-installation-errors","title":"Having Installation Errors?","text":"<p>Use the command <code>conda clean --all</code> to clean old packages from your anaconda base environment. Ensure you are not in your coastseg environment or any other environment by running <code>conda deactivate</code>, to deactivate any environment you're in before running <code>conda clean --all</code>. It is recommended that you have Anaconda prompt (terminal for Mac and Linux) open as an administrator before you attempt to install <code>coastseg</code> again.</p>"},{"location":"case_study_1/","title":"Case Study 1 An Easy Location in Santa Cruz","text":"<p>For this case study we will select an easy site located in Santa Cruz, California. This site has a simple shoreline, not much cloud cover, and lots of imagery available making it a great test site</p>"},{"location":"case_study_1/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Before you begin make sure you have a GEE account if not follow the guide in How to Authenticate with Google Earth Engine(GEE)</p> </li> <li> <p>Have installed CoastSeg by following the Installation Guide</p> </li> </ol>"},{"location":"case_study_1/#setup","title":"SetUp","text":"<p>1.Activate the coastseg conda environment</p> <pre><code>conda activate coastseg\n</code></pre> <ul> <li>If you have successfully activated coastseg you should see that your terminal's command line prompt should now start with <code>(coastseg)</code>.</li> </ul> <p></p> <p>2.Download CoastSeg from GitHub</p> <ul> <li>Only do this step if you haven't already cloned CoastSeg to your computer</li> </ul> <pre><code>git clone --depth 1 https://github.com/SatelliteShorelines/CoastSeg.git\n</code></pre> <p>3.Change to the CoastSeg Directory</p> <ul> <li>Open a command prompt like anaconda prompt and go the location you installed CoastSeg</li> </ul> <pre><code>cd coastseg\n</code></pre>"},{"location":"case_study_1/#launch-the-notebook","title":"Launch the Notebook","text":""},{"location":"case_study_1/#1launch-jupyter-lab","title":"1.Launch Jupyter Lab","text":"<ul> <li>Run this command in the coastseg directory to launch the notebook <code>SDS_coastsat_classifier</code></li> </ul> <pre><code>conda activate coastseg\njupyter lab SDS_coastsat_classifier.ipynb\n</code></pre>"},{"location":"case_study_1/#2authenticate-with-google-earth-engine","title":"2.Authenticate with Google Earth Engine","text":"<ul> <li>Run the cell located under 'Authenticate with Google Earth Engine (GEE)'</li> </ul>"},{"location":"case_study_1/#3draw-an-bounding-box","title":"3.Draw an Bounding Box","text":"<ul> <li> <p>Draw a bounding box along the coast in this box is where ROIs will be created</p> </li> <li> <p>ROIs can only be generated along a shoreline</p> </li> <li> <p>If no shoreline is found then an error message will appear telling you no ROIs can be created. If this happens create your own reference shoreline following the guide here How to Create Reference Shoreline</p> </li> </ul> <p></p>"},{"location":"case_study_1/#4load-available-shorelines","title":"4.Load Available Shorelines","text":"<ul> <li>Click load shoreline to load the one of CoastSeg's default reference shorelines within the bounding box region</li> </ul>"},{"location":"case_study_1/#5load-transects","title":"5.Load Transects","text":"<ul> <li> <p>Make sure there are transects inside the ROI you have selected otherwise you won't be able to extract shorelines</p> </li> <li> <p>If there isn't a reference shoreline or any transects available for your site check out the guide on how to upload your own here</p> </li> </ul> <p></p>"},{"location":"case_study_1/#6modify-the-settings","title":"6.Modify the Settings","text":"<ul> <li> <p>Change the satellites to L8 and L9</p> </li> <li> <p>Change the dates to 12/01/2023 - 03/01/2024</p> </li> <li> <p>Change the max bad pixel percentage to 66.0%   -- This is the maximum percentage of pixels that can be covered in either cloud or no data pixels if a downloaded image exceeds this limit it will be deleted</p> </li> <li> <p>Change the cloud threshold to 60%   -- This is the maximum percentage of pixels that can be covered in cloud if a downloaded image exceeds this limit it will be deleted</p> </li> <li> <p>Change the size of the reference shoreline buffer to 327 meters</p> </li> </ul> <p>-- In the image below you can see the reference shoreline buffer in purple for this location. The reference shoreline buffer is the region in which a shoreline can be extracted. If its too small then the shoreline might not be found and if its too big then clouds in the reference shoreline buffer might get misidentified as shoreline.</p> <p></p> <ul> <li>Click <code>Save Settings</code></li> </ul> <p></p>"},{"location":"case_study_1/#7name-the-session","title":"7.Name the Session","text":"<ul> <li> <p>Let's call this 'case_study_1'</p> </li> <li> <p>This is the name of the folder that will be saved in <code>CoastSeg/sessions</code></p> </li> </ul> <p></p>"},{"location":"case_study_1/#8preview-the-available-imagery","title":"8.Preview the available Imagery","text":"<ul> <li> <p>Preview the amount of available imagery for the selected ROI between the dates</p> </li> <li> <p>In this example ROI 'cwm3' has 18 images available from LandSat 8 and 16 images available from LandSat 9 for 12/01/2023 - 03/01/2024</p> </li> </ul> <p></p>"},{"location":"case_study_1/#9download-the-roi","title":"9.Download the ROI","text":"<ul> <li> <p>Click the ROI you want to download on the map ( they will turn blue when selected)</p> </li> <li> <p>Because we set the cloud threshold to 60% and the percent of bad pixels to 66% you can see that several downloads were skipped because they exceeded the limits</p> </li> <li> <p>When the download finishes CoastSeg will print the location where the downloads were saved in this case its 'CoastSeg\\data\\ID_tto3_datetime04-22-24__03_47_52'</p> </li> </ul> <p></p>"},{"location":"case_study_1/#10sort-the-downloaded-imagery","title":"10.Sort the Downloaded Imagery","text":"<ul> <li> <p>Open Coastseg/data and open the folder containing the ROI ID, in my case thats 'tto3', so I opened 'CoastSeg\\data\\ID_tto3_datetime04-22-24__03_47_52'</p> </li> <li> <p>You can see the ROI ID in the hover menu located to the top right of the map</p> </li> </ul> <p></p> <ul> <li>Sort any bad images into the 'bad folder'</li> </ul> <p></p>"},{"location":"case_study_1/#11extract-shorelines","title":"11.Extract Shorelines","text":"<ul> <li> <p>Extracting shorelines works by finding the land water interface in the image and drawing a line along it</p> </li> <li> <p>A time series of shoreline position along each transect is generated as well</p> </li> </ul> <p></p>"},{"location":"case_study_1/#12-examine-detection-images-for-extracted-shorelines","title":"12. Examine Detection Images for Extracted Shorelines","text":"<ul> <li> <p>The detection images for the extracted shorelines is at 'CoastSeg\\sessions\\case_study_1\\ID_cwm3_datetime04-22-24__02_57_16\\jpg_files\\detection'</p> </li> <li> <p>In these images you can see how well the shoreline were extracted depending on cloud cover, the size of the reference shoreline buffer and the rest of the extract shoreline settings</p> </li> <li> <p>There are a few images with some bad shorelines. Lets remove those in step 13</p> </li> </ul> <p></p>"},{"location":"case_study_1/#13-remove-outlierbad-extracted-shorelines","title":"13. Remove Outlier/Bad Extracted Shorelines","text":"<ul> <li> <p>Use the Load Extracted Shoreline feature to view all the extracted shorelines on the map</p> </li> <li> <p>Find any bad shorelines and click the trash icon to put that shoreline in the trash</p> </li> <li> <p>Once you've put all the bad shorelines in the trash click the empty trash button and this will delete all those shorelines from all the files in the session directory.</p> </li> </ul> <p></p>"},{"location":"case_study_1/#14-open-the-extracted-shoreline-session-outputs-in-qgis","title":"14. Open the Extracted Shoreline Session Outputs in QGIS","text":"<p>Config_gdf.geojson</p> <ul> <li>This screenshot show the contents of the config_gdf.geojson file in QGIS, you can see the ROI, the transects and the reference shoreline on the map</li> </ul> <p></p> <p>extracted_shorelines_points.geojson &amp; extracted_shorelines_lines.geojson</p> <ul> <li> <p>This screenshot show the contents of the extracted_shorelines_points.geojson &amp; extracted_shorelines_lines.geojson files in QGIS</p> </li> <li> <p>These files contain the 2D shoreline vectors extracted directly from the satellite imagery. These are NOT the shoreline positions along the transects. The shoreline position along the transect is located in the timeseries files eg. raw_transect_time_series_points.geojson,raw_transect_time_series.csv, raw_transect_time_series_vectors.geojson, raw_transect_time_series_merged.csv</p> </li> </ul> <p></p> <p>raw_transect_time_series_points.geojson &amp; raw_transect_time_series_vectors.geojson</p> <ul> <li>These files contain the shoreline positions along the transects. This is the geojson format of the 'raw_transect_time_series_merged.csv' and 'raw_transect_time_series.csv'</li> </ul> <p></p>"},{"location":"case_study_1/#apply-tidal-correction-to-extracted-shorelines-optional","title":"Apply Tidal Correction to Extracted Shorelines (Optional)","text":""},{"location":"case_study_1/#1download-the-tide-model","title":"1.Download the tide model","text":"<ul> <li> <p>Before tidal correction can be applied the tide model must be downloaded</p> </li> <li> <p>Follow the tutorial: How to Download Tide Model</p> </li> </ul>"},{"location":"case_study_1/#2load-the-session-with-extracted-shorelines","title":"2.Load the Session with Extracted Shorelines","text":"<ul> <li> <p>Re-open the jupyter notebook</p> </li> <li> <p>Under the 'Kernel' menu Click 'restart and clear outputs of all cells'</p> </li> </ul> <p></p> <ul> <li>Click 'Load Session' and load 'case_study_1'</li> </ul> <p></p>"},{"location":"case_study_1/#3click-correct-tides","title":"3.Click Correct Tides","text":"<ul> <li> <p>Click the ROI ID from the dropdown</p> <p>-- You should see some extracted shorelines on the map if you don't then the ROI ID won't appear in the dropdown</p> </li> <li> <p>Enter Beach Slope</p> </li> <li> <p>Enter Beach Elevation relative to Mean Sea Level</p> </li> </ul> <p></p> <p></p>"},{"location":"case_study_1/#4view-the-tidally-corrected-timeseries-in-qgis","title":"4.View the Tidally Corrected TimeSeries in QGIS","text":"<p>4 new files will be generated:</p> <p>1.'tidally_corrected_transect_time_series.csv'</p> <p>2.'tidally_corrected_transect_time_series_merged.csv'</p> <p>3.'tidally_corrected_transect_time_series_points.geojson'</p> <p>4.'tidally_corrected_transect_time_series_vectors.geojson'</p> <ul> <li>This screenshot show the difference between the tidally_corrected_transect_time_series_vectors and raw_transect_time_series_vectors as you can see applying tidal correction shifts the raw shoreline position along the transect to account for the tide position</li> </ul> <p></p>"},{"location":"case_study_2/","title":"Case Study 2 A Difficult Location in Alaska","text":"<p>For this case study we will select an difficult site located outside of Unalakleet Alaska. This site has a simple shoreline,lots of cloud cover, and not imagery available due to ice and clouds covering the region most of the year making it a difficult test site.</p> <p></p>"},{"location":"case_study_2/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Before you begin make sure you have a GEE account if not follow the guide in How to Authenticate with Google Earth Engine(GEE)</p> </li> <li> <p>Have installed CoastSeg by following the Installation Guide</p> </li> </ol>"},{"location":"case_study_2/#setup","title":"SetUp","text":"<p>1.Activate the coastseg conda environment</p> <pre><code>conda activate coastseg\n</code></pre> <ul> <li>If you have successfully activated coastseg you should see that your terminal's command line prompt should now start with <code>(coastseg)</code>.</li> </ul> <p></p> <p>2.Download CoastSeg from GitHub</p> <ul> <li>Only do this step if you haven't already cloned CoastSeg to your computer</li> </ul> <pre><code>git clone --depth 1 https://github.com/SatelliteShorelines/CoastSeg.git\n</code></pre> <p>3.Change to the CoastSeg Directory</p> <ul> <li>Open a command prompt like anaconda prompt and go the location you installed CoastSeg</li> </ul> <pre><code>cd coastseg\n</code></pre>"},{"location":"case_study_2/#launch-the-notebook","title":"Launch the Notebook","text":""},{"location":"case_study_2/#1launch-jupyter-lab","title":"1.Launch Jupyter Lab","text":"<ul> <li>Run this command in the coastseg directory to launch the notebook <code>SDS_coastsat_classifier</code></li> </ul> <pre><code>conda activate coastseg\njupyter lab SDS_coastsat_classifier.ipynb\n</code></pre>"},{"location":"case_study_2/#2authenticate-with-google-earth-engine","title":"2.Authenticate with Google Earth Engine","text":"<ul> <li>Run the cell located under 'Authenticate with Google Earth Engine (GEE)'</li> </ul>"},{"location":"case_study_2/#3draw-an-bounding-box","title":"3.Draw an Bounding Box","text":"<ul> <li> <p>Draw a bounding box along the coast in this box is where ROIs will be created</p> </li> <li> <p>ROIs can only be generated along a shoreline</p> </li> <li> <p>If no shoreline is found then an error message will appear telling you no ROIs can be created. If this happens create your own reference shoreline following the guide here How to Create Reference Shoreline</p> </li> </ul> <p></p>"},{"location":"case_study_2/#4create-and-load-a-reference-shoreline","title":"4.Create and Load a Reference Shoreline","text":"<ul> <li> <p>This site does not have a shoreline available so we will have to make our own. Follow the tutorial at How to Create Reference Shoreline for a guide on how to create your own reference shoreline</p> </li> <li> <p>Here is a guide on how to upload your own here</p> </li> <li> <p>I used geojson.io to create my reference shoreline</p> </li> </ul>"},{"location":"case_study_2/#5create-and-load-transects","title":"5.Create and Load Transects","text":"<ul> <li> <p>This site does not have any transects available so we will have to make our own. Follow the tutorial at How to Create Reference Shoreline for a guide on how to create your own transects</p> </li> <li> <p>Here is a guide on how to upload your own here transects</p> </li> <li> <p>I used geojson.io to create my transects.This technique is in the tutorial How to Create Reference Shoreline</p> </li> </ul> <p></p>"},{"location":"case_study_2/#6modify-the-settings","title":"6.Modify the Settings","text":"<ul> <li> <p>Change the satellites to L8 and L9</p> </li> <li> <p>Change the dates to 04/01/2023 - 011/01/2024</p> </li> <li> <p>Change the months to not select November since our site will be covered in sea ice</p> </li> <li> <p>The reason we choose these dates is because its less likely the ocean will be covered in ice. Shoreline extraction does not work properly with sea ice present</p> </li> <li> <p>Change the max bad pixel percentage to 50.0%   -- This is the maximum percentage of pixels that can be covered in either cloud or no data pixels if a downloaded image exceeds this limit it will be deleted</p> </li> <li> <p>Change the cloud threshold to 50%   -- This is the maximum percentage of pixels that can be covered in cloud if a downloaded image exceeds this limit it will be deleted</p> </li> <li> <p>Change the size of the reference shoreline buffer to 290 meters</p> </li> </ul> <p>-- In the image below you can see the reference shoreline buffer in purple for this location. The reference shoreline buffer is the region in which a shoreline can be extracted. If its too small then the shoreline might not be found and if its too big then clouds in the reference shoreline buffer might get misidentified as shoreline.</p> <p></p> <ul> <li>Turn off the Apply Cloud Mask</li> </ul> <p>-- The cloud mask being off does not impact whether images are filtered out during the download process it only controls if the clouds are blotted off the images.</p> <p>-- The reason for this is that Alaska is very cloudy and often light clouds will be masked out close to the shoreline causing gaps in the shoreline due to the cloud distance threshold. If we don't mask out the clouds then we get a few more usable images</p> <p>-- In this example you can see the clouds where masked out in this image but these clouds were onshore so they would not have interfered with the cloud masking. However, the cloud masking was turned on and the 'cloud distance' parameter which removes any shorelines within 'cloud distance' to a cloud causes there to be gaps in the shoreline. You could lower cloud distance to something like 10-20m to fix this or turn off cloud masking</p> <p></p> <ul> <li>Click <code>Save Settings</code></li> </ul> <p></p>"},{"location":"case_study_2/#7name-the-session","title":"7.Name the Session","text":"<ul> <li> <p>Let's call this 'case_study_2'</p> </li> <li> <p>This is the name of the folder that will be saved in <code>CoastSeg/sessions</code></p> </li> </ul> <p></p>"},{"location":"case_study_2/#8preview-the-available-imagery","title":"8.Preview the available Imagery","text":"<ul> <li> <p>Preview the amount of available imagery for the selected ROI between the dates</p> </li> <li> <p>In this example ROI 'cwm3' has 18 images available from LandSat 8 and 16 images available from LandSat 9 for 12/01/2023 - 03/01/2024</p> </li> </ul> <p></p>"},{"location":"case_study_2/#9add-a-shoreline-extraction-area","title":"9.Add a Shoreline Extraction Area","text":"<ul> <li>Our study site has a small pond located along the shoreline that will get picked up in the reference shoreline buffer and the pond's water land interface will get misidentified as a shoreline</li> </ul> <p>To get around this issue we have 2 options:</p> <p>1.Shrink the reference shoreline buffer</p> <p>-- This would probably be the best solution for this specific, but if you have a dynamic coastline this may not be the best solution for you</p> <p>2.Add a shoreline extraction area</p> <p>Example of Bad Shoreline</p> <ul> <li>In this image below you can see the pond's water land interface gets misidentified as part of the shoreline</li> </ul> <p></p> <p>How to Draw a Shoreline Extraction Area</p> <ul> <li>Draw a shoreline extraction area that does not include the pond</li> </ul> <p></p> <p>Example of Good Shoreline from New Shoreline Extraction Area</p> <ul> <li>Here is what the shoreline detection image will look like with this new shoreline extraction area</li> </ul> <p></p>"},{"location":"case_study_2/#10download-the-roi","title":"10.Download the ROI","text":"<ul> <li> <p>Click the ROI you want to download on the map ( they will turn blue when selected)</p> </li> <li> <p>Because we set the cloud threshold to 60% and the percent of bad pixels to 66% you can see that several downloads were skipped because they exceeded the limits</p> </li> <li> <p>When the download finishes CoastSeg will print the location where the downloads were saved in this case its 'pgj2''CoastSeg\\data\\ID_pgj2_datetime04-22-24__09_38_49'</p> </li> </ul> <p></p>"},{"location":"case_study_2/#11sort-the-downloaded-imagery","title":"11.Sort the Downloaded Imagery","text":"<ul> <li> <p>Open Coastseg/data and open the folder containing the ROI ID, in my case thats 'pgj2', so I opened 'CoastSeg\\data\\ID_pgj2_datetime04-22-24__09_38_49'</p> </li> <li> <p>You can see the ROI ID in the hover menu located to the top right of the map</p> </li> <li> <p>Read this quick guide on how to filter bad imagery in CoastSeg.</p> </li> </ul> <p>Sort out Images with Sea Ice</p> <ul> <li> <p>Sort any bad images into the 'bad folder'</p> </li> <li> <p>Sort out images with snow, sea ice, or cloud cover</p> </li> </ul> Images Sample Image Filter out images with sea ice and snow Filter out images with clouds <p>Why is Sea Ice Bad for Extracting Shorelines?</p> <ul> <li>Sea Ice forms offshore and changes where the land water interface is meaning that the reference shoreline no longer covers the region where the shoreline can be extracted</li> </ul> <p></p> <p>Why is Snow Bad for Extracting Shorelines?</p> <ul> <li> <p>Snow will get misclassified as either whitewater or water sometimes making shoreline extraction variable.</p> </li> <li> <p>In this example the snow was mis classified as whitewater</p> </li> </ul> <p></p> <p>Why are Clouds Bad for Extracting Shorelines?</p> <ul> <li> <p>Clouds get misclassified as shorelines as you can see in the example below</p> </li> <li> <p>Clouds getting misclassified as shorelines is the reason behind why we typically mask out clouds</p> </li> </ul> Bad Shoreline Detection Due to Clouds"},{"location":"case_study_2/#12extract-shorelines","title":"12.Extract Shorelines","text":"<ul> <li> <p>Extracting shorelines works by finding the land water interface in the image and drawing a line along it</p> </li> <li> <p>A time series of shoreline position along each transect is generated as well</p> </li> </ul> <p></p> <p></p>"},{"location":"case_study_2/#13-examine-detection-images-for-extracted-shorelines","title":"13. Examine Detection Images for Extracted Shorelines","text":"<ul> <li> <p>The detection images for the extracted shorelines is at 'CoastSeg\\sessions\\case_study_2\\</p> </li> <li> <p>In these images you can see how well the shoreline were extracted depending on cloud cover, the size of the reference shoreline buffer and the rest of the extract shoreline settings</p> </li> <li> <p>There are a few images with some bad shorelines. Lets remove those in step 13</p> </li> </ul> <p></p>"},{"location":"case_study_2/#14-remove-outlierbad-extracted-shorelines","title":"14. Remove Outlier/Bad Extracted Shorelines","text":"<ul> <li> <p>Use the Load Extracted Shoreline feature to view all the extracted shorelines on the map</p> </li> <li> <p>Find any bad shorelines and click the trash icon to put that shoreline in the trash</p> </li> <li> <p>Once you've put all the bad shorelines in the trash click the empty trash button and this will delete all those shorelines from all the files in the session directory.</p> </li> </ul> <p></p>"},{"location":"case_study_2/#15-adjust-the-settings-to-extract-better-shorelines","title":"15. Adjust the Settings to Extract Better shorelines","text":"<ul> <li> <p>For difficult sites such as Alaska you'll need to create a few sessions with different combinations of settings in order to extract the best shorelines</p> </li> <li> <p>For this example I had to create 4 sessions to find the best combination of settings. For this reason we HIGHLY recommed you create a small session first (1-2 years worth of imagery) and optimize the settings first before running a large session.</p> </li> <li> <p>One trick we recommended is to download your entire dataset first, then adjust the date range to a year when you extract your shorelines. This will cause CoastSeg to only extract shorelines from the date range you set in the settings rather than the entire range of dates you downloaded.</p> </li> </ul>"},{"location":"case_study_2/#16-open-the-extracted-shoreline-session-outputs-in-qgis","title":"16. Open the Extracted Shoreline Session Outputs in QGIS","text":"<p>Config_gdf.geojson</p> <ul> <li>This screenshot show the contents of the config_gdf.geojson file in QGIS, you can see the ROI, the transects and the reference shoreline on the map</li> </ul> <p></p> <p>extracted_shorelines_points.geojson &amp; extracted_shorelines_lines.geojson</p> <ul> <li> <p>This screenshot show the contents of the extracted_shorelines_points.geojson &amp; extracted_shorelines_lines.geojson files in QGIS</p> </li> <li> <p>These files contain the 2D shoreline vectors extracted directly from the satellite imagery. These are NOT the shoreline positions along the transects. The shoreline position along the transect is located in the timeseries files eg. raw_transect_time_series_points.geojson,raw_transect_time_series.csv, raw_transect_time_series_vectors.geojson, raw_transect_time_series_merged.csv</p> </li> </ul> <p>Zoomed Out 2D Extracted Shorelines as Points and Lines</p> <p></p> <p>Zoomed In 2D Extracted Shorelines as Points and Lines</p> <p></p> <p>raw_transect_time_series_points.geojson &amp; raw_transect_time_series_vectors.geojson</p> <ul> <li>These files contain the shoreline positions along the transects. This is the geojson format of the 'raw_transect_time_series_merged.csv' and 'raw_transect_time_series.csv'</li> </ul> <p></p>"},{"location":"case_study_2/#apply-tidal-correction-to-extracted-shorelines-optional","title":"Apply Tidal Correction to Extracted Shorelines (Optional)","text":""},{"location":"case_study_2/#1download-the-tide-model","title":"1.Download the tide model","text":"<ul> <li> <p>Before tidal correction can be applied the tide model must be downloaded</p> </li> <li> <p>Follow the tutorial: How to Download Tide Model</p> </li> </ul>"},{"location":"case_study_2/#2load-the-session-with-extracted-shorelines","title":"2.Load the Session with Extracted Shorelines","text":"<ul> <li> <p>Re-open the jupyter notebook</p> </li> <li> <p>Under the 'Kernel' menu Click 'restart and clear outputs of all cells'</p> </li> </ul> <p></p> <ul> <li>Click 'Load Session' and load 'case_study_2'</li> </ul> <p></p>"},{"location":"case_study_2/#3click-correct-tides","title":"3.Click Correct Tides","text":"<ul> <li> <p>Click the ROI ID from the dropdown</p> <p>-- You should see some extracted shorelines on the map if you don't then the ROI ID won't appear in the dropdown</p> </li> <li> <p>Enter Beach Slope</p> </li> <li> <p>Enter Beach Elevation relative to Mean Sea Level</p> </li> </ul> <p></p> <p>Example</p> <p></p>"},{"location":"case_study_2/#4view-the-tidally-corrected-timeseries-in-qgis","title":"4.View the Tidally Corrected TimeSeries in QGIS","text":"<p>4 new files will be generated:</p> <p>1.'tidally_corrected_transect_time_series.csv'</p> <p>2.'tidally_corrected_transect_time_series_merged.csv'</p> <p>3.'tidally_corrected_transect_time_series_points.geojson'</p> <p>4.'tidally_corrected_transect_time_series_vectors.geojson'</p> <ul> <li>This screenshot show the difference between the tidally_corrected_transect_time_series_vectors and raw_transect_time_series_vectors as you can see applying tidal correction shifts the raw shoreline position along the transect to account for the tide position</li> </ul> <p></p>"},{"location":"config/","title":"Config Files","text":"<p>Config files are used to save the current state of the map and all the data downloaded during a session using CoastSeg. The config file is actually composed of two separate files a <code>.geojson</code> file and <code>.json</code> file. Within each ROI's directory you will find a <code>config.geojson</code> file containing all the ROIs, shorelines, transects, and the bounding box that were loaded on the map at the time the ROI was downloaded or when the <code>Save Config</code> button was pressed.</p> <p>The <code>.geojson</code> file contains a geodataframe with crs <code>espg 4326</code> that contains all the shorelines, transects,selected ROI, and the bounding box(bbox) that were present on the map when the download button was clicked. The <code>.json</code> file contains the settings (eg <code>preprocess settings</code>,<code>postprocess settings</code>, and <code>shoreline extraction settings</code>) and user specified inputs (eg <code>dates</code>, <code>landsat_collection</code>,<code>satellite list</code>) that were used to download the imagery from Google Earth Engine(GEE). Each set of config files are saved in the each ROI's directory.</p>"},{"location":"config/#saving-config-files","title":"Saving Config Files","text":"<p>Config files are automatically saved in the <code>data</code> directory within each ROI directory when <code>Download Imagery</code> is clicked. Config files can be saved at any time when the <code>Save Config</code> button is clicked.</p> <p>ROIs Downloaded If the ROIs selected on the map have been downloaded before and exist in the <code>data</code> directory, then the config files will be stored in within each ROI directory.</p> <p>ROIs Not Downloaded If the ROIs on the map have not been downloaded before then the config files will be saved in the coastseg directory.</p>"},{"location":"config/#steps-to-save-config-files","title":"Steps to Save Config Files","text":"<ol> <li>Click the ROIs on the map you want to save</li> <li>Click the <code>Save Config Files</code> button.</li> </ol>"},{"location":"config/#loading-config-files","title":"Loading Config Files","text":""},{"location":"config/#load-config-files-for-downloaded-rois","title":"Load Config Files For Downloaded ROIs","text":"<p>To load config files for ROIs that have been downloaded before go to the <code>data</code> directory within <code>coastseg</code> then find the directory of the ROIs you want to upload. Inside that directory, for example the <code>ID_3_datetime10-20-22__07_09_07</code> directory, there should be <code>geojson</code> file named <code>config_gdf_id_3.geojson</code>. You should notice the <code>ID_&lt;ROI ID NUMBER&gt;</code> in the directory name and the geojson file match, in this case this is ROI id 3. Upload the <code>config_gdf_id_&lt;roi id number&gt;.geojson</code>. This will load the ROI in that directory and all the other selected ROIs,shorelines, transects, and the bounding box that were on the map when it was saved.</p> <p></p>"},{"location":"config/#steps-to-load-config-file","title":"Steps to Load Config File","text":"<ol> <li>Click <code>Load Config</code></li> <li>Open <code>data</code> directory</li> <li>Open ROI directory ex. ID_3_datetime10-20-22__07_09_07</li> <li>Select <code>config_gdf_id_&lt;roi id number&gt;.geojson</code> ex. config_gdf_id_3.geojson</li> </ol>"},{"location":"config/#load-config-files-for-rois-that-have-not-been-downloaded","title":"Load Config Files For ROIs that Have Not Been Downloaded","text":"<p>To load config files for ROIs that have not been downloaded before first click the <code>Load Config</code> button, open the coastseg directory and select <code>config_gdf.geojson</code>. This will loaded the selected ROIs, shorelines, transects, and bounding box that was saved with the <code>Save Config</code> button.</p> <p>Note: You will not be able to extract shorelines or compute transects until you download the data for these ROIs.</p>"},{"location":"config/#steps","title":"Steps","text":"<ol> <li>Click <code>Load Config</code></li> <li>Open <code>coastseg</code> directory</li> <li>Select <code>config_gdf.geojson</code></li> </ol>"},{"location":"contribute-a-workflow/","title":"Contributing Workflows","text":"<p>To contribute your own workflows to CoastSeg you will need to create your own jupyter notebook, test it and then submit a Pull Request to CoastSeg. The CoastSeg team will examine your pull request, test it, then merge your workflows. Workflows should be self contained and not impact other workflows. That being said contributions to improve other workflows are welcome, but please submit improvements as separate Pull Requests instead of with workflow contributions. Once your workflow is accept you will be responsible for maintaining the workflow and if your workflow is no longer maintained the CoastSeg team may drop support for your workflow.</p> <ol> <li> <p>Create a notebook with the name of your workflow</p> </li> <li> <p>Example: <code>SDS_new_workflow_name.ipynb</code> in CoastSeg</p> </li> <li> <p>Create a new python file in <code>CoastSeg/src/coastseg</code> with the code needed to run your workflow</p> </li> <li> <p>Example: Create <code>new_workflow_name.py</code> which contains all the code for your workflow</p> </li> <li> <p>Submit a Pull Request with your workflow</p> </li> </ol>"},{"location":"contribute-how-edit-website/","title":"How to Edit the Website","text":""},{"location":"contribute-how-edit-website/#how-to-edit-the-markdown-website","title":"How to Edit the Markdown Website","text":"<p>Follow these steps to edit and update the markdown website:</p> <p>Step 1:</p> <p>Switch to the <code>deploy_site</code> branch.</p> <ul> <li>You can do this using the command:   <pre><code>git checkout deploy_site\n</code></pre></li> </ul> <p>Step 2: Activate your <code>coastseg</code> environment and install <code>mkdocs</code>.</p> <p>Note: Make sure you are in the main CoastSeg directory.</p> <ol> <li>Install the required packages:    <pre><code>conda activate coastseg\ncd CoastSeg \npip install mkdocs mkdocs-material\n</code></pre></li> </ol> <p>Step 3: Visualize your changes locally</p> <ol> <li>In the CoastSeg directory, run:    This command generates a local version of the website so you can see your changes.</li> </ol> <p><pre><code>mkdocs serve\n</code></pre> 2. Open the local version of the website by clicking the localhost link at the bottom</p> <ul> <li>Press (ctrl + S ) to save any of your changes and watch the website automatically update</li> </ul> <p></p> <p>Step 4:</p> <p>Open the <code>docs</code> directory.</p> <p>This folder contains all the markdown files that comprise the website.</p> <p>Step 5:</p> <p>Create a new markdown file or edit an existing one.</p> <ul> <li>For editing, simply modify the chosen file.</li> <li>For new files, follow Step 6.</li> </ul> <p>Step 6 (if creating a new file):</p> <p>Edit the <code>mkdocs.yml</code> file to include the new markdown file in the <code>nav</code> section.</p> <ul> <li>Example</li> </ul> <pre><code>nav:\n  - Home: index.md\n  - New Section:\n    - Subpage: new_file.md\n</code></pre> <p>Step 7:</p> <p>Push your changes.</p> <p>Commit and push the changes, triggering a GitHub action that will update the live website.</p>"},{"location":"contribute-release-new-package/","title":"How to Release a New Package","text":"<p>CoastSeg has a github action that publishes a new pypi package if the commit is tagged with the version number of the package to release on pypi. To ensure a consistent and smooth package release process, follow this step-by-step guide. The release procedure centers around tagging the commit properly.</p>"},{"location":"contribute-release-new-package/#release-steps","title":"Release Steps","text":"<ol> <li> <p>Ensure your local branch is up-to-date with the main branch.</p> <pre><code>git pull origin main\n</code></pre> </li> <li> <p>Commit your all changes.</p> <pre><code>git commit -m \"&lt;explain changes\"  \n</code></pre> </li> <li> <p>Modify the <code>pyproject.toml</code> file with the new version number</p> </li> <li> <p>Under the <code>[project]</code> section change the <code>version = \"\"</code> to the new version</p> </li> <li> <p>Example: to release version 1.2.6 I would write <code>version = \"1.2.6\"</code></p> </li> </ol> <pre><code>   [project]\nname = \"coastseg\"\ndynamic = [\"readme\"]\nversion = \"1.2.5\"   # change this line to your new version\nauthors = [\n{ name=\" Sharon Fitzpatrick\", email=\"sharon.fitzpatrick23@gmail.com\" },\n]\n</code></pre> <ol> <li> <p>Commit the modified <code>pyproject.toml</code> file.</p> </li> <li> <p>In this commit only include the changed <code>pyproject.toml</code> file</p> </li> <li> <p>This makes is easy to track different versions</p> <pre><code>git commit -m \"Release v1.0.3\"  # Replace with your version number\n</code></pre> </li> <li> <p>To tag the most recent commit, simply use:</p> </li> <li> <p>See the tagging format guide below to learn how to format the tags</p> </li> <li> <p>The expected format is <code>v&lt;version_number&gt;</code> so for version 1.0.3 it would be <code>v1.0.3</code></p> <pre><code>git tag v1.0.3\n</code></pre> </li> <li> <p>Alternatively, if you need to tag a specific commit (other than the most recent one), first find the commit's hash using:</p> <pre><code>git log --oneline\n</code></pre> <p>This will display a list of recent commits with their shortened hash. Identify the commit you want to tag, then tag it using:</p> <pre><code>git tag v1.0.3 COMMIT_HASH  # Replace with your version number and the appropriate commit hash\n</code></pre> </li> <li> <p>Push the commit to the repository.</p> <ul> <li>This will trigger tests to run automatically in the Actions tab in the CoastSeg repository.</li> </ul> <pre><code>git push origin main\n</code></pre> </li> <li> <p>Push the tag to the repository.</p> <ul> <li>This will trigger an action called \"Publish Package to PyPi\", which will automatically release the package on pypi, then later trigger the conda package to be released.</li> </ul> <pre><code>git push origin v1.0.3  # Replace with your version number\n</code></pre> </li> <li> <p>Release the Conda Package</p> <ul> <li> <p>Visit the CoastSeg conda-forge feedstock</p> </li> <li> <p>The bots at the CoastSeg conda-forge feedstock will scan pypi for the new coastseg release and when it finds a new release it will open a pull request with the new version number</p> </li> <li> <p>Merge the new Pull Request on the conda forge feedstock and the bots will automatically release a new version</p> </li> </ul> </li> </ol> <p></p>"},{"location":"contribute-release-new-package/#tagging-format","title":"Tagging Format","text":"<p>When you're ready to release a new package, push a commit with a tag that matches one of the following formats:</p> <ul> <li> <p>Major, minor, and patch versions: <code>v[0-9]+.[0-9]+.[0-9]+</code></p> </li> <li> <p>Example: <code>v1.0.3</code></p> </li> <li> <p>Alpha versions: <code>v[0-9]+.[0-9]+.[0-9]+a[0-9]+</code></p> </li> <li> <p>Beta versions: <code>v[0-9]+.[0-9]+.[0-9]+b[0-9]+</code></p> </li> <li> <p>Release candidate versions: <code>v[0-9]+.[0-9]+.[0-9]+rc[0-9]+</code></p> </li> <li> <p>Development versions: <code>v[0-9]+.[0-9]+.[0-9]+dev[0-9]+</code></p> </li> <li>Example: <code>v1.2.0dev1</code></li> </ul>"},{"location":"contribute-release-new-package/#good-tag-names","title":"\u2705 Good Tag Names","text":"<ul> <li>v1.0.3</li> <li>v1.2.0dev1</li> </ul>"},{"location":"contribute-release-new-package/#bad-tag-names","title":"\u274c Bad Tag Names","text":"<ul> <li>1.2.0 : Missing the \"v\"</li> </ul>"},{"location":"contribute-transects/","title":"Contributing Transects","text":""},{"location":"contribute-transects/#prerequisites","title":"Prerequisites","text":"<p>1.Make your transects into a geojson file</p> <p>2.Make sure your transects are facing the right direction</p> <ul> <li>Each transect should have its origin on land and its end point on the ocean</li> </ul> <p>3.Make sure each transect has a unique ID in its 'id' field</p> <ul> <li>Each transect should have its own unique ID in the 'id' field</li> <li>If you don't assign an id to each transect then run the cell in <code>add_new_transects_notebook.ipynb</code> to create a unique ID for each transect</li> </ul>"},{"location":"contribute-transects/#adding-the-new-transects","title":"Adding the New Transects","text":"<p>1.Open <code>CoastSeg/notebooks/add_new_transects_notebook.ipynb</code></p> <p>2.Follow the instructions in the notebook to add the geojson file</p> <p>3.Replace the csv in <code>CoastSeg/src/coastseg/bounding_boxes</code> with the new <code>transects_bounding_boxes.csv</code></p> <ul> <li><code>transects_bounding_boxes.csv</code> is generated by <code>CoastSeg/notebooks/add_new_transects_notebook.ipynb</code></li> </ul> <p>4.Open a pull request</p> <ul> <li> <p>State which region of the world the transect are for</p> </li> <li> <p>Provide a screenshot of the transects you are adding</p> </li> </ul>"},{"location":"contributing-run-tests/","title":"How to test all the models in coastseg","text":"<p>This script will automatically test all the models in coastseg. Make sure the models in <code>available_models_dict</code> match the models currently available in coastseg. If they don't match the models currently available in coastseg update the <code>available_models_dict</code> dictionary as well as <code>parent_directory_names</code>.</p> <p>Make sure to replace parameter after -P with path to ROI's RGB directory <code>python test_models.py -P &lt;your path here&gt;\"</code></p> <pre><code>cd &lt;location you installed coastseg&gt;\ncd debug_scripts\npython test_models.py -P &lt;your path here&gt;\"\n</code></pre>"},{"location":"contributing-run-tests/#example","title":"Example","text":"<p><code>python test_models.py -P C:\\development\\doodleverse\\coastseg\\CoastSeg\\data\\ID_12_datetime06-05-23__04_16_45\\jpg_files\\preprocessed\\RGB\"</code></p>"},{"location":"download_settings/","title":"Download Settings Guide","text":""},{"location":"download_settings/#dates","title":"Dates","text":"<ul> <li>Select the start and end date to download imagery between</li> <li>You can change these and click download imagery to download more imagery for same ROI(s)</li> </ul>"},{"location":"download_settings/#months","title":"Months","text":"<ul> <li>To only download imagery for certain months hit the check boxes</li> <li>These months are saved in the 'months_list' to the right as the month number (eg. 1 for January etc.)</li> </ul>"},{"location":"download_settings/#cloud-masking","title":"Cloud Masking","text":"<ul> <li> <p>You can switch off cloud masking so that the images saved in 'Coastseg/data//jpg_files\\preprocessed\\RGB' don't have the cloud mask applied <li> <p>You can turn on/off cloud masks when extracting shoreline too</p> </li> <p>Example of Masked Out Clouds</p> <p></p> <p></p>"},{"location":"download_settings/#cloud-threshold","title":"Cloud Threshold","text":"<ul> <li>This controls the maximum percentage of clouds allowed in the downloaded images</li> </ul>"},{"location":"download_settings/#percentage-bad-pixels","title":"Percentage Bad Pixels","text":"<ul> <li>This controls the maximum percentage of bad pixels (cloud and no data combined) allowed in the downloaded images</li> </ul>"},{"location":"download_settings/#resumable-downloads","title":"Resumable Downloads","text":"<p>To resume a partial download follow the following steps:</p> <p>1.Click Load Session</p> <p>2.Navigate to the 'CoastSeg/data' and load an ROI</p> <p>3.Modify the date range, months list, or percentage of bad pixel settings</p> <p>4.Click save settings</p> <p>5.Click Download Imagery</p> <p></p> <ul> <li> <p>In this screenshot you can see some images were skipped due to the cloud cover exceeded the maxmium percentage of clouds allowed set by the 'cloud thresh' settings</p> </li> <li> <p>In this screenshot you can see that for L8 21 images were available to download but 7 already had been downloaded so only 14 were remaining to download</p> </li> </ul>"},{"location":"edit_reference_shorelines/","title":"How to Edit the Reference Shorelines","text":""},{"location":"edit_reference_shorelines/#how-to-load-shorelines-on-the-map","title":"How to Load Shorelines on the Map","text":"<p>To load shorelines on the map first draw a bounding box along the coastline. Then click the button <code>Load Shoreline</code> to load shorelines within the bounding box. WARNING: Not all coastlines have shoreline vectors available and if no shorelines exist within the bounding box a pop up will indicate that no shorelines were found. If this happens try drawing a bounding box somewhere else.</p> <p></p>"},{"location":"edit_reference_shorelines/#how-to-edit-the-reference-shorelines-on-the-map","title":"How to Edit the Reference Shorelines on the Map","text":"<p>You need to have only one set of reference shorelines, otherwise when coastseg attempts to map your shorelines together it looks like this: </p> <ol> <li>Click all the shorelines you want to delete</li> <li>Under Remove Feature from Map select 'selected shorelines' from the drop-down</li> <li>Click the 'Remove Selected' button</li> </ol> <p></p>"},{"location":"edit_reference_shorelines/#how-to-load-shorelines-from-geojson-files-on-the-map","title":"How to Load Shorelines from Geojson Files on the Map","text":"<p>See this guide on how to create and load your own reference shorelines onto the map :</p>"},{"location":"extract_shoreline_settings/","title":"Extract Shorelines Settings Guide","text":""},{"location":"extract_shoreline_settings/#basic-settings","title":"Basic Settings","text":"<p>1.Apply Cloud Mask</p> <ul> <li> <p>You can switch off cloud masking so that the images saved in 'CoastSeg/session///jpg_files/detection' won't have the clouds masked out <li> <p>Sometimes you need to turn this off because the cloud mask mistakenly identifies white sandy beaches as cloud</p> </li> <p>Example of Masked Out Clouds</p> <p></p> <p>Example of Masked Out Clouds in Extract Shoreline Detection Images</p> <ul> <li> <p>In the screenshot below see the shoreline is being broken up because the setting<code>dist_clouds</code> is removing any shorelines too close to the masked out clouds.</p> </li> <li> <p>Lowering <code>dist_clouds</code> or turning off the cloud mask would fix this.</p> </li> <li> <p>Fair warning that clouds commonly get mistaken as shorelines so generally they should be masked out</p> </li> </ul> Cloud Mask On Cloud Mask Off <p>Example of Apply Cloud Mask in Settings</p> <p></p> <p>2.Dates</p> <ul> <li>Select the start and end date to extract shorelines from</li> </ul> <p></p> <p>3. Cloud Threshold <code>cloud_thresh</code></p> <ul> <li> <p>This controls the maximum percentage of clouds allowed in the images that shorelines will be extracted from</p> </li> <li> <p>If an image's cloud cover exceeds this threshold a shoreline will NOT be extracted from this image</p> </li> <li> <p>Fair warning that clouds commonly get mistaken as shorelines so generally they should be masked out</p> </li> </ul> <p></p> <p>4.Reference Shoreline Buffer: <code>max_dist_ref</code></p> <p>The <code>max_dist_ref</code> parameter defines a buffer (in meters) around the reference shoreline, limiting the extraction of shorelines to this region. Shorelines detected outside this buffer are automatically excluded.</p>"},{"location":"extract_shoreline_settings/#examples-of-different-max_dist_ref-settings","title":"Examples of Different <code>max_dist_ref</code> Settings","text":"\u274c Bad <code>max_dist_ref</code> \u2705 Good <code>max_dist_ref</code> <code>max_dist_ref</code>: 100m <code>max_dist_ref</code>:309m Recommend increasing buffer to 150m Buffer captures entire shoreline no change needed <p>5.Minimum Shoreline Length (min_length_sl) Defines the shortest length (in meters) of detected shoreline segments. Adjust this setting to filter out noise or small, irrelevant shoreline fragments.</p> <p>6.Distance from Clouds (dist_clouds) Specifies the minimum distance (in meters) from cloud-covered areas to avoid false shoreline detections due to cloud interference.</p> <p></p> <p>7.Minimum Beach Area (min_beach_area) Sets the smallest area (in meters\u00b2) that can be classified as shoreline, helping to distinguish between true shoreline and scattered noise.</p> Click to expand: How this works  During the image classification, some features (for example, building roofs) may be incorrectly labelled as sand. To correct this, all the objects classified as sand containing less than a certain number of connected pixels are removed from the sand class. The default value is 4500 m^2, which corresponds to 20 connected pixels of 15 m^2. If you are looking at a very small beach (&lt;20 connected pixels on the images), try decreasing the value of this parameter.   <p></p> <p>8.Sand Color <code>sand_color</code> The 'sand_color' setting is used to select the best model for classifying sand. You can choose one of the following options <code>default</code> to use the default model, <code>dark</code> for grey/black sand beaches or 'bright' for white sand beaches. This setting is only used by the coastsat shoreline extraction model not the one's used by coastseg in the <code>unet</code> notebook.</p> <ul> <li>Only change the <code>sand_color</code> parameter if you are seeing that with the default the sand pixels are not being classified as sand (in orange).</li> <li>If your beach has dark sand (grey/black sand beaches), you can set this parameter to dark and the classifier will be able to pick up the dark sand.</li> <li>On the other hand, if your beach has white sand and the default classifier is not picking it up, switch this parameter to bright. The latest classifier contains all the training data and can pick up sand in most environments (but not as accurately).</li> </ul>"},{"location":"extract_shoreline_settings/#advanced-settings-advanced-users-only","title":"Advanced Settings (Advanced Users only)","text":"<p>The advanced settings are used to determine where each shoreline vector intersects each transects. You generally shouldn't need to modify these settings, but if you have a complex shoreline you might want to.</p> <p>1.Minimum Number of Shoreline Points <code>min_points</code></p> <p>Sets the threshold for the minimum number of shoreline points required to identify a valid shoreline intersection with the transect. If the number of points is below this threshold, the function will return NaN (Not a Number) for that intersection.</p> <ul> <li> <p>** Reduce <code>min_points</code>:** If your shoreline is complex and scattered, you might need to reduce this number to ensure that some intersections can be calculated. However, be cautious because a lower number might lead to less reliable intersections.</p> </li> <li> <p>** Increase <code>min_points</code>:** If you have have ample and dense shoreline data points and want to make sure that the intersection is calculated based on a substantial number of points for robustness you might want to increase this value. This could be the case for well-sampled or highly detailed shoreline datasets.</p> </li> </ul> <p>2.Alongshore Distance <code>along_dist</code></p> <p>Defines the maximum alongshore distance (in meters) from the transect within which shoreline points are considered for calculating intersections.</p> <ul> <li> <p>Increase: If your shoreline is more complex and irregular, you may need to increase this value to capture more points for intersection calculation. However, be aware that larger values might also include more irrelevant points, so it's about finding a balance.</p> </li> <li> <p>Decrease: Decreasing this parameter might be useful when the shoreline is simple, straight, and without significant alongshore variability. A smaller along_dist value would restrict the intersection calculation to points closer to the transect, reducing potential noise from farther points.</p> </li> </ul> <p>3.Maximum Standard Deviation <code>max_std</code></p> <p>Limits the variability of shoreline points used to compute the median intersection, reducing the influence of outliers.</p> <p><code>max_std</code> is the maximum acceptable standard deviation (in meters) for the shoreline points when calculating the median intersection. If the standard deviation of the points is above this value, the function will return NaN if in 'nan' mode or if in 'max' mode the maximum intersection will be returned.</p> <ul> <li> <p>Increase : A complex shoreline with a lot of variability might necessitate a higher <code>max_std</code> value. However, a larger <code>max_std</code> might also lead to the inclusion of more outliers, so use this parameter carefully.</p> </li> <li> <p>Decrease : You might want to decrease this value when the intersections are based on a group of shoreline points that are close to each other in the cross-shore direction, ensuring a more precise median intersection. This could be beneficial when the shoreline data are of high quality with limited cross-shore variability.</p> </li> </ul> <p>4.Maximum Range <code>max_range</code></p> <p>Specifies the maximum range (in meters) allowed for the shoreline points when calculating the median intersection. If the range is larger than this, the function may return NaN or use the maximum intersection, depending on other settings.</p> <ul> <li> <p>Increase: For a complex, irregular shoreline, a larger <code>max_range</code> might be required. However, as with <code>max_std</code>, a larger <code>max_range</code> could also introduce more dispersion in the intersection points.</p> </li> <li> <p>Decrease: Similar to 'max_std', you might want to decrease this value to ensure a more precise median intersection when the shoreline data are of high quality with limited cross-shore range. Decreasing 'max_range' will exclude intersections that are based on points with a large range in the cross-shore direction.</p> </li> </ul> <p>5.Minimum Chainage <code>min_chainage</code></p> <p>The furthest landward distance (in meters) from the transect origin that an intersection is accepted. Beyond this point, the function returns NaN for the intersection.</p> <ul> <li> <p>Increase : If your shoreline has a lot of landward variation or recesses, you might need to increase this value. However, this could also increase the risk of including irrelevant points landward of the actual shoreline.</p> </li> <li> <p>Decrease : Decreasing this parameter might be useful when the shoreline does not have significant landward recesses and users want to exclude points that are too far landward of the transect origin. This could help avoid irrelevant points from impacting the intersection calculation.</p> </li> </ul> <p>6.Percentage Multiple <code>prc_multiple</code></p> <p>In 'auto' mode, this setting decides when to switch from NaN (indicating no reliable intersection) to the maximum intersection value based on shoreline data variability.</p> <ul> <li> <p>If the percentage of data points where the standard deviation is larger than <code>max_std</code> is above this value, the function will switch to returning the maximum intersection.</p> </li> <li> <p>If your shoreline is complex and you're using the <code>auto</code> mode, you might need to adjust this value based on the specific dispersion characteristics of your data.</p> </li> </ul> <p>7.Multiple Intersections Mode <code>multiple_inter</code></p> <p>Manages scenarios where multiple potential shoreline intersections occur along a single transect.</p> <p>This is quite common, for example when there is a lagoon behind the beach and the transect crosses two water bodies. The function will analyze transect by transect to identify these kinds of cases and depending on the selected mode choose to:</p> <ul> <li>'nan':</li> </ul> <p>-- Always assign a NaN when there are multiple intersections.</p> <ul> <li>'max':</li> </ul> <p>-- Always take the max (intersection the furthest seaward).</p> <ul> <li>'auto':</li> </ul> <p>-- Switch from returning NaN to returning the maximum intersection if a certain percentage of data points have a standard deviation larger than <code>max_std</code>.</p> <ul> <li> <p>If your shoreline is complex, which means the intersections have high dispersion (i.e., large standard deviation or range) <code>auto</code> mode should be beneficial as it automatically decides whether to use NaN or the maximum intersection based on the percentage of points exceeding <code>max_std</code>.</p> </li> <li> <p>If 'auto' is chosen, the <code>prc_multiple</code> parameter will define when to use the max, by default it is set to 0.1, which means that if 10% of the time-series show multiple intersections, then the function thinks there are two water bodies.</p> </li> </ul>"},{"location":"extract_shorelines/","title":"Extract Shorelines From Downloaded Imagery","text":"<p>Extracted Shorelines are vectors created from satellite imagery to outline coastlines.</p> <p>CoastSeg will generate the following files containing the 2D shorelines extracted from the imagery:</p> <p>1.<code>extracted_shorelines_lines.geojson</code>: this contains the 2D extracted shorelines formatted as lines</p> <p>2.<code>extracted_shorelines_points.geojson</code>: this contains the 2D extracted shorelines formatted as points</p> <p>3.<code>extracted_shorelines_dict.json</code>: this contains all the extracted shorelines stored in a json format containing metadata like the satellite the shoreline was derived from and more.</p> <p></p>"},{"location":"extract_shorelines/#why-is-there-not-an-extracted-shoreline-for-my-roi","title":"Why is there not an extracted shoreline for my ROI?","text":"<p>Sometimes shorelines will be not be able to be extracted from any of the imagery downloaded for the ROI on the map due to image quality issues such as excessive cloud cover or too many 'no data'(black) pixels in the downloaded imagery. The message <code>The ROI id does not have a shoreline to extract.</code> will print when this happens. When this occurs no extract shoreline vectors will appear on the map.</p> <p>Check the imagery you downloaded. Sometimes you'll need to turn off \"Apply Cloud Mask\" in the settings because the cloud mask is covering the shoreline. Other times your reference shoreline buffer is too small. Go check <code>extract_shorelines_report.txt</code> report located in your session to see what happened with more details.</p> <p>In the guide below we will outline a few senarios you might encounter when extracting shorelines. Also go check out our case studies to see full examples of how to use CoastSeg to extract shorelines even at difficult locations like Alaska.</p>"},{"location":"extract_shorelines/#how-to-extract-shorelines-from-your-imagery","title":"How to Extract Shorelines From Your Imagery","text":"<p>If its your first time extracting shorelines from imagery we recommend using a small dataset to learn how the setting for extracting shoreline work, then downloading the full dataset. The first time through use the default settings, then change one setting to see how it impacts your results.</p>"},{"location":"extract_shorelines/#step-1-load-a-reference-shoreline","title":"Step 1: Load a Reference Shoreline","text":"<ul> <li>Guide How to delete parts of shoreline</li> </ul> <p>Option 1 : Load CoastSeg's Shorelines</p> <ol> <li>Draw a bounding box</li> <li> <p>Click load shoreline</p> </li> <li> <p>In this example, we have a back barrier shoreline we want to remove. Here is hack for getting rid of the back barrier shoreline you can also follow the tutorial at How to delete parts of shoreline.</p> </li> <li> <p>Load the reference shoreline in the ROIs</p> </li> <li>Delete the ROIs where you don't want the shoreline to be loaded.</li> <li>Delete the reference shoreline</li> <li>Click Load Shoreline Button to load the reference shoreline in the remaining ROIs</li> </ol> <p></p> <p>Option 2 : Load Your Own Shorelines</p> <ol> <li>Select 'Shoreline' from under the drop down Load Feature from File</li> <li>Load shorelines from your geojson file</li> <li>Check out the guide for how to do this here How to Load Features from Geojson Files on Map</li> </ol> <p></p>"},{"location":"extract_shorelines/#step-2-load-transects","title":"Step 2: Load Transects","text":"<p>CoastSeg extract shorelines from your imagery by checking if the water line intersects with a transect. If you don't have any transects in your Roi, then you won't be able to extract shorelines.</p> <p>Option 1 : Load CoastSeg Transects</p> <ol> <li>Draw a bounding box</li> <li>Click load transects</li> <li>Guide on how to do this here How to Load Transects on the Map</li> </ol> <p>Option 2 : Load Your Own Transects</p> <ol> <li>Select 'transects' from under the drop down Load Feature from File</li> <li>Load transects a geojson file</li> </ol>"},{"location":"extract_shorelines/#step-3-assess-and-download-imagery","title":"Step 3: Assess and Download Imagery","text":"<ul> <li> <p>Check Your Imagery Quality: Ensure the selected ROI has minimal cloud cover and a balanced mix of land and water. See Examples of Bad Imagery.</p> </li> <li> <p>Download Small Dataset: Initially, download 3-5 years of imagery for a small area to test and refine your settings before proceeding with a larger dataset.</p> </li> </ul> <p>Examples of Bad Imagery</p> <p>If most of your imagery looks like these examples you may need to change your ROI.</p> Example Image Description Solution ROI is too small with excessive water coverage. Make your ROI larger to include more land. Cloud masking failed and mistakenly masked the shoreline. Try turning off cloud masking by setting 'Apply Cloud Mask' to False Image is likely too cloudy to extract accurate shorelines. Try using imagery with less clouds or try turning off cloud masking"},{"location":"extract_shorelines/#step-4-examine-shorelines-extracted-from-3-5-years-of-imagery","title":"Step 4: Examine Shorelines Extracted from 3-5 years of imagery","text":"<ul> <li> <p>When you click \"Extract Shorelines,\" a new directory with the session name you provided will be created at <code>CoastSeg/sessions</code>. This directory will contain a subdirectory for each ROI you selected. Within each subdirectory, you will find all the files generated by extracting shorelines, which are detailed in Extracted Shoreline Session Contents.</p> </li> <li> <p>You can find images that show the extracted shorelines on each image in <code>CoastSeg/sessions/&lt;YOUR SESSION NAME&gt;/ROI_ID_NAME/jpg_files/detection</code>. An example is shown below:</p> </li> </ul> <p></p> Description Example Image Suggested Adjustment This shoreline is almost perfect, but it needs adjustment to capture the thin shoreline. Lower the <code>minimum beach area</code> to include thinner shorelines. More shoreline needs to be captured close to cloud-covered areas. Increase the <code>Cloud Distance</code> to capture more of the shoreline near clouds. The reference shoreline buffer (in purple) is too narrow Increase the buffer size to better capture area dynamics."},{"location":"extract_shorelines/#step-5-experiment-with-the-settings","title":"Step 5: Experiment with the Settings","text":"<ul> <li>Manipulate the settings until you get shorelines you like</li> <li>If you find that the cloud masking is covering your shorelines try turning off cloud masking and downloading your imagery again.</li> </ul>"},{"location":"extract_shorelines/#step-6-save-the-settings","title":"Step 6: Save the Settings","text":"<ul> <li>Click Save Settings button each time you extract shorelines</li> </ul>"},{"location":"extract_shorelines/#step-7-download-the-full-time-series","title":"Step 7: Download the Full Time Series","text":"<ul> <li>Now that you have the settings saved for how you want the shorelines extracted, download the full time series.</li> </ul>"},{"location":"extract_shorelines/#step-8-filter-out-the-bad-imagery","title":"Step 8: Filter out the Bad Imagery","text":"<ul> <li>Once your data is downloaded open the directories you downloaded and follow the guide to filter out the bad imagery How to Filter Out Bad Imagery</li> </ul>"},{"location":"extract_shorelines/#step-9-extract-shorelines-for-the-full-time-series","title":"Step 9: Extract Shorelines for the Full Time Series","text":"<ul> <li>Now that the data is downloaded and filtered, name a new session, and click extract shorelines to extract shorelines from all your downloaded imagery.</li> </ul>"},{"location":"extract_shorelines/#step-10-remove-outlier-extracted-shorelines","title":"Step 10: Remove Outlier Extracted Shorelines","text":"<p>Interactively view the extracted shorelines on the map and remove outliers using the \"Load Extracted Shorelines\" controls. You can view a tutorial on how to use it at YouTube Tutorial on How to Remove Outlier Shorelines</p>"},{"location":"extract_shorelines/#youtube-video","title":"YouTube Video","text":""},{"location":"extract_shorelines/#extracted-shoreline-session-contents","title":"Extracted Shoreline Session Contents","text":"<p>A session contains all the files created during the process of extracting shorelines from specific ROIs whose data is stored in <code>CoastSeg/data</code>. Each ROI's settings, rasters, imagery, and metadata, generated during the download process, are organized into folders within <code>CoastSeg/data</code>, ensuring that the downloaded data remains independent of the extracted shorelines. Each session references the specific ROI(s) in <code>CoastSeg/data</code> it was derived from in the <code>config.json</code> file. While the structure of a session may vary depending on user actions, such as whether tide correction was applied, it will always contain the files <code>config_gdf.geojson</code> and <code>config.json</code> because they are needed to reference the downloaded ROI(s)from which the shorelines were extracted.</p>"},{"location":"extract_shorelines/#location-of-sessions","title":"Location of Sessions","text":"<p>Sessions are saved to <code>CoastSeg/sessions</code>. A session contains the all the files related to extract shorelines for a particular set of ROIs in the downloaded data located in <code>CoastSeg/data</code>. Each session follows a similar format depending on what actions were taken by the user. For instance, if tide correction was not applied during the session then none of the files with the tidal correction applied will be present.</p>"},{"location":"extract_shorelines/#sample-session-structure","title":"Sample Session Structure","text":"<p>Here is a sample session that had 2 ROIs where shorelines were successfully extracted and tide correction was applied to both ROIs.</p> <pre><code>\u251c\u2500\u2500 CoastSeg\n|\n|___session\n|    |_ ID_4_datetime11-22-22__11_15_15\n\u2502\u00a0\u00a0 |   |_ jpg_files\n\u2502\u00a0\u00a0 |   |  |_ detection # this folder contains images of the extracted shorelines overlaid on the original scene\n\u2502\u00a0\u00a0 |   |  |  |_ 2023-12-09-18-40-08_L9.jpg   # this is the shoreline extracted from satellite L9 on 2023-12-09 at 18:40:08\n\u2502\u00a0\u00a0 |   |  |  |_ &lt;rest of shoreline detection images&gt;\n\u2502\u00a0\u00a0 |   |_config.json\n\u2502\u00a0\u00a0 |   |_config_gdf.json\n\u2502\u00a0\u00a0 |   |_extracted_shorelines_lines.geojson\n\u2502\u00a0\u00a0 |   |_extracted_shorelines_points.geojson\n\u2502\u00a0\u00a0 |   |_raw_transect_time_series.csv\n\u2502\u00a0\u00a0 |   |_raw_transect_time_series_merged.csv\n\u2502\u00a0\u00a0 |   |_raw_transect_time_series_points.geojson\n\u2502\u00a0\u00a0 |   |_raw_transect_time_series_vectors.geojson\n\u2502\u00a0\u00a0 |   |_tidally_corrected_transect_time_series.csv        # this file will only appear if tidal correction was applied\n\u2502\u00a0\u00a0 |   |_tidally_corrected_transect_time_series_merged.csv # this file will only appear if tidal correction was applied\n\u2502\u00a0\u00a0 |   |_tidally_corrected_transect_time_series_points.geojson # this file will only appear if tidal correction was applied\n\u2502\u00a0\u00a0 |   |_tidally_corrected_transect_time_series_vectors.geojson # this file will only appear if tidal correction was applied\n\u2502\u00a0\u00a0 |   |_shoreline_settings.json\n\u2502\u00a0\u00a0 |   |_transects_cross_distances.json\n\u2502\u00a0\u00a0 |   |_transects_settings.json\n\u2502\u00a0\u00a0 |   |\n|   |_ ID_3_datetime11-22-22__11_15_15\n\u2502\u00a0\u00a0 |   |_ jpg_files\n\u2502\u00a0\u00a0 |   |_config.json\n\u2502\u00a0\u00a0 |   |_config_gdf.json\n\u2502\u00a0\u00a0 |   |_&lt;rest of files&gt;\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>CoastSeg works best on sand and gravel beaches. It is not as effective at other sites or a marsh beaches.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>1.Sign up to use Google Earth Engine Python API</p> <ol> <li> <p>Follow the guide to setup Google Earth Engine: Sign up for Google Earth Engine for the First Time</p> </li> <li> <p>Follow the guide to enable Google earth Engine for your project : Check if Google Earth Engine API is Enabled</p> </li> </ol> <p>2. Install Git</p> <ol> <li>Install git on your computer following the guide here</li> </ol> <p>3. Install CoastSeg in Anaconda</p> <p>Follow one of the install guides under \"Installation\" to install CoastSeg.</p> <ul> <li> <p>For most users the basic install guide will work </p> </li> <li> <p>If you are on a secure network then you may need to follow the secure install guide</p> </li> </ul>"},{"location":"getting-started/#installation-setup","title":"Installation &amp; SetUp","text":"<p>1.Activate the coastseg conda environment</p> <ul> <li>Open anaconda prompt.</li> <li>Make sure you have coastseg installed if not follow the installation guide : basic install guide</li> </ul> <pre><code>conda activate coastseg\n</code></pre> <ul> <li>If you have successfully activated coastseg you should see that your terminal's command line prompt should now start with <code>(coastseg)</code>.</li> </ul> <p></p> <p>2.Download CoastSeg from GitHub</p> <ul> <li> <p>Before you run this step make you have install git on your computer a guide is linked here</p> </li> <li> <p>Open 'git bash' (use this in the search bar on windows) and open the app. </p> </li> <li> <p>Here is an example below where I have installed CoastSeg in a folder called 'projects', but you can install it wherever you'd like just make sure to remember the location.</p> </li> <li> <p>After the download finishes close git bash.</p> </li> </ul> <pre><code>mkdir projects\ncd projects\ngit clone --depth 1 https://github.com/SatelliteShorelines/CoastSeg.git\n</code></pre> <p></p>"},{"location":"getting-started/#extract-shorelines","title":"Extract Shorelines","text":"<p>1.Launch Jupyter Lab</p> <ul> <li> <p>If you have never used jupyter notebook before please check out this guide: How to Use Jupyter Notebook</p> </li> <li> <p>Open Anaconda prompt</p> </li> <li> <p>Enter <code>jupyter lab SDS_coastsat_classifier.ipynb</code> in anaconda prompt and your notebook should automatically open in the browser</p> </li> <li> <ol> <li>PLEASE MAKE SURE YOU RUN THIS IN THE COASTSEG DIRECTORY WHERE THE NOTEBOOK <code>SDS_coastsat_classifier.ipynb</code> IS LOCATED</li> </ol> </li> </ul> <pre><code>cd &lt;location you installed Coastseg&gt;\nconda activate coastseg\njupyter lab SDS_coastsat_classifier.ipynb\n</code></pre> <ul> <li>If this doesn't work then try entering the full path to the notebook</li> </ul> <p>-- If you notebook is at <code>C:\\projects\\CoastSeg</code> then you would enter the path <code>C:\\projects\\CoastSeg\\SDS_coastsat_classifier.ipynb</code></p> <pre><code>jupyter lab C:\\projects\\CoastSeg\\SDS_coastsat_classifier.ipynb\n</code></pre> <p></p> <p>2.Authenticate with Google Earth Engine</p> <ul> <li>Run the cell located under 'Authenticate with Google Earth Engine (GEE)'</li> </ul> <p></p> <p>3.Run the Cell 'Create Coastseg Map Dashboard'</p> <ul> <li>Run the cell to create the map dashboard</li> </ul> <p></p> <ul> <li> <p>After you run the cell you should see the UI appear</p> </li> <li> <p>Scroll down to the interactive map</p> </li> </ul> <p></p> <p>4.Draw an Bounding Box</p> <ul> <li> <p>Draw a bounding box along the coast in this box is where ROIs will be created.</p> </li> <li> <p>You can only draw bounding boxes along the coast to generate ROIs this is because CoastSeg is only designed to extract shorelines.</p> </li> </ul> <p>Option 1: Draw a Bounding Box with the box tool</p> <p></p> <p>Option 2: Draw a Bounding Box with the polygon tool</p> <ul> <li>This is useful if you have back - barrier shorelines that you don't want to include</li> </ul> <p></p> <p>5.Generate ROI (Region of Interest)</p> <ul> <li> <p>ROIs can only be generated along a shoreline</p> </li> <li> <p>If no shoreline is found then an error message will appear telling you no ROIs can be created. If this happens create your own reference shoreline following the guide here How to Create Reference Shoreline</p> </li> </ul> <p></p> <p>6.Load Transects</p> <ul> <li> <p>Not all locations in the world have transects or shorelines available. Feel free to submit an issue to contribute transects or shorelines.</p> </li> <li> <p>Make sure there are transects inside the ROI you have selected otherwise you won't be able to extract shorelines</p> </li> <li> <p>If there isn't a reference shoreline or any transects available for your site check out the guide on how to upload your own here</p> </li> </ul> <p></p> <p>7.Modify the Settings</p> <ul> <li> <p>Change the satellites to L8 and L9</p> </li> <li> <p>Change the dates to 12/01/2023 - 03/01/2024</p> </li> <li> <p>Click <code>Save Settings</code></p> </li> </ul> <p></p> <p>8.Name the Session</p> <ul> <li> <p>Name the session 'demo_session'. This will be the name of the folder saved in <code>CoastSeg/sessions</code>.</p> </li> <li> <p>The folder will contain a subdirectory for each ROI from which shorelines were extracted.</p> </li> <li> <p>Keeping sessions and downloaded data separate allows users to create multiple sessions from the same downloaded data, enabling experimentation with different settings.</p> </li> </ul> <p></p> <p>9.Preview the available Imagery</p> <ul> <li> <p>Preview the amount of available imagery for the selected ROI between the dates</p> </li> <li> <p>In this example ROI 'cwm3' has 18 images available from LandSat 8 and 16 images available from LandSat 9 for the date range</p> </li> </ul> <p></p> <p>10. Download the ROIs</p> <ul> <li> <p>Click the ROIs you want to download on the map (they will turn blue when selected).</p> </li> <li> <p>If no transects or reference shorelines are available for the region you have uploaded, follow the guide here.</p> </li> <li> <p>NEVER rename your ROIs. This is because CoastSeg keeps track of the filename in the 'config.json' and you won't be able to load it into CoastSeg again if you do. The ROI's ID is the filename, so that information will be lost if you rename it.</p> </li> <li> <p>The downloaded data can be found in <code>CoastSeg/data</code> under a folder with a name in the format <code>ID_&lt;ROI ID&gt;_datetime&lt;currenttime&gt;</code>. For example, you can see the JPGs for all the images you downloaded in <code>CoastSeg/data/ID_&lt;ROI ID&gt;_datetime06-17-24__11_12_40/jpg_files/preprocessed/RGB</code>. You can read more on how ROIs are structured in this guide</p> </li> <li> <p>This is example of the RGB imagery from a downloaded ROI. Here you can see the user sorted some of the imagery into a bad folder so it would not be used to extract shorelines. A full tutorial on how to filter bad imagery is available here. </p> </li> </ul> <p></p> <p>11.Extract Shorelines </p> <ul> <li> <p>Extracting shorelines involves loading the ROI data for each selected ROI from <code>CoastSeg/data/&lt;ROI ID&gt;</code> and processing the downloaded rasters to extract shorelines. The resulting files are saved in <code>CoastSeg/sessions/&lt;YOUR SESSION NAME&gt;/ROI_ID_NAME</code> for each ROI. Note that the downloaded data is NOT copied to the session; instead, the <code>config.json</code> file in each session keeps track of the location of the downloaded ROI in <code>CoastSeg/data</code>. You can read more about what is in each session in this guide.</p> </li> <li> <p>Extracting shorelines works by finding the land water interface in the image and drawing a line along this boundary.</p> </li> <li> <p>Additionally, a time series of shoreline positions along each transect is generated.</p> </li> <li> <p>You can find images that show the extracted shoreline on each image in <code>CoastSeg/sessions/&lt;YOUR SESSION NAME&gt;/ROI_ID_NAME/jpg_files/detection</code> as illustrated below:</p> </li> </ul> <p></p> <p></p>"},{"location":"getting-started/#apply-tidal-correction-to-extracted-shorelines-optional","title":"Apply Tidal Correction to Extracted Shorelines (Optional)","text":"<p>1.Download the tide model</p> <ul> <li> <p>Before tidal correction can be applied the tide model must be downloaded</p> </li> <li> <p>Follow the tutorial: How to Download Tide Model</p> </li> </ul> <p>2.Load the Session with Extracted Shorelines</p> <ul> <li> <p>Re-open the jupyter notebook</p> </li> <li> <p>Under the 'Kernel' menu Click 'restart and clear outputs of all cells'</p> </li> </ul> <p></p> <ul> <li>Click 'Load Session' and load 'sample_session'</li> </ul> <p></p> <p>3.Click Correct Tides</p> <ul> <li> <p>Click the ROI ID from the dropdown</p> <p>-- You should see some extracted shorelines on the map if you don't then the ROI ID won't appear in the dropdown</p> </li> <li> <p>Enter Beach Slope</p> </li> <li> <p>Enter Beach Elevation relative to Mean Sea Level</p> </li> </ul> <p></p> <p></p>"},{"location":"google-earth-enable-api/","title":"Check if Google Earth Engine API is Enabled","text":""},{"location":"google-earth-enable-api/#step-1-select-a-project-services","title":"Step 1: Select a project &amp; Services","text":"<ol> <li>Click the dropdown and select the project you just made</li> <li>Click the \"API &amp; Services\" button</li> </ol>"},{"location":"google-earth-enable-api/#step-2-click-enable-api","title":"Step 2: Click Enable API","text":""},{"location":"google-earth-enable-api/#step-3-search-for-earth-engine","title":"Step 3: Search for \"earth engine\"","text":""},{"location":"google-earth-enable-api/#step-4-click-earth-engine","title":"Step 4: Click Earth Engine","text":""},{"location":"google-earth-enable-api/#step-5-enable-the-api","title":"Step 5: Enable the API","text":"<p>Your API should already be enabled but if its not then, click manage.</p> <p></p>"},{"location":"google-earth-engine-setup/","title":"Sign Up for Google Earth Engine","text":"<p>In order to use CoastSeg you must create a google cloud project with the Google Earth Engine API enabled. This guide will walk you through how to create a cloud project and register it for the first time. You can read more here about signing up for google earth engine.</p>"},{"location":"google-earth-engine-setup/#step-1-register","title":"Step 1: Register","text":"<p>Visit: https://code.earthengine.google.com/register</p> <p></p>"},{"location":"google-earth-engine-setup/#step-2","title":"Step 2:","text":""},{"location":"google-earth-engine-setup/#step-3-create-project","title":"Step 3: Create Project","text":"<ol> <li>Create a project and name it.</li> <li>Scroll to the bottom and click the link to accept the terms</li> </ol>"},{"location":"google-earth-engine-setup/#step-4-pop-up","title":"Step 4: Pop Up","text":"<p>When you click the link to accept the terms a pop up will open. Click agree and then click the button to continue</p> <p></p>"},{"location":"google-earth-engine-setup/#step-5-confirm","title":"Step 5: Confirm","text":"<ol> <li>Once you accept go back to the page you were on for step 3.</li> <li>Confirm the project information</li> </ol>"},{"location":"google-earth-engine-setup/#step-6-finish-registering-the-project","title":"Step 6: Finish Registering the Project","text":"<p>After you click confirm the GEE console will open. Close it. We will not be using it.</p> <p></p>"},{"location":"google-earth-engine-setup/#step-7-open-the-google-cloud-console","title":"Step 7: Open the Google Cloud Console","text":"<p>Visit the google console homepage</p> <p>Click your the project you registered in the console.</p> <p></p>"},{"location":"google-earth-engine-setup/#step-8-verify-the-google-earth-engine-api-is-enabled","title":"Step 8: Verify the Google Earth Engine API is Enabled","text":"<p>Follw the guide the Verify GEE API is Enabled</p>"},{"location":"google-earth-engine-setup/#step-9-open-the-notebook","title":"Step 9: Open the Notebook","text":"<ol> <li>Open the notebook</li> </ol> <pre><code>conda activate coastseg\ncd &lt;location you installed CoastSeg&gt;\njupyter lab SDS_coastsat_classifier.ipynb\n</code></pre> <ol> <li>Enter in your project ID </li> </ol> <p>My ID is 'ee-sf2309', but enter the id you entered with your email, then run the cell</p> <pre><code>initialize_gee(auth_mode = \"notebook\",project='ee-sf2309')\n</code></pre> <p></p>"},{"location":"how-to-auth/","title":"How to Authenticate with Google Earth Engine(GEE)","text":""},{"location":"how-to-auth/#why-is-it-necessary-to-authenticate-with-google-earth-engine","title":"Why is it necessary to Authenticate with Google Earth Engine?","text":"<p>CoastSeg uses Google Earth Engine(GEE) to download satellite imagery. In order to use GEE an authentication token is needed. To get the GEE token you need to run the notebook cell containing the command <code>ee.Initialize()</code> ,which either 1. loads in your GEE token if it exists or 2. prompts you to create a new token. GEE tokens last 1 week, so every week you will need to go through the process of authenticating with GEE with I have outlined below in the section How to authenticate with Google Earth Engine(GEE) in a coastseg notebook.</p>"},{"location":"how-to-auth/#how-to-get-an-account-with-google-earth-engine","title":"How to get an Account with Google Earth Engine","text":"<p>You can access Google Earth Engine at https://signup.earthengine.google.com/. It takes about 1 day for Google to approve requests. You only need to do this step once. Once your request has been approved you can follow the following steps to authenticate with google earth engine with coastseg.</p>"},{"location":"how-to-auth/#how-to-authenticate-with-google-earth-enginegee-in-a-coastseg-notebook","title":"How to authenticate with Google Earth Engine(GEE) in a coastseg notebook","text":"<p>1.Activate coastseg environment by running the following command on the Anaconda Prompt:</p> <pre><code>conda activate coastseg\n</code></pre> <p>2.Launch the notebook in your coastseg environment</p> <pre><code>jupyter lab &lt;notebook name&gt;\n</code></pre> <p>3.Run the notebook cell containing the command <code>ee.Initialize()</code>.  The <code>earthengine authenticate</code> program will cause a web browser will open, log in with a Gmail account, and accept the terms and conditions. Then copy the authorization code into the indicated cell block into the notebook.</p>"},{"location":"how-to-auth/#errors-with-gcloud","title":"Errors with <code>gcloud</code>?","text":"<p>In the latest version of the earthengine-api, the authentication is done with gcloud. If an error is raised about gcloud missing, go to https://cloud.google.com/sdk/docs/install and install gcloud. After you have installed it, close the Anaconda Prompt and restart it, then activate the environment before running earthengine authenticate again.</p>"},{"location":"how-to-download/","title":"How to Download Imagery","text":""},{"location":"how-to-download/#steps-to-download-imagery","title":"Steps to Download Imagery","text":"<p>1.Activate the Notebook:</p> <pre><code>conda activate coastseg\njupyter lab SDS_coastsat_classifier.ipynb\n</code></pre> <p>2.Set the ROI Area</p> <ul> <li>Recommend ROI area: 20km\u00b2 - 30km\u00b2</li> <li>For Non-overlapping ROIs: Set <code>Small ROI Area</code> to 0 and <code>Large ROI Area</code> to the desired ROI area.</li> <li>For Overlapping ROIs: Assign a value to <code>Small ROI Area</code> and set <code>Large ROI Area</code> to the desired ROI area.</li> </ul> <p>3.Define the Bounding Box:</p> <ul> <li>Use the rectangle tool (located on the map's right-hand corner) to draw a bounding box around your desired area.</li> <li>Ensure the bounding box isn't excessively large, or it will be removed.</li> <li>Before generating ROIs, click the <code>load shorelines</code> button to verify the presence of shorelines within the bounding box.</li> <li>\u26a0\ufe0f If no shorelines are detected, ROIs can't be created. Consider uploading your shorelines using a geojson file.</li> <li>Additionally, check for any transects within your bounding box. If none are present, upload your transects via a geojson file.</li> </ul> <p></p> <p>4.Generate ROIs:</p> <ul> <li> <p>Click the <code>Generate ROIs</code> button. This action creates a grid of ROIs along the shoreline within the bounding box.</p> </li> <li> <p>If you want to use your own custom ROIs follow the tutorial How to Create ROIs and How to Upload Features</p> </li> </ul> <p>5.Select Desired ROIs:</p> <ul> <li>After the ROIs appear on the map, select those for which you want to download satellite imagery.</li> </ul> <p>6.Preview the Imagery Available</p> <ul> <li>This will show the number of images available for each ROI for each satellite selected across the selected date range</li> </ul> <p></p> <p>7.Download Imagery:</p> <ul> <li> <p>Click <code>Download Imagery</code>. The imagery for the chosen ROIs (highlighted in blue) will be downloaded.</p> </li> <li> <p>NEVER rename your ROIs this is because CoastSeg keeps track of the filename in the 'config.json' and you won't be able to load it into CoastSeg again if you do. The ROI's ID is the filename so that information will be lost if you rename it.</p> </li> </ul> <p></p> <p>8.Examine the Download Report (Optional)</p> <ul> <li> <p>Inside of Coastseg/data for each ROI you download there is a 'download_report.txt' file for each time the ROI was downloaded</p> </li> <li> <p>When you open the file it will list which files downloaded successfully as well as any interruptions to the download process</p> </li> </ul> <p></p>"},{"location":"how-to-download/#understanding-roi-region-of-interest","title":"Understanding ROI (Region of Interest)","text":"<p>ROI stands for Region of Interest. It represents a specified rectangular area for downloading satellite imagery from GEE (Google Earth Engine). Due to GEE's area limitations, multiple ROIs are created along the coastline within the user-defined bounding box. If data for an ROI is downloaded, it is stored in a dedicated directory named using the format, <code>ID_&lt;ROI_ID&gt;_datetime&lt;timestamp&gt;</code>, e.g., <code>ID_3_datetime11-22-22__11_15_15</code>.</p>"},{"location":"how-to-download/#roi-directory-layout","title":"ROI Directory Layout","text":"<ul> <li>Each ROI can encompass imagery from multiple satellites, such as Sentinel 2 and Landsat 8 &amp; 9.</li> <li>Imagery from each satellite has a dedicated subdirectory. For instance, Landsat 8 images are in <code>L8</code> and Sentinel 2 in <code>S2</code>.</li> <li>The <code>jpg_files</code> subdirectory contains jpeg images for all downloaded satellites, organized into RGB, NIR, and SWIR folders.</li> <li>For example, an RGB image from Sentinel 2 would reside in <code>jpg_files\\RGB</code>, named like <code>2018-12-06-19-04-16_RGB_S2.jpg</code>.</li> </ul>"},{"location":"how-to-download/#sample-roi-directory-structure","title":"Sample ROI Directory Structure","text":"<p>This diagram illustrates the file organization of the ROI directory when an ROI is downloaded.</p> <pre><code>\u251c\u2500\u2500 CoastSeg\n|\n|___data\n|    |_ ID_3_datetime11-22-22__11_15_15\n\u2502\u00a0\u00a0 |   |_ L8\n\u2502\u00a0\u00a0 |   |_ L9\n\u2502\u00a0\u00a0 |   |_ S2\n\u2502\u00a0\u00a0 |   |_ jpg_files\n\u2502\u00a0\u00a0 |   |  |_ preprocessed\n|   \u2502\u00a0\u00a0 |   |  |_ RGB\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_RGB_S2.jpg\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_RGB_L8.jpg\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_RGB_L9.jpg\n|   \u2502\u00a0\u00a0 |   |  |_ NIR\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_NIR_S2.jpg\n|   |   \u2502\u00a0\u00a0 |  |  |_ &lt;rest of images...&gt;\n|   \u2502\u00a0\u00a0 |   |  |_ SWIR\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_SWIR_S2.jpg\n|   |   \u2502\u00a0\u00a0 |  |  |_ &lt;rest of images...&gt;\n\u2502\u00a0\u00a0 |   |   |_detection\n|   \u2502\u00a0\u00a0 |   |  |_&lt;jpgs of detected shorelines&gt;\n\u2502\u00a0\u00a0 |   |_config.json\n\u2502\u00a0\u00a0 |   |_config_gdf.json\n\u2502\u00a0\u00a0 |   |_extracted_shorelines.geojson\n</code></pre>"},{"location":"how-to-extract-shoreline-area/","title":"How to Use the Shoreline Extraction Area","text":"<p>The shoreline extraction area is used to keep only the extracted shorelines within the region of the Shoreline Extraction Area. You can draw multiple Shoreline Extraction Area polygons if your shoreline is complex or if you have multiple ROIs.</p>"},{"location":"how-to-extract-shoreline-area/#steps","title":"Steps","text":"<p>1.Navigate to <code>Draw Controls</code> and click <code>Shoreline Extraction Area</code> </p> <p></p> <p>2.Click either the polygon or rectangle drawing tool on the map</p> <p></p> <p>3.Draw the Shoreline Extraction Area on the map (it will be shown in pink)</p> <ul> <li>draw as many of these as you like</li> </ul> <p></p> <p>4.(Optional) If you make a mistake navigate to <code>Remove Feature from Map</code> and select <code>Shoreline Extraction Area</code> from the dropdown to remove the Shoreline Extraction Area from the map</p> <p></p> <p>5.(Optional) To switch back to drawing bounding boxes navigate to <code>Draw Controls</code> and click <code>Bounding Box</code></p> <p>6.Click Extract Shorelines</p> <ul> <li>The Shoreline Extraction Area you drew will now be used to extract only the shorelines in this region</li> </ul> <p></p>"},{"location":"how-to-install-pixi/","title":"How to Install Pixi","text":""},{"location":"how-to-install-pixi/#non-windows-users","title":"Non-Windows Users","text":"<p>Visit the Pixi installation page and follow instructions to install Pixi in your shell.</p>"},{"location":"how-to-install-pixi/#tutorial-install-pixi-with-powershell-for-windows","title":"Tutorial: Install Pixi with Powershell for Windows","text":""},{"location":"how-to-install-pixi/#1-install-pixi","title":"1. Install Pixi","text":"<p>Visit the Pixi installation page and follow instructions to install Pixi in your shell.</p>"},{"location":"how-to-install-pixi/#2-open-powershell-and-configure-pixi","title":"2. Open Powershell and Configure Pixi","text":"<p>This code below tells Powershell to allow pixi to connect to the shell <pre><code>Set-ExecutionPolicy RemoteSigned -Scope CurrentUser\npixi shell\n</code></pre></p> Technical explanation This sets the current user's PowerShell execution policy to \"RemoteSigned,\" allowing local scripts to run unsigned while requiring signatures for downloaded scripts. - Local scripts run without needing a digital signature, allowing for flexibility during development. - Scripts from the internet must be signed, which helps protect against running untrusted or tampered code.  Command Breakdown         - `Set-ExecutionPolicy`: Changes the PowerShell script execution policy.         - `RemoteSigned`: Allows unsigned local scripts, but requires a signature for downloaded ones.         - `-Scope CurrentUser`: Affects only your user account (no admin rights needed)."},{"location":"how-to-install-pixi/#3-move-to-coastseg","title":"3. Move to CoastSeg","text":"<p>Change directories to the location of your pyproject.toml</p> <ol> <li> <p><code>cd &lt;CoastSeg folder containing pyproject.toml&gt;</code></p> </li> <li> <p>Check if the <code>pyproject.toml</code> exists in that directory with <code>Test-Path .\\pyproject.toml</code> </p> <ol> <li>If it exists it will print <code>True</code></li> </ol> </li> </ol>"},{"location":"how-to-install-pixi/#4-validate-pixi-is-working","title":"4. Validate Pixi is Working","text":"<p>Activate the environment with:</p> <pre><code>pixi shell --frozen\n</code></pre> <ol> <li>This will activate the default environment, which in this example is called <code>(coastseg)</code></li> </ol> <p></p> <p>If you get an error like:</p> <p></p> <p>Then try the following (you don\u2019t need admin permissions)</p> <ul> <li>This command tells powershell that Pixi is safe to connect to Powershell, buts temporary so you will need to re-run it each time you run <code>pixi shell</code> in a new powershell window</li> </ul> <pre><code>function Invoke-Pixi {\n    powershell.exe -ExecutionPolicy Bypass -Command \"pixi $args\"\n}\n\nSet-Alias pixi Invoke-Pixi -Option AllScope\n\npixi shell --frozen\n</code></pre>"},{"location":"how-to-install-pixi/#install-coastseg-with-pixi","title":"Install CoastSeg with Pixi","text":""},{"location":"how-to-install-pixi/#step-1-navigate-to-project-directory","title":"Step 1: Navigate to Project Directory","text":"<p>Open your preferred shell (this example uses PowerShell) and navigate to your project's directory containing:</p> <ul> <li><code>pyproject.toml</code></li> <li><code>pixi.lock</code></li> </ul>"},{"location":"how-to-install-pixi/#step-2-install-the-environment","title":"Step 2: Install the Environment","text":"<p>Install dependencies specified in the <code>pixi.lock</code> file:</p> <pre><code>pixi install --frozen\n</code></pre> <p></p>"},{"location":"how-to-install-pixi/#step-3-activate-the-default-environment","title":"Step 3: Activate the Default Environment","text":"<p>Activate the environment with:</p> <pre><code>pixi shell --frozen\n</code></pre> <ol> <li>This will activate the default environment, which in this example is called <code>(coastseg)</code></li> </ol> <p></p> <p>If you get an error like:</p> <p></p> <p>Then try the following (you don\u2019t need admin permissions)</p> <ul> <li>this command tells powershell that Pixi is safe to connect to Powershell</li> </ul> <pre><code>function Invoke-Pixi {\n    powershell.exe -ExecutionPolicy Bypass -Command \"pixi $args\"\n}\n\nSet-Alias pixi Invoke-Pixi -Option AllScope\n\npixi shell --frozen\n</code></pre>"},{"location":"how-to-install-pixi/#step-4-verify-installation","title":"Step 4: Verify Installation","text":"<p>Check that the environment is correctly set up by running:</p> <pre><code>python -c \"import coastseg\"\n</code></pre> <p></p>"},{"location":"how-to-install-pixi/#optional-open-the-coastsat-notebook","title":"Optional: Open the CoastSat notebook","text":"<ul> <li>If you don't want to use the zoo workflow and only want to use the CoastSat workflow then use the command below to run the <code>SDS_coastsat_classifier.ipynb</code> notebook in the environment.</li> </ul> <pre><code>jupyter lab SDS_coastsat_classifier.ipynb\n</code></pre>"},{"location":"how-to-install-pixi/#step-5-exit-the-environment","title":"Step 5: Exit the Environment","text":"<p>Exit the current Pixi environment:</p> <pre><code>exit\n</code></pre> <ul> <li>notice how <code>(coastseg)</code> is no longer in front, this means that we have exited the coastseg environment</li> </ul> <p></p>"},{"location":"how-to-install-pixi/#step-6-activate-a-custom-environment-zoo-workflow","title":"Step 6: Activate a Custom Environment (Zoo Workflow)","text":"<p>Activate the Pixi environment configured for machine learning workflows (e.g., Zoo workflow):</p> <pre><code>pixi shell -e ml\n</code></pre> <p>This environment adds TensorFlow and Transformers, which are essential for running Zoo workflow custom models.</p> <p></p>"},{"location":"how-to-install-pixi/#step-7-verify-ml-environment","title":"Step 7: Verify ML Environment","text":"<p>In the <code>ml</code> environment, verify that TensorFlow and Transformers are installed:</p> <pre><code>python -c \"import tensorflow; from transformers import TFSegformerForSemanticSegmentation;\"\n</code></pre>"},{"location":"how-to-install-pixi/#command-reference-table","title":"Command Reference Table","text":"Command Description Conda Equivalent Documentation <code>pixi shell -e &lt;NAME&gt;</code> Activate Pixi environment named <code>&lt;NAME&gt;</code> <code>conda activate &lt;NAME&gt;</code> Pixi shell docs <code>exit</code> Exit the current Pixi environment <code>conda deactivate</code> Pixi exit docs <code>pixi install</code> Install dependencies from <code>pyproject.toml</code> and update <code>pixi.lock</code> <code>conda install</code> Pixi install docs <code>pixi install --frozen</code> Install dependencies strictly from <code>pixi.lock</code> without updating it, even if it differs from <code>pyproject.toml</code> Install from a conda-lock file Pixi frozen install docs"},{"location":"how-to-install-pixi/#faqs","title":"FAQs","text":""},{"location":"how-to-install-pixi/#what-is-pixilock","title":"What is <code>pixi.lock</code>?","text":"<p>The <code>pixi.lock</code> file explicitly lists exact versions of Conda and PyPI packages required for each environment defined in <code>pyproject.toml</code>. You can open this file to view detailed package version information and sources (PyPI or Conda Forge).</p>"},{"location":"how-to-install-pixi/#wait-what-happened-to-pyprojecttoml","title":"Wait, what happened to <code>pyproject.toml</code>?","text":"<p>The <code>pyproject.toml</code> file remains mostly unchanged, but now includes additional sections to help Pixi configure your Python environments more effectively.</p>"},{"location":"how-to-install-pixi/#hold-up-what-do-you-mean-there-are-multiple-environments","title":"Hold up, what do you mean there are multiple environments?","text":"<p>Yeah, that confused me too at first. What's special about pixi is that it can define multiple related environments all within the same file, <code>pyproject.toml</code>. For CoastSeg I've created two environments, one thats the default environment that can run the coastsat workflow and the other environment called <code>ml</code> that adds <code>tensorflow</code> &amp; <code>transformers</code> to the environment to run the zoo workflow. If you are only interested in the coastsat workflow then you will only need the default environment.</p>"},{"location":"how-to-install-pixi/#wait-i-want-to-use-both-workflows-and-i-dont-want-to-switch","title":"Wait, I want to use both workflows and I don't want to switch.","text":"<p>Yeah, I'm lazy too that's why I created a third environment called <code>all</code> that contains the dependencies for both environments. To use this simply use <code>pixi shell -e all</code> and this will open a pixi shell that can use both workflows. Once the shell opens you can use python commands, jupyter commands just like you would with conda prompt.</p>"},{"location":"how-to-install-pixi/#why-did-you-separate-the-environments-like-this","title":"Why did you separate the environments like this?","text":"<p>Great question, I did it because for our zoo workflow we require tensorflow version 2.12 to run our models correctly, which isn't a package avavilable on conda forge for windows machines. Since we want CoastSeg to be available in on conda-forge I opted to make it an optional dependency and a separate environment. But don't worry you can still the secret third environment called <code>all</code> to be able to use the coastsat and zoo workflows at the same time with the <code>pixi shell -e all</code> command.</p>"},{"location":"how-to-upload-features/","title":"How to Upload Features","text":""},{"location":"how-to-upload-features/#how-to-load-features-from-geojson-files","title":"How to Load Features from Geojson Files","text":"<p>1.Click the dropdown from under 'Load Feature from File'</p> <ul> <li>Select the feature you want on the map.</li> </ul> <p>2.Click the load button from under 'Load Feature from File'</p> <ul> <li>This opens a file dialog window where you can select the geojson file you want to load on the map.</li> </ul> <p></p> <p>3.Select a geoJSON file containing the feature</p> <ul> <li> <p>The feature you upload MUST be in CRS 'epsg:4326'</p> </li> <li> <p>If the geojson file is too large or has too many large features the map may become very slow. It is highly recommended to only load small features onto the map.</p> </li> </ul> <p></p>"},{"location":"how-to-use-a-session-another-user/","title":"How to Use Sessions from Another User","text":"<p>If you have a session from another user you want to load into CoastSeg follow these steps</p>"},{"location":"how-to-use-a-session-another-user/#guide-1-you-have-the-downloaded-roi-imagery-and-the-extracted-shoreline-session","title":"Guide 1 : You have the downloaded ROI imagery and the extracted shoreline session","text":"<p>1.Move the ROI folders containing the imagery into CoastSeg/data</p> <p>2.Move the new session folder(s) into CoastSeg/sessions</p> <p>3.Click 'Load Session' and load the session folder from CoastSeg/sessions</p>"},{"location":"how-to-use-a-session-another-user/#guide-2-you-do-not-have-the-downloaded-roi-imagery-but-do-have-the-extracted-shoreline-session","title":"Guide 2: You DO NOT have the downloaded ROI Imagery but DO have the extracted shoreline session","text":"<p>1.Move the new session folder(s) into CoastSeg/sessions</p> <p>2.Click 'Load Session' and load the session folder from CoastSeg/sessions</p> <p>3.Get the Warning Message</p> <ul> <li> <p>A warning called 'Warning Missing Data' will appear listing the missing ROI IDs. In this case is ROI 'fvk3'</p> </li> <li> <p>Hover over the ROIs on the map (in red) and check the ROI drop download on the upper right to see the ID (hovering over ROI 'fvk3' in the screenshot )</p> </li> </ul> <p>4.Download the ALL the ROIs</p> <ul> <li>Click the ALL the ROIs and click 'Download Imagery' to download the data for these missing ROIs</li> </ul> <p>-- Don't worry the code will automatically detect the ROI you already downloaded and won't download it, but you must select ALL the ROIs. This is because under the hood this creates a new session containing only the ROIs you have selected.</p> <p>-- The download settings for the session will already have been loaded into so don't worry about changing them</p> <p></p> <ul> <li>As you can see in the screenshot below the first ROI downloads all the missing imagery, while the second ROI which we had the downloaded data for only downloads a single image because 5 images already exist.</li> </ul> <p></p>"},{"location":"how_to_predicts_tides_script/","title":"\u26a0\ufe0f Before you begin \u26a0\ufe0f","text":"<p>Make sure you have downloaded the FES2014 tide model following the guide 'How to Download the Tide Model'</p>"},{"location":"how_to_predicts_tides_script/#how-to-predict-tides-at-a-single-point","title":"How to Predict Tides at a Single Point","text":"<p>1.Choose a point</p> <p>To use the new <code>tide_predictions</code> script you're first going to need to go https://geojson.io/#map=2/0/20 and place a point in the sea around parranporth. Save this point to geojson file. This is the location where the tide model will predict the tides.</p> <p></p> <ul> <li>This parameter is used after the <code>-C</code></li> <li>Example: <code>-C \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\config_gdf.geojson\"</code></li> </ul> <p>2.Get the location of the transect_time_series.csv file</p> <ul> <li>This parameter is used after the <code>-T</code></li> <li>Example: <code>-T \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\sessions\\dnz3_extract_shorelines_10_yr\\ID_dnz3_datetime12-22-23__09_10_44\\transect_time_series.csv\"</code></li> </ul> <p>3.Get the location of the tide_model</p> <ul> <li>This parameter is used after the <code>-M</code></li> <li>Example: <code>-M \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\tide_model\"</code></li> </ul> <p>4.Get the location of the tide model regions geojson file</p> <ul> <li>This file contains the regions the tide model was split into so tide predictions could run quicker: https://github.com/SatelliteShorelines/CoastSeg/blob/main/scripts/tide_regions_map.geojson</li> <li>The script needs to know where this file is so it knows which region of the tide model the point belongs to and uses that tide model to predict the tides</li> <li>Example:   <code>-R \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\scripts\\tide_regions_map.geojson\"</code></li> </ul> <p>5.Assemble the command</p> <ul> <li>Assemble all commands into a single line. I recommended using notepad to combine all the commands into a single line</li> </ul> <pre><code>python predict_tides.py -C \"C:\\Users\\sf230\\Downloads\\parranporth.geojson\" -T \"C:\\development\\doodleverse\\coastsat_package\\coastsat_package\\data\\NARRA\\transect_time_series.csv\"  -M \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\tide_model\" -R \"C:\\development\\doodleverse\\coastseg\\CoastSeg\\scripts\\tide_regions_map.geojson\"\n</code></pre>"},{"location":"how_to_predicts_tides_script/#parameters","title":"Parameters:","text":"<p>1.-C (or -c) [GeoJSON FILE PATH ]</p> <ul> <li>Description: Path to the geojson file containing the point</li> <li>Example: <code>-C \"path_to_config_file\"</code></li> <li><code>GeoJSON FILE PATH</code>: Path to the geojson file.</li> </ul> <p>2.-T (or -t) [RAW_TIMESERIES_FILE_PATH]</p> <ul> <li>Description: Path to the raw timeseries file.</li> <li>Example: <code>-T \"path_to_timeseries_file\"</code></li> <li><code>RAW_TIMESERIES_FILE_PATH</code>: Path to a csv file containing the time series created by extracting shorelines with coastseg. This timeseries   represents the intersection of each transect with the shoreline extracted for a particular date and time. It is not tidally corrected.</li> </ul>"},{"location":"how_to_predicts_tides_script/#optional-configuration-options","title":"Optional Configuration Options","text":"<p>If you didn't install the tide model in the default location you will need to modify the following variables</p> <p>-P (or -p) [TIDE_PREDICTIONS_FILE_NAME]</p> <ul> <li>Description: File name for saving a csv file containing the tide predictions for each date time in the timeseries provided.</li> <li>By Default this file is named \"tidal_predictions.csv\"</li> <li>Example: <code>-P \"tidal_predictions.csv\"</code></li> </ul> <p>-R (or -r) [MODEL_REGIONS_GEOJSON_PATH]</p> <ul> <li>Description: Path to the model regions GeoJSON file.</li> <li>By default the program looks for <code>tide_regions_map.geojson</code> in the <code>scripts</code> directory</li> <li>Example: <code>-R \"c:\\coastseg\\scripts\\tide_regions_map.geojson\"</code></li> <li><code>MODEL_REGIONS_GEOJSON_PATH</code>: Path to the location of the geojson file containing the regions used to create the clipped tide model in the previous steps. This file is typically located in the scripts directory within coastseg. \"c:\\coastseg\\scripts\\tide_regions_map.geojson\"`</li> </ul> <p>-M (or -m) [FES_2014_MODEL_PATH]</p> <ul> <li>Description: Path to the FES 2014 tide model directory.</li> <li>Example: <code>-M \"c:\\coastseg\\tide_model\"</code></li> <li><code>FES_2014_MODEL_PATH</code>: Path to the FES 2014 tide model, by default attempts to load from <code>coastseg\\tide_model</code> if you installed the tide_model from in a different location then CoastSeg/tide_model then modify this variable to have the full location to the directory containing the clipped 2014 fes tide model.</li> </ul>"},{"location":"install-miniforge/","title":"Miniforge Installation Guide","text":"<p>Miniforge is a minimal installer for conda specifically designed to install conda itself along with its dependencies and a small number of external packages. It is an alternative to Miniconda and Anaconda that uses conda-forge as the default channel.</p>"},{"location":"install-miniforge/#step-1-download-miniforge","title":"Step 1: Download Miniforge","text":"<p>Visit the Miniforge GitHub releases page to download the installer suitable for your system (Windows, macOS, or Linux).</p> <p>Choose the correct installer for your system:</p> <ul> <li>For Windows: <code>Miniforge3-Windows-x86_64.exe</code></li> </ul>"},{"location":"install-miniforge/#windows","title":"Windows","text":"<ol> <li>Run the downloaded executable.</li> <li>Follow the on-screen instructions to complete the installation.</li> </ol>"},{"location":"install-miniforge/#step-2-verify-miniforge-installation","title":"Step 2: Verify Miniforge Installation","text":"<p>1.Open the Miniforge Prompt</p> <p></p> <p>2.Verify the installation:</p> <ul> <li> <p>Type the following command to check if conda is installed correctly:</p> <pre><code>conda --version\n</code></pre> </li> </ul> <p></p>"},{"location":"install-miniforge/#step-3-follow-guide-to-install-coastseg-in-miniforge-prompt","title":"Step 3: Follow Guide to Install CoastSeg in Miniforge Prompt","text":"<p>1.Follow the rest of the guide to install CoastSeg in Miniforge Prompt here</p> <ul> <li>Below are a few screenshots that should show you how installing CoastSeg in MiniForge should look</li> </ul> <p></p> <p></p>"},{"location":"jupyter-notebook-guide/","title":"How to Use Jupyter Notebook","text":"<p>If you have never used jupyter before I find that this guide is great!</p>"},{"location":"jupyter-notebook-guide/#1-how-to-run-a-cell","title":"1. How to Run a cell","text":"<p>Option 1: Keyboard Shortcut: Shift + enter</p> <ul> <li> <p>Click shift and enter at the same time to run the selected cell.</p> </li> <li> <p>Make sure you click the cell you want to run first</p> </li> </ul> <p>Option 2: Run the cell with the run cell button</p> <p></p>"},{"location":"jupyter-notebook-guide/#2-how-to-restart-the-notebook","title":"2. How to Restart the Notebook","text":"<ul> <li>If an error occurs while you are running coastseg you may want to restart the notebook.</li> </ul> <p>Option 1: Restart Button</p> <p></p> <p>Option 2: Close the notebook &amp; reopen</p> <ol> <li> <p>Open the anaconda prompt terminal where you have coastseg running</p> </li> <li> <p>Enter \"crtl + c\" at the same time on your keyboard (enter it a few times) to shut down the notebook</p> </li> </ol> <p></p> <ol> <li>Enter 'jupyter lab SDS_coastsat_classifier.ipynb' to open the notebook</li> </ol> <p></p>"},{"location":"jupyter-notebook-guide/#how-to-run-all-the-cells","title":"How to Run all the Cells","text":"<ul> <li> <p>To run all the cells at the same time use the 'run all cells button'</p> </li> <li> <p>If you encounter an error please restart the notebook and click the button again to re-run all the cells</p> </li> </ul> <p></p>"},{"location":"mac-install-guide/","title":"Mac Installation Guide","text":""},{"location":"mac-install-guide/#mac-users","title":"Mac users","text":"<p>CoastSeg users who only want to use the <code>coastsat_classifier</code> notebook and not the zoo notebook can install coastseg using the conda-forge package as shown below. However any users interested in using the zoo workflow should read the section Install Tensorflow for Zoo</p>"},{"location":"mac-install-guide/#install-from-conda-forge","title":"Install from conda-forge","text":"<ol> <li> <p>Create an miniconda/Anaconda environment and Activate it</p> </li> <li> <p>This command creates an anaconda environment named <code>coastseg</code> and installs <code>python 3.10</code> in it.   <pre><code>conda create --name coastseg python=3.10 -y\nconda activate coastseg\n</code></pre></p> </li> <li> <p>Install coastseg</p> </li> </ol> <pre><code>conda install -c conda-forge coastseg\n</code></pre>"},{"location":"mac-install-guide/#install-tensorflow-for-zoo","title":"Install Tensorflow for Zoo","text":"<p>CoastSeg requires Tensorflow (TF) to run the models in the zoo workflow, which doesn't play nicely with Mac. We advise you to use either Linux or Windows, if you can. We cannot troubleshoot Mac installations, but we can offer the following advice:</p> <ul> <li>TF for mac has its own instructions: https://developer.apple.com/metal/tensorflow-plugin/</li> <li>New Mac silicon runs TF, (and has its own TF branch), but the old intel Mac chips might not work with parts of TF.</li> <li>We are not sure if TF is compatible with M2 macs</li> <li>Our continuous integration tests check only the 'latest' version of Mac OS.</li> <li>If you get a working installation on Mac, please let us know, and we can edit these pages to communicate better advice. Thanks in advance</li> </ul>"},{"location":"map_guide/","title":"How to Use the Map","text":""},{"location":"map_guide/#how-to-deselect-map-layers","title":"How to Deselect Map Layers","text":"<p>Not able to hover over a feature on the map? The problem is its under another layer on the map. Most likely the feature you want to hover over is under the ROI and selected ROI layers. Use the layers menu checkbox to deselect the ROI and selected ROI layers from the map and hover over your feature again.</p> <p></p>"},{"location":"map_guide/#how-to-load-transects-on-the-map","title":"How to Load Transects on the Map","text":"<p>To load transects on the map first draw a bounding box along the coastline. Then click the button <code>Load Transects</code> to load transects within the bounding box. WARNING: Not all coastlines have transects available and if no transects exist within the bounding box a pop up will indicate that no transects were found. If this happens try drawing a bounding box somewhere else.</p> <p></p>"},{"location":"map_guide/#how-to-load-shorelines-on-the-map","title":"How to Load Shorelines on the Map","text":"<p>To load shorelines on the map first draw a bounding box along the coastline. Then click the button <code>Load Shoreline</code> to load shorelines within the bounding box. WARNING: Not all coastlines have shoreline vectors available and if no shorelines exist within the bounding box a pop up will indicate that no shorelines were found. If this happens try drawing a bounding box somewhere else.</p> <p></p>"},{"location":"map_guide/#how-to-load-features-from-geojson-files","title":"How to Load Features from Geojson Files","text":"<p>1.Click the dropdown from under 'Load Feature from File'</p> <ul> <li>Select the feature you want on the map.</li> </ul> <p>2.Click the load button from under 'Load Feature from File'</p> <ul> <li>This opens a file dialog window where you can select the geojson file you want to load on the map.</li> </ul> <p></p> <p>3.Select a geoJSON file containing the feature</p> <ul> <li>If the geojson file is too large or has too many large features the map may become very slow. It is highly recommended to only load small features onto the map.</li> </ul> <p></p>"},{"location":"models/","title":"The CoastSeg Zoo Workflow","text":"<p>This workflow can be found in the 'SDS_zoo_classifier.ipynb' notebook.</p> <p>The models available in this workflow come from segmentation zoo and were trained using segmentation gym.</p> <p>These models have not been thoroughly tested yet, but we are currently undergoing the process of benchmarking these models in a variety of coastal environments. We will be documenting the results of this benchmark in a separate repository and we will link it here when its ready.</p> <p>Anyone is encouraged to contribute models. Please visit Segmentation Zoo, our repository of models and open a new Discussion topic and let us know about your model. We will accept models that use any conceivable spectral index, or any combination of bands. However, our team prefers our models to apply equally to all Landsat and Sentinel imagery, so ideally models are trained on those data, not some other data source.</p>"},{"location":"models/#installation-instructions","title":"Installation Instructions","text":"<p>You'll need to follow the optional set of installation instructions to install the dependencies <code>tensorflow</code> and <code>transformers</code> into the <code>coastseg</code> environment in order to run the models.</p> <p>Warning: The zoo workflow does not support Mac currently due to tensorflow and Mac having numerous compatibility issues. If you would like to help our team support Mac please submit an issue.</p> <p>Install Additional Dependencies</p> <ul> <li>Only install these dependencies if you plan to use CoastSeg's Zoo workflow notebook.</li> <li>Warning installing tensorflow will not work correctly on Mac see for more details Mac install guide</li> </ul> <pre><code>pip install tensorflow\npip install transformers\n</code></pre>"},{"location":"models/#model-compatible-spectral-indices","title":"Model-Compatible Spectral Indices","text":"<p>The models currently available with CoastSeg can use the following spectral indices. We welcome contribution for models that use different spectral indices, or any combination of bands. However, our team prefers our models to apply equally to all Landsat and Sentinel imagery, so ideally models are trained on those data, not some other data source.</p> <p>1.Red Green Blue (RGB)</p> <ul> <li>These files are generated by default.</li> </ul> <p>2.Normalized Difference Water Index (NDWI)</p> <ul> <li><code>NDWI = (Green - NIR) / (Green + NIR)</code></li> <li>Uses the green and NIR bands to enhance the appearance of open water features.</li> <li>Read more here</li> </ul> <p>3.Modified Normalized Difference Water Index (MNDWI)</p> <ul> <li><code>MNDWI = (Green - SWIR) / (Green + SWIR)</code></li> <li>Uses green and SWIR bands to enhance open water features and diminish built-up area features that often correlate with open water in other indices.</li> <li>Reduces vegetation effects better than NDWI and is more suitable for enhancing and extracting water information in regions with a background dominated by built-up land areas.</li> <li>Read more here</li> </ul>"},{"location":"models/#available-models","title":"Available Models","text":"<p>The following image segmentation models are available in CoastSeg to use on downloaded satellite imagery.</p> <p>To use each model we first download the model weights from the model's Zenodo release and then initialize the model using these weights.</p> <p>Each model has a Zenodo release which contains the model weights, metadata about the model as well as model validation statistics. Such validation statistics are an indication of model performance for a 4-class image segmentation, but these statistics don't necessarily reflect skill in shoreline detection accuracy and precision.</p>"},{"location":"models/#rgb","title":"RGB","text":"<p>Recomended Model</p> <p>1. <code>global_segformer_RGB_4class_14036903</code> : a four-class SegFormer segmentation model, designed to be applied to RGB imagery.</p> <ul> <li> <p>This model was trained using PlanetScope, Sentinel-2 and Landsat-5/7/8/9 visible-band (RGB) images of coasts</p> </li> <li> <p>Zenodo release</p> </li> </ul> <p>Classes</p> <ul> <li>0: water</li> <li>1: whitewater,</li> <li>2: sediment,</li> <li>3: other</li> </ul> <p>2. <code>AK_segformer_RGB_4class_14037041</code> : a four-class SegFormer segmentation model, designed to be applied to RGB imagery. Specifically trained on imagery from Alaska.</p> <ul> <li> <p>This model was trained using PlanetScope, Sentinel-2 and Landsat-5/7/8/9 visible-band (RGB) images of coasts</p> </li> <li> <p>Zenodo release</p> </li> </ul> <p>Classes</p> <ul> <li>0: water</li> <li>1: whitewater,</li> <li>2: sediment,</li> <li>3: other</li> </ul>"},{"location":"models/#mndwi","title":"MNDWI","text":"<p>1. <code>global_segformer_MNDWI_4class_14183366</code> :  a four-class SegFormer segmentation model, designed to be applied to MNDWI imagery.</p> <ul> <li> <p>This model was trained using PlanetScope, Sentinel-2 and Landsat-5/7/8/9 MNDWI images of coasts</p> </li> <li> <p>Zenodo release</p> </li> <li> <p>If you have a study site that you used with the CoastSat classifer that you want to compare the zoo method to use this MNDWI model because the CoastSat method uses the MNDWI threshold to determine the land water interface.</p> </li> </ul> <p>Classes</p> <ul> <li>0: water</li> <li>1: whitewater,</li> <li>2: sediment,</li> <li>3: other</li> </ul> <p>2. <code>AK_segformer_MNDWI_4class_14187478</code> : a four-class SegFormer segmentation model, designed to be applied to MNDWI imagery. Specifically trained on imagery from Alaska.</p> <ul> <li> <p>This model was trained using PlanetScope, Sentinel-2 and Landsat-5/7/8/9 MNDWI images of coasts</p> </li> <li> <p>Zenodo release</p> </li> </ul> <p>Classes</p> <ul> <li>0: water</li> <li>1: whitewater,</li> <li>2: sediment,</li> <li>3: other</li> </ul>"},{"location":"models/#ndwi","title":"NDWI","text":"<p>1.<code>global_segformer_NDWI_4class_14172182</code>: a four-class SegFormer segmentation model, designed to be applied to NDWI imagery.</p> <ul> <li> <p>This model was trained using PlanetScope, Sentinel-2 and Landsat-5/7/8/9 MNDWI images of coasts</p> </li> <li> <p>Zenodo release</p> </li> </ul> <p>Classes</p> <ul> <li>0: water</li> <li>1: whitewater,</li> <li>2: sediment,</li> <li>3: other</li> </ul> <p>2.<code>AK_segformer_NDWI_4class_14183210</code>: a four-class SegFormer segmentation model, designed to be applied to NDWI imagery. Specifically trained on imagery from Alaska.</p> <ul> <li> <p>This model was trained using PlanetScope, Sentinel-2 and Landsat-5/7/8/9 MNDWI images of coasts</p> </li> <li> <p>Zenodo release</p> </li> </ul> <p>Classes</p> <ul> <li>0: water</li> <li>1: whitewater,</li> <li>2: sediment,</li> <li>3: other</li> </ul>"},{"location":"models/#data-sources","title":"Data Sources","text":"<ol> <li> <p>Buscombe, D., Lundine, M.A., Janda, C.N., and Batiste, S., 2025, Labeled satellite imagery for training machine learning models that predict the suitability of imagery for shoreline extraction, U.S. Geological Survey data release, https://doi.org/10.5066/P14MDKVJ.</p> </li> <li> <p>Buscombe, D., Lundine, M.A., Batiste, S., and Janda, C.N., 2025, Labeled satellite imagery for training machine learning models that predict the suitability of semantic segmentation model outputs for shoreline extraction: U.S. Geological Survey data release, https://doi.org/10.5066/P1N4VI7H.</p> </li> <li> <p>Buscombe, D., Lundine, M.A., Janda, C.N., and Batiste, S., 2025, Labeled satellite imagery for training machine learning semantic segmentation models of coastal shorelines: U.S. Geological Survey data release, https://doi.org/10.5066/P13EOBZQ.</p> </li> </ol>"},{"location":"register-existing-gee-account/","title":"Register existing account with Google Earth Engine","text":"<p>This tutorial is for existing users of CoastSeg who need to use a Google Cloud Project in order to continue using GEE.</p>"},{"location":"register-existing-gee-account/#step-1-check-if-you-have-a-cloud-project","title":"Step 1: Check if you have a cloud project","text":"<ol> <li>Visit: Google Earth Engine Registration</li> <li>Sign in with the email you have used with CoastSeg</li> </ol>"},{"location":"register-existing-gee-account/#step-2-select-usage-type","title":"Step 2: Select Usage type","text":""},{"location":"register-existing-gee-account/#step-3-choose-an-existing-project","title":"Step 3: Choose an existing project","text":"<p>If you have no created a project before then follow the register for a new cloud project guide</p> <p></p>"},{"location":"register-existing-gee-account/#step-4-register-the-project","title":"Step 4: Register the Project","text":"<ol> <li>If your project is already registered it will state \"project already registered\"</li> </ol> <ol> <li>If the project is NOT registered it will ask you to confirm your registration</li> </ol>"},{"location":"register-existing-gee-account/#step-5-finish-registering-the-project","title":"Step 5: Finish Registering the Project","text":"<p>After you click confirm the GEE console will open. Close it. We will not be using it.</p> <p></p>"},{"location":"register-existing-gee-account/#step-6-open-the-google-cloud-console","title":"Step 6: Open the Google Cloud Console","text":"<p>Visit the google console homepage</p> <p>Click your the project you registered in the console.</p> <p></p>"},{"location":"register-existing-gee-account/#step-7-verify-the-google-earth-engine-api-is-enabled","title":"Step 7: Verify the Google Earth Engine API is Enabled","text":"<p>Follw the guide the Verify GEE API is Enabled</p>"},{"location":"register-existing-gee-account/#step-8-open-the-notebook","title":"Step 8: Open the Notebook","text":"<ol> <li>Open the notebook</li> </ol> <pre><code>conda activate coastseg\ncd &lt;location you installed CoastSeg&gt;\njupyter lab SDS_coastsat_classifier.ipynb\n</code></pre> <ol> <li>Enter in your project ID </li> </ol> <p>My ID is 'ee-sf2309', but enter the id you entered with your email, then run the cell</p> <pre><code>initialize_gee(auth_mode = \"notebook\",project='ee-sf2309')\n</code></pre> <p></p>"},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"roadmap/#earth_americas-coastseg-roadmap","title":":earth_americas: CoastSeg RoadMap","text":""},{"location":"roadmap/#version-3","title":"Version 3","text":"<p>Will provide 'additional functionality', which can be categorized as follows:</p> <p>a) More performant shoreline extraction: the goal is fast and accurate shoreline extraction, with known errors. Key goals include 1) outlier detection, 2) faster shoreline extraction, and 3) improved shoreline detection in more diverse settings, e.g. ice, marsh and other vegetation, rocky cliffs, gravel beaches, etc</p> <p>b) Improved imagery: the goal is to use ML to enhance imagery, where possible. Key goals include 1) image super-resolution, 2) image inpainting, and 3) automated image registration</p> <p>c) Additional image sources. The initial focus will be on integrating with Planet Labs' Planetscope (3-m) imagery</p> <p>A major goal is to incorporate more data-driven approaches to shoreline detection using Machine Learning sub-components. We track progress using the project board and in issues. If you have an idea for a new feature not listed here, please get in touch!</p>"},{"location":"roadmap/#major-features","title":"Major features:","text":"<ul> <li>Faster Shoreline Extraction</li> <li>Faster Image Segmentation</li> <li>Faster Batch Image Downloading</li> <li>New Models</li> <li>4 class B+NIR+SWIR Segformer</li> <li>4 class NDWI Segformer</li> <li>4 class MNDWI Segformer</li> <li>Image Filtering</li> <li>Automated : metric comparison with base image</li> <li> <p>Automated : Machine Learning model Sniffer \ud83d\udc15 designed to sort bad imagery out</p> </li> <li> <p>CoastSeg allows users to filter out images by placing images into a bad directory to not use them for shoreline extraction</p> </li> <li> <p>More Shoreline Filter for Shoreline Extraction</p> </li> <li>vertex simplification</li> <li>outliers based on time-average shoreline</li> <li>discontinuous shorelines</li> <li>Image Sources</li> <li>Planet 3m</li> <li>Super Resolution</li> <li>Image Registration</li> <li>Image Inpainting - Stable Diffusion</li> <li>Docker container</li> <li>New Frontend?</li> <li>Goal to move away from jupyter potentially for better performance and hosting</li> </ul>"},{"location":"roi/","title":"What is an ROI?","text":"<p>An ROI is a region of interest it defines a rectangular area where satellite imagery will be downloaded from GEE (Google Earth Engine). GEE limits the area of land you are able to download to accommodate for this limitation ROIs of the sizes allowed by GEE are generated along the coastline within a bounding box drawn by the user. If the data for an ROI is downloaded it will have its own directory with the ROI ID in the directory name, for example <code>ID_3_datetime11-22-22__11_15_15</code> is the directory for ROI 3.</p>"},{"location":"roi/#roi-directory-organization","title":"ROI Directory Organization","text":"<p>Each ROI can have multiple sets of satellite imagery associated with it. For instance, a single ROI may have Sentinel 2, Landsat 8 and 9 imagery downloaded. Each type of satellite imagery will have its own directory within the ROI's directory. All the imagery and metadata associated with the Landsat 8 imagery for an ROI will be located in a subdirectory named <code>L8</code>. For the Sentinel 2 imagery this subdirectory would be named <code>S2</code>.</p> <p>The jpgs for all satellite imagery downloaded for a given ROI are in subdirectory <code>jpg_files</code>. <code>jpg_files</code> contains the RGB, NIR, and SWIR subdirectories which contain the jpg images for all the selected satellites. This means all the imagery from L8, L9, and S2 would be located at each subdirectory with the satellite name in the image name. For example the RGB image from S2 would be in subdirectories <code>jpg_files\\RGB</code> with a filename similar to: <code>2018-12-06-19-04-16_RGB_S2.jpg</code>.</p>"},{"location":"roi/#sample-roi-directory-structure","title":"Sample ROI Directory Structure","text":"<pre><code>\u251c\u2500\u2500 CoastSeg\n|\n|___data\n|    |_ ID_3_datetime11-22-22__11_15_15\n\u2502\u00a0\u00a0 |   |_ L8\n\u2502\u00a0\u00a0 |   |_ L9\n\u2502\u00a0\u00a0 |   |_ S2\n\u2502\u00a0\u00a0 |   |_ jpg_files\n\u2502\u00a0\u00a0 |   |  |_ preprocessed\n|   \u2502\u00a0\u00a0 |   |  |_ RGB\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_RGB_S2.jpg\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_RGB_L8.jpg\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_RGB_L9.jpg\n|   \u2502\u00a0\u00a0 |   |  |_ NIR\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_NIR_S2.jpg\n|   |   \u2502\u00a0\u00a0 |  |  |_ &lt;rest of images...&gt;\n|   \u2502\u00a0\u00a0 |   |  |_ SWIR\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_SWIR_S2.jpg\n|   |   \u2502\u00a0\u00a0 |  |  |_ &lt;rest of images...&gt;\n\u2502\u00a0\u00a0 |   |   |_detection\n|   \u2502\u00a0\u00a0 |   |  |_&lt;jpgs of detected shorelines&gt;\n\u2502\u00a0\u00a0 |   |_config.json\n\u2502\u00a0\u00a0 |   |_config_gdf.json\n\u2502\u00a0\u00a0 |   |_extracted_shorelines.geojson\n</code></pre>"},{"location":"roi/#how-to-generate-roi-on-the-map","title":"How to Generate ROI on the Map","text":"<p>Use the sliders <code>Small ROI Length</code> and <code>Large ROI Length</code> to control the side length of the ROI squares you want to generate. Click the button <code>Generate ROIs</code> to create a grid of overlapping ROIs on the map. You can then click each ROI on the map to indicated that satellite imagery for this ROI should be downloaded when the button <code>Download Imagery</code> is clicked.</p> <ul> <li> <p>ROIs can only be created along a shoreline this is because CoastSeg is meant to extract shorelines from satellite imagery</p> </li> <li> <p>If there is not a reference shoreline available for your site upload your own by following the guide here</p> </li> </ul> <p></p>"},{"location":"roi/#how-to-change-the-size-of-the-roi","title":"How to Change the Size of the ROI","text":"<p>The size of the side lengths of the ROI can be controlled using the two sliders <code>Small ROI Length</code> and <code>Large ROI Length</code>. These sliders control the side lengths of the ROI squares. You can control the amount of overlap between ROIs by changing the side lengths of each ROI or have 0 overlap by setting <code>Small ROI Length</code> to 0.</p>"},{"location":"roi/#how-to-view-the-id-of-an-roi","title":"How to View the ID of an ROI","text":"<p>Hover over any ROI on the map and look under the <code>ROI Data</code> section on right side of the map to view its ROI ID.</p>"},{"location":"secure-install-guide/","title":"Secure Installation Guide","text":""},{"location":"secure-install-guide/#regular-users-on-windows-and-linux","title":"Regular users on Windows and Linux","text":"<p>Please refer to the installation guide on the README</p>"},{"location":"secure-install-guide/#mac-users","title":"Mac users","text":"<p>CoastSeg requires Tensorflow (TF), which doesn't play nicely with Mac. Please see Mac install guide for more details.</p>"},{"location":"secure-install-guide/#users-working-over-secure-network","title":"Users working over secure network","text":"<p>First, some notes:</p> <ul> <li>\u26a0\ufe0f The CoastSeg team is aware of issues with installing CoastSeg's conda dependencies\u26a0\ufe0f</li> <li>\u26a0\ufe0fThe following instructions are valid as of 2023-09-12. If this proposed solution fails for you, please create a new Issue \u26a0\ufe0f</li> <li>\u26a0\ufe0f Where possible, we advise you install the initial Coastseg conda environment not over a secure network. If and ONLY if that is not possible, please follow the instructions posted below carefully</li> <li>If you are running these commands on a secure network verify you are connected to your VPN before running the following commands</li> <li>if you get an SSL error while running any of the <code>conda install</code> commands try the following command</li> <li>ONLY RUN THE PIP INSTALL COMMANDS AFTER CREATING A PIP.INI file Go to Phase 1: Create a pip.ini File</li> </ul>"},{"location":"secure-install-guide/#quick-start","title":"Quick Start","text":"<p>Second, you must temporarily (for a few minutes) disable SSL verification. This should be done only once, when setting up the initial conda environment. If you find yourself having to do this for other instructions listed below and elsewhere, something is wrong and you should either start again from scratch, or raise an Issue if there is a legitimate bug. Coastseg developers are not liable for any unintended effects of ignoring the advice posted here, i.e. leaving <code>ssl_verify</code> to be <code>False</code> outside of the specific and unique case explained here.</p> <pre><code>conda config --set ssl_verify False\n</code></pre> <p>Now, you can install the rest of the dependencies. You must do this immediately.</p> <pre><code>conda install -c conda-forge geopandas jupyterlab -y\npip install coastseg\npip uninstall h5py -y\nconda install -c conda-forge h5py -y\n</code></pre> <p>Finally, re-enable SSL verification. You must do this immediately after installing the conda packages above. If any of the above commands fail for whatever reason, you must also run this command to re-enable SSL. Coastseg developers are not liable for any unintended effects of ignoring the advice posted here, i.e. leaving <code>ssl_verify</code> to be <code>False</code> outside of the specific and unique case explained here.</p> <pre><code>conda config --set ssl_verify True\n</code></pre>"},{"location":"secure-install-guide/#detailed-guide","title":"Detailed Guide","text":""},{"location":"secure-install-guide/#phase-0-allow-git-to-work-over-a-secure-network","title":"Phase 0: Allow Git to work over a secure network","text":"<ol> <li> <p>Configure git to use ssl</p> </li> <li> <p>Make sure to replace <code>\"C:/Users/ulastname/Documents/DOIRootCA2.cer\"</code> with your user name</p> </li> </ol> <pre><code>git config --global http.sslcainfo \"C:/Users/ulastname/Documents/DOIRootCA2.cer\"\n</code></pre> <ol> <li> <p>Test if this worked</p> </li> <li> <p>This step assumes you have a github account and are in the CoastSeg directory</p> </li> </ol> <pre><code>git pull origin main\n</code></pre>"},{"location":"secure-install-guide/#phase-1-allow-pip-to-work-over-a-secure-network","title":"Phase 1: Allow Pip to work over a secure network","text":"<ol> <li>Open the <code>pip.ini</code> file</li> <li>In anaconda prompt or the command line run:    <pre><code>notepad %APPDATA%\\pip\\pip.ini\n</code></pre></li> <li>Edit the <code>pip.ini</code> file</li> <li>Make sure to replace C:\\Users\\ulastname\\Documents\\cacert_with_doi.pem`</li> <li>save and exit after editing    <pre><code> [global]\n cert = C:\\Users\\ulastname\\Documents\\cacert_with_doi.pem\n</code></pre></li> <li>Check the contents of the pip.ini    <pre><code> pip config list\n</code></pre></li> <li>it should return something like    <pre><code> global.cert='C:\\\\Users\\\\ulastname\\\\Documents\\\\cacert_with_doi.pem'\n</code></pre></li> <li>Test if pip is configured correctly</li> </ol> <p>Run the command :</p> <pre><code>pip -v list\n</code></pre> <p>If you get no errors then you are done! \ud83c\udf8a</p> <p>Did you get errors? If so, run the following command:</p> <pre><code>pip --cert  C:\\\\Users\\\\ulastname\\\\Documents\\\\cacert_with_doi.pem -v list\n</code></pre> <ul> <li>Verify you are connected to your VPN because this command will fail if you are not</li> <li>If this command fails it might double check the correct location of the cert file is listed in your command</li> </ul>"},{"location":"secure-install-guide/#what-to-do-if-pip-fails","title":"What to do if pip fails","text":"<ol> <li> <p>Error Message contains the phrase 'Open SSL Module is not available'</p> <pre><code>Can't connect to HTTPS URL because the SSL module is not available\n</code></pre> </li> <li> <p>Solution: Copy the following files from <code>CONDA_PATH\\Library\\bin</code> to <code>CONDA_PATH\\DLLs</code></p> </li> </ol> <pre><code>libcrypto-1_1-x64.*\nlibssl-1_1-x64.*\n</code></pre> <ul> <li>Make sure to copy <code>libcrypto-1_1-x64.*</code> and <code>libssl-1_1-x64.*</code> to <code>CONDA_PATH\\DLLs</code></li> <li><code>CONDA_PATH</code> is just the path to your anaconda installation</li> <li>Example : <code>CONDA_PATH</code> : <code>C:\\Users\\sfitzpatrick\\Anaconda3</code></li> <li>Example : <code>CONDA_PATH\\Library\\bin</code>: <code>C:\\Users\\sfitzpatrick\\Anaconda3\\Library\\bin</code></li> <li>Example : <code>CONDA_PATH\\DLLs</code>: <code>C:\\Users\\sfitzpatrick\\Anaconda3\\DLLs</code></li> <li>Original Credit for this solution</li> </ul>"},{"location":"secure-install-guide/#phase-2-allow-conda-to-work-over-a-secure-network","title":"Phase 2: Allow Conda to Work Over a Secure Network","text":"<ol> <li>Run the command</li> </ol> <pre><code>conda config --set ssl_verify C:\\Users\\uname\\Documents\\cacert_with_doi.pem\n</code></pre> <ol> <li>Verify it worked</li> </ol> <pre><code>conda config --show ssl_verify\n</code></pre> <ul> <li>It should return something like</li> </ul> <pre><code>(coastseg) C:\\Users\\uname&gt;conda config --show ssl_verify\nssl_verify: C:\\Users\\uname\\Documents\\cacert_with_doi.pem\n</code></pre>"},{"location":"secure-install-guide/#optional-step-only-if-you-get-ssl-errors-with-git","title":"Optional Step (only if you get ssl errors with git)","text":"<ol> <li> <p>Make a <code>.gitconfig</code> file</p> </li> <li> <p>Example location: <code>c:\\Users\\me\\.gitconfig</code></p> </li> <li>Make sure to replace <code>C:/Users/uname/Documents/DOIRootCA2.cer</code> with your username</li> </ol> <pre><code>[filter \"lfs\"]\n    clean = git-lfs clean -- %f\n    smudge = git-lfs smudge -- %f\n    process = git-lfs filter-process\n    required = true\n[user]\n    name = Sharon Fitzpatrick\n    email = SF2309@Gmail.Com\n[http]\n    sslbackend = schannel\n    sslVerify = true\n    sslcainfo = C:/Users/uname/Documents/DOIRootCA2.cer\n</code></pre>"},{"location":"secure-install-guide/#phase-3-install-coastseg-normally","title":"Phase 3: Install CoastSeg Normally","text":"<p>Now that pip is working, follow the rest of the installation instructions located at Basic Install Guide</p>"},{"location":"secure-install-guide/#step-2-configure-coastseg-for-a-secure-network","title":"Step 2: Configure CoastSeg for a Secure Network","text":"<p>To use coastseg on a secure network you need to add the location of the certification file for your network in the <code>certifications.json</code> file.</p> <p>1.Open the <code>certifications.json</code> file</p> <p>This file is located in the main CoastSeg directory</p> <pre><code>\u251c\u2500\u2500 CoastSeg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 |  |_ coastseg\n\u2502\u00a0\u00a0 |  |  |_ __init__.py\n\u2502\u00a0\u00a0 |  |  |_bbox.py\n\u2502\u00a0\u00a0 |  |  |_roi.py\n|\n|___data\n|    |_ &lt;data downloaded here&gt; # automatically created by coastseg when imagery is downloaded\n|\n|\n|___certifications.json  *This is the file you need to modify*\n</code></pre> <p></p> <p>2.Modify <code>cert_path</code> to have the full path to your cert file.</p> <ul> <li>Windows Users: Make sure to replace each <code>\\</code> with <code>\\\\</code></li> </ul> <p>Here is an example of the full path to a cert file.</p> <p></p> <p>3.That's it. You're done! \ud83c\udf8a</p>"},{"location":"secure-install-guide/#wsl-setup-over-a-secure-network","title":"WSL SetUp Over a Secure Network","text":"<p>If you are using WSL to run coastseg you will need to install coastseg to your WSL instance that's because coastseg downloads files to where its installed and if its not running where it was installed it will fail to find of your data.</p>"},{"location":"secure-install-guide/#run-these-commands-each-time-you-open-wsl","title":"Run these commands each time you open WSL","text":"<ul> <li>Make sure to replace <code>\"mnt/c/users/uname/documents/cacert_with_doi.pem\"</code> with your user name</li> </ul> <pre><code>export PIP_CERT=mnt/c/users/uname/documents/cacert_with_doi.pem\nexport SSL_CERT_FILE=mnt/c/users/uname/documents/cacert_with_doi.pem\nexport REQUESTS_CA_BUNDLE=mnt/c/users/uname/documents/cacert_with_doi.pem\n</code></pre>"},{"location":"secure-install-guide/#run-these-commands-in-wsl-once","title":"Run these commands in WSL once","text":"<ul> <li>Make sure to replace <code>uname</code> with your username <code>mnt/c/users/uname/documents/cacert_with_doi.pem</code> and verify you have <code>cacert_with_doi.pem</code> installed in that location.</li> <li>Make sure to replace <code>\"mnt/c/users/uname/documents/cacert_with_doi.pem\"</code> with your user name</li> </ul> <pre><code>conda config --set ssl_verify mnt/c/users/uname/documents/cacert_with_doi.pem\ngit config --global http.sslCAInfo mnt/c/users/uname/documents/DOIRootCA2.cer\n</code></pre>"},{"location":"sessions/","title":"What is a Session?","text":"<p>A session is a saved state that CoastSeg was in. A session can be used to load in the ROIs that were downloaded previously or the previously extracted shorelines. A session is typically stored as a directory containing a minimum of two files a <code>config.json</code> and a <code>config_gdf.geojson</code> file that lets you restore the state coastseg was in when the session was created.</p>"},{"location":"sessions/#where-are-sessions-located","title":"Where are Sessions Located?","text":"<p>Sessions are saved to <code>CoastSeg/sessions</code>. A session contains the all the files related to extract shorelines for a particular set of ROIs in the downloaded data located in <code>CoastSeg/data</code>. Each session follows a similar format depending on what actions were taken by the user. For instance, if tide correction was not applied during the session then none of the files with the tidal correction applied will be present.</p> <p>Here is a sample session that had 2 ROIs where shorelines were successfully extracted and tide correction was applied to both ROIs.</p> <pre><code>\u251c\u2500\u2500 CoastSeg\n|\n|___session\n|    |_ ID_4_datetime11-22-22__11_15_15\n\u2502\u00a0\u00a0 |   |_ jpg_files\n\u2502\u00a0\u00a0 |   |  |_ detection # this folder contains images of the extracted shorelines overlaid on the original scene\n\u2502\u00a0\u00a0 |   |  |  |_ 2023-12-09-18-40-08_L9.jpg   # this is the shoreline extracted from satellite L9 on 2023-12-09 at 18:40:08\n\u2502\u00a0\u00a0 |   |  |  |_ &lt;rest of shoreline detection images&gt;\n\u2502\u00a0\u00a0 |   |_config.json\n\u2502\u00a0\u00a0 |   |_config_gdf.json\n\u2502\u00a0\u00a0 |   |_extracted_shorelines_lines.geojson\n\u2502\u00a0\u00a0 |   |_extracted_shorelines_points.geojson\n\u2502\u00a0\u00a0 |   |_raw_transect_time_series.csv\n\u2502\u00a0\u00a0 |   |_raw_transect_time_series_merged.csv\n\u2502\u00a0\u00a0 |   |_raw_transect_time_series_points.geojson\n\u2502\u00a0\u00a0 |   |_raw_transect_time_series_vectors.geojson\n\u2502\u00a0\u00a0 |   |_tidally_corrected_transect_time_series.csv        # this file will only appear if tidal correction was applied\n\u2502\u00a0\u00a0 |   |_tidally_corrected_transect_time_series_merged.csv # this file will only appear if tidal correction was applied\n\u2502\u00a0\u00a0 |   |_tidally_corrected_transect_time_series_points.geojson # this file will only appear if tidal correction was applied\n\u2502\u00a0\u00a0 |   |_tidally_corrected_transect_time_series_vectors.geojson # this file will only appear if tidal correction was applied\n\u2502\u00a0\u00a0 |   |_shoreline_settings.json\n\u2502\u00a0\u00a0 |   |_transects_cross_distances.json\n\u2502\u00a0\u00a0 |   |_transects_settings.json\n\u2502\u00a0\u00a0 |   |\n|   |_ ID_3_datetime11-22-22__11_15_15\n\u2502\u00a0\u00a0 |   |_ jpg_files\n\u2502\u00a0\u00a0 |   |_config.json\n\u2502\u00a0\u00a0 |   |_config_gdf.json\n\u2502\u00a0\u00a0 |   |_&lt;rest of files&gt;\n</code></pre>"},{"location":"sessions/#how-to-save-a-new-session","title":"How to Save a New Session","text":"<ol> <li>Load ROIs on the map</li> <li>Extract Shorelines</li> <li>Write the session name in the textbox then click enter</li> <li>If the session already exists and you click extract shorelines the data will be overwritten.</li> </ol>"},{"location":"sessions/#how-to-load-downloaded-data","title":"How to Load Downloaded Data","text":"<ol> <li>Click Load Session</li> <li>Navigate from the <code>sessions</code> directory to the <code>data</code> directory.</li> <li>Click on an ROI directory</li> <li>Click the select button</li> <li>On the map navigate to where the ROIs were loaded.</li> </ol> <p>To load config files for ROIs that have been downloaded before go to the <code>data</code> directory within <code>coastseg</code> then find the directory of the ROIs you want to upload. Inside that directory, for example the <code>ID_3_datetime10-20-22__07_09_07</code> directory, there should be <code>geojson</code> file named <code>config_gdf.geojson</code>. You should notice the <code>ID_&lt;ROI ID NUMBER&gt;</code> in the directory name in this case this is ROI id 3. This will load the ROI in that directory and all the other selected ROIs,shorelines, transects, and the bounding box that were on the map when it was saved.</p> <p>\u2b50 This works even for data downloaded on someone else's computer just copy and paste the ROI directory from their computer to your data directory</p> <p></p>"},{"location":"sessions/#how-to-load-extracted-shorelines-from-a-session","title":"How to Load Extracted Shorelines from a Session","text":"<ol> <li>Click load session button</li> <li>Select a directory from the sessions directory    </li> </ol>"},{"location":"slope-file-format/","title":"Acceptable File Formats for Slope","text":"<p>You can upload your own slopes to be used for tide correction. CoastSeg accepts the slopes from CSV files in formats below.</p> <p>Note: The exact columns names (capitalizations too) must match</p>"},{"location":"slope-file-format/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Acceptable CSV formats for Specific Dates</li> <li>Acceptable CSV formats for Seasonal Data</li> </ul>"},{"location":"slope-file-format/#acceptable-csv-formats-for-specific-dates","title":"Acceptable CSV formats for Specific Dates","text":"<ul> <li>Note: The exact columns names (capitalizations too) must match</li> </ul>"},{"location":"slope-file-format/#acceptable-forms-of-dates","title":"Acceptable Forms of Dates","text":"<ol> <li>Dates in ISO 8601<ul> <li>specify year-month-day followed by the time in 24-hour format with an offset from UTC (Coordinated Universal Time)</li> <li>Example: <code>2023-12-25 18:40:14+00:00</code></li> <li>We recommend this format since this is the same format used to save the dates in the timeseries CSV files saved by CoastSeg</li> </ul> </li> <li>Dates in YYYY-MM-DD<ul> <li>Example 2021-04-05</li> </ul> </li> </ol>"},{"location":"slope-file-format/#csv-formats-for-specific-dates","title":"CSV Formats for Specific Dates","text":"<ol> <li> <p>Format 1: Slopes for each transect ID</p> <p>columns : transect_id, slope</p> <ul> <li>Please be sure to supply a slope for each transect id</li> <li>All your transect ids can be found in the <code>raw_transect_time_series_merged.csv</code>  file</li> </ul> transect_id slope 1 0.05 2 0.04 3 0.02 </li> <li> <p>Format 2: Dates and slopes for each transect ID</p> <p>columns : transect_id, slope, dates</p> <ul> <li>Uses the slope for everything up to and including the date for that transect</li> <li>For example for transect 2 slope <code>0.04</code> will be used for all tide corrections for dates before or on 2021-04-05, but for dates after 2021-04-05 the slope <code>0.03</code> will be used</li> <li>All your transect ids can be found in the <code>raw_transect_time_series_merged.csv</code>  file</li> </ul> transect_id slope dates 1 0.05 2021-04-05 2 0.04 2021-04-05 2 0.03 2021-04-08 3 0.02 2021-04-06 </li> <li> <p>Format 3: Dates and latitude &amp; longitude values for each slope</p> <p>columns : slope,longitude,latitude,dates</p> <ul> <li>Use the slope for the transect closet to the longitude(x) and latitude(y) location and the closest date</li> </ul> slope latitude longitude dates 0.05 34.0522 -118.2437 2021-04-05 0.04 36.7783 -119.4179 2021-04-07 0.02 37.7749 -122.4194 2021-04-08 </li> <li> <p>Form 4: Transect IDs as the columns and dates as the row index</p> <p>columns: transect ids (the actual transect ids)</p> <ul> <li>This is a pivot of format 2</li> <li>This format has the slope value for each transect id and date</li> <li>In the examples below <code>1</code>,<code>2</code>,<code>3</code> are transect ids</li> </ul> 1 2 3 2004-04-07 00:00:00+00:00 0.05 0.04 0.04 2004-04-08 00:00:00+00:00 0.04 0.05 0.08 2004-04-09 00:00:00+00:00 0.03 0.09 0.07 2004-04-10 00:00:00+00:00 0.02 0.01 0.07 </li> </ol>"},{"location":"slope-file-format/#acceptable-csv-formats-for-seasonal-data","title":"Acceptable CSV formats for Seasonal Data","text":"<p>Any of the following CSV formats will be accepted for seasonal data</p> <ul> <li>Note: The exact columns names (capitalizations too) must match</li> <li>Note: Any month that is missing will use the median slope</li> <li>Months : [1,2,3,4,5,6,7,8,9,10,11,12]</li> </ul> <p></p> <ol> <li> <p>Format 1: Slopes for each transect ID</p> <p>columns : month, slope</p> <ul> <li>Uses that the slope for any shoreline that was detected during that month</li> <li>For any shorelines that don't have a corresponding slope for that month the median of all the slopes is used</li> <li>In this example, the slope 0.05 will be used to tidally correct all shorelines that occured in the 1st month, the slope 0.04 will be used to tidally correct shorelines that were in February, and the slope 0.02 will be used to tidally correct shorelines that were in March.</li> </ul> month slope 1 0.05 2 0.04 3 0.02 </li> <li> <p>Format 2: month and transect_id values for each slope</p> <p>columns : transect_id, slope, month</p> <ul> <li>Uses that the slope for any shoreline that was detected during that month</li> <li>For any shorelines that don't have a corresponding slope for that month the median of all the slopes is used</li> <li>For example for transect 2 slope <code>0.04</code> will be used for all tide corrections for dates that occured in the 5th month May, but for shorelines in June the slope <code>0.03</code> will be used</li> </ul> transect_id slope month 1 0.05 4 2 0.04 5 2 0.03 6 3 0.02 3 </li> </ol>"},{"location":"test-zoo-workflow/","title":"How to Test the Zoo Workflow","text":""},{"location":"test-zoo-workflow/#how-to-test-all-the-models-in-coastseg","title":"How to Test All the Models in Coastseg","text":"<p>This script will automatically test all the models in coastseg. Make sure the models in <code>available_models_dict</code> match the models currently available in coastseg. If they don't match the models currently available in coastseg update the <code>available_models_dict</code> dictionary as well as <code>parent_directory_names</code>.</p> <p>Make sure to replace parameter after -P with path to ROI's RGB directory <code>python test_models.py -P &lt;your path here&gt;\"</code></p> <pre><code>cd &lt;location you installed coastseg&gt;\ncd debug_scripts\npython test_models.py -P &lt;your path here&gt;\"\n</code></pre>"},{"location":"test-zoo-workflow/#example","title":"Example","text":"<p><code>python test_models.py -P C:\\development\\doodleverse\\coastseg\\CoastSeg\\data\\ID_12_datetime06-05-23__04_16_45\\jpg_files\\preprocessed\\RGB\"</code></p>"},{"location":"tide-file-format/","title":"Acceptable File Formats for Tide","text":"<p>You can upload your own tides to be used for tide correction. CoastSeg accepts the tides from CSV files in formats below.</p>"},{"location":"tide-file-format/#acceptable-csv-formats-for-specific-dates","title":"Acceptable CSV formats for Specific Dates","text":"<ul> <li>Note: The exact columns names (capitalizations too) must match</li> </ul>"},{"location":"tide-file-format/#acceptable-forms-of-dates","title":"Acceptable Forms of Dates","text":"<ol> <li>Dates in ISO 8601<ul> <li>specify year-month-day followed by the time in 24-hour format with an offset from UTC (Coordinated Universal Time)</li> <li>Example: <code>2023-12-25 18:40:14+00:00</code></li> <li>We recommend this format since this is the same format used to save the dates in the timeseries CSV files saved by CoastSeg</li> </ul> </li> <li>Dates in YYYY-MM-DD<ul> <li>Example 2021-04-05</li> </ul> </li> </ol>"},{"location":"tide-file-format/#csv-formats-for-specific-dates","title":"CSV Formats for Specific Dates","text":"<ol> <li> <p>Format 1: Tides for each transect ID</p> <p>columns : transect_id, tide</p> <ul> <li>Please be sure to supply a tide for each transect id, otherwise tide correction cannot be applied to that transect id and it will be removed from the tide corrected output</li> <li>All your transect ids can be found in the <code>raw_transect_time_series_merged.csv</code>  file</li> </ul> transect_id tide 1 0.05 2 0.04 3 0.02 </li> <li> <p>Format 2: Dates and tides for each transect ID</p> <p>columns : transect_id, tide, dates</p> <ul> <li>Uses the tide for everything up to and including the date for that transect</li> <li>For example for transect 2 tide <code>0.04</code> will be used for all tide corrections for dates before or on 2021-04-05, but for dates after 2021-04-05 the tide <code>0.03</code> will be used</li> </ul> transect_id tide dates 1 0.05 2021-04-05 2 0.04 2021-04-05 2 0.03 2021-04-08 3 0.02 2021-04-06 </li> <li> <p>Format 3: Dates and latitude &amp; longitude values for each tide</p> <p>columns : tide,longitude,latitude,dates</p> <ul> <li>Use the tide for the transect closet to the longitude(x) and latitude(y) location and the closest date</li> </ul> tide latitude longitude dates 0.05 34.0522 -118.2437 2021-04-05 0.04 36.7783 -119.4179 2021-04-07 0.02 37.7749 -122.4194 2021-04-08 </li> <li> <p>Form 4: Transect IDs as the columns and dates as the row index</p> <p>columns: transect ids (the actual transect ids)</p> <ul> <li>This is a pivot of format 2 and its like the format of <code>raw_transect_time_series.csv</code></li> <li>This format has the tide value for each transect id and date</li> <li>All your transect ids can be found in the <code>raw_transect_time_series_merged.csv</code>  file</li> <li>In the examples below <code>1</code>,<code>2</code>,<code>3</code> are transect ids</li> </ul> 1 2 3 2004-04-07 00:00:00+00:00 0.05 0.04 0.04 2004-04-08 00:00:00+00:00 0.04 0.05 0.08 2004-04-09 00:00:00+00:00 0.03 0.09 0.07 2004-04-10 00:00:00+00:00 0.02 0.01 0.07 </li> </ol>"},{"location":"update-guide/","title":"Update Guide","text":"<p>This guide is designed to help you easily update CoastSeg, whether you're updating to a specific version, the latest version, applying a patch, or updating code and notebooks from GitHub.</p>"},{"location":"update-guide/#step-1-activate-the-environment","title":"Step 1: Activate the Environment","text":"<ol> <li>Open your terminal or Anaconda Prompt.    <pre><code>  conda activate coastseg\n</code></pre></li> </ol>"},{"location":"update-guide/#step-2-update-the-coastseg-version-installed","title":"Step 2: Update the CoastSeg Version Installed","text":""},{"location":"update-guide/#option-1-update-via-conda","title":"Option 1: Update via Conda","text":"<p>Use the following command to update CoastSeg. This command will fetch the latest version of CoastSeg available in the Conda channels that you have access to.</p> <pre><code>  conda update coastseg\n</code></pre> <ul> <li>If you're looking for a specific version of CoastSeg, you can specify it directly by using</li> </ul> <pre><code>  conda install coastseg=&lt;version&gt;\n</code></pre> <ul> <li>Replace  with the desired version number, such as 1.2.3"},{"location":"update-guide/#option-2-update-via-pip","title":"Option 2: Update via Pip","text":"<p>Update to the Latest Version</p> <p>1.Install the latest version of CoastSeg from PyPi:</p> <ul> <li>Use the command below to upgrade to the latest version, which includes all recent features and fixes:</li> </ul> <pre><code>  pip install coastseg --upgrade\n</code></pre> <ul> <li>Don't worry if you see the warning message below. This is normal</li> </ul> <pre><code>  \"ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\"\n</code></pre> <p>2.Install jsonschema</p> <ul> <li>To ensure functionality in Jupyter notebooks, install the required jsonschema version:</li> </ul> <pre><code> pip install jsonschema==4.19.0 --user\n</code></pre> <p>Update to a Specific Version</p> <p>1.Install a Specific Version of CoastSeg from PyPi:</p> <ul> <li>If you need to install a particular version, use the command below and replace  with the desired version number (e.g., 1.1.26). <pre><code> pip install coastseg==&lt;version&gt;\n</code></pre> <ul> <li>Don't worry if you see the warning message below. This is normal</li> </ul> <pre><code>  \"ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\"\n</code></pre> <ol> <li>Install jsonschema</li> </ol> <p>-This is necessary to run coastseg in a jupyter notebook.</p> <pre><code> pip install jsonschema==4.19.0 --user\n</code></pre>"},{"location":"update-guide/#step-3-update-code-and-notebooks-from-github","title":"Step 3: Update Code and Notebooks from GitHub","text":"\u00b6 <p>(Optional) Follow these steps if you want the latest notebooks or code updates from the CoastSeg GitHub repository.</p>"},{"location":"update-guide/#step-1-open-coastseg-in-anaconda","title":"Step 1: Open CoastSeg in Anaconda","text":"<p>1.Open Anaconda Prompt</p> <p>2.Activate the coastseg environment</p> <pre><code>  conda activate coastseg\n</code></pre> <p>3.Go to your coastseg location</p> <pre><code>cd &lt;coastseg location&gt;\n</code></pre>"},{"location":"update-guide/#step-2-check-for-a-remote-connection-to-coastseg-repository","title":"Step 2: Check for a Remote Connection to CoastSeg Repository","text":"<p>-Run the command below. In the output of this command you should see <code>origin  https://github.com/Doodleverse/CoastSeg.git (fetch)</code></p> <pre><code>git remote -v\n</code></pre> <p></p> <ul> <li>If you don't see this output, then run the following command   <pre><code> git remote add origin  https://github.com/Doodleverse/CoastSeg.git\n git pull origin main\n</code></pre></li> </ul>"},{"location":"update-guide/#step-3-pull-the-latest-changes","title":"Step 3: Pull the Latest Changes","text":"<ol> <li>Run the command below     <pre><code> git pull origin main\n</code></pre></li> <li> <p>If you recieve an error message like the one shown below then proceed to 3, otherwise go to Go to Step 4: Verify Update Success</p> <pre><code>    Please commit your changes or stash them before you merge\n    Aborting\n</code></pre> <p></p> </li> <li> <p>Run the command below:</p> </li> </ol> <p>-WARNING This will clear out anything you have written to the <code>certifications.json</code> make sure to save that file to a new location then move it back when you're done upgrading</p> <pre><code>       git fetch origin\n       git reset --hard origin/main\n       git pull origin main\n</code></pre>"},{"location":"update-guide/#step-4-verify-update-success","title":"Step 4: Verify Update Success","text":"<pre><code>git status\n</code></pre> <ul> <li>This command should return the following message</li> <li><code>On branch main   Your branch is up to date with 'origin/main'.</code></li> </ul>"},{"location":"what-is-in-a-session/","title":"Understanding Sessions in CoastSeg","text":"<p>A session in CoastSeg is a self-contained folder that holds all the data and configurations related to the extraction of shorelines for a specific set of Regions of Interest (ROIs). Each session is uniquely identified by its name and stores the extracted shorelines, ROIs, transects, reference shorelines, settings,  and other related files used to extract the shorelines in a structured format. This organization allows users to easily manage and revisit their analyses.</p>"},{"location":"what-is-in-a-session/#what-is-a-session","title":"What is a Session?","text":"<p>A session contains all the files created during the process of extracting shorelines from specific ROIs whose data is stored in <code>CoastSeg/data</code>. Each ROI's settings, rasters, imagery, and metadata, generated during the download process, are organized into folders within <code>CoastSeg/data</code>, ensuring that the downloaded data remains independent of the extracted shorelines. Each session references the specific ROI(s) in <code>CoastSeg/data</code> it was derived from in the <code>config.json</code> file. While the structure of a session may vary depending on user actions, such as whether tide correction was applied, it will always contain the files <code>config_gdf.geojson</code> and <code>config.json</code> because they are needed to reference the downloaded ROI(s)from which the shorelines were extracted.</p>"},{"location":"what-is-in-a-session/#overview","title":"Overview","text":"<ul> <li>Location of Sessions</li> <li>Sample Session Structure</li> <li>Session Files</li> <li>Configuration Files</li> <li>Extracted Shorelines</li> <li>Raw Transect Time Series</li> <li>Tidally Corrected Transect Time Series</li> <li>Shoreline and Transect Settings</li> <li>Config Files</li> </ul>"},{"location":"what-is-in-a-session/#location-of-sessions","title":"Location of Sessions","text":"<p>Sessions are saved to <code>CoastSeg/sessions</code>. A session contains the all the files related to extract shorelines for a particular set of ROIs in the downloaded data located in <code>CoastSeg/data</code>. Each session follows a similar format depending on what actions were taken by the user. For instance, if tide correction was not applied during the session then none of the files with the tidal correction applied will be present.</p>"},{"location":"what-is-in-a-session/#sample-session-structure","title":"Sample Session Structure","text":"<p>Here is a sample session that had 2 ROIs where shorelines were successfully extracted and tide correction was applied to both ROIs.</p> <pre><code>\u251c\u2500\u2500 CoastSeg\n|\n|___session\n|    |_ ID_4_datetime11-22-22__11_15_15\n\u2502\u00a0\u00a0 |   |_ jpg_files\n\u2502\u00a0\u00a0 |   |  |_ detection # this folder contains images of the extracted shorelines overlaid on the original scene\n\u2502\u00a0\u00a0 |   |  |  |_ 2023-12-09-18-40-08_L9.jpg   # this is the shoreline extracted from satellite L9 on 2023-12-09 at 18:40:08\n\u2502\u00a0\u00a0 |   |  |  |_ &lt;rest of shoreline detection images&gt;\n\u2502\u00a0\u00a0 |   |_config.json\n\u2502\u00a0\u00a0 |   |_config_gdf.json\n\u2502\u00a0\u00a0 |   |_extracted_shorelines_lines.geojson\n\u2502\u00a0\u00a0 |   |_extracted_shorelines_points.geojson\n\u2502\u00a0\u00a0 |   |_raw_transect_time_series.csv\n\u2502\u00a0\u00a0 |   |_raw_transect_time_series_merged.csv\n\u2502\u00a0\u00a0 |   |_raw_transect_time_series_points.geojson\n\u2502\u00a0\u00a0 |   |_raw_transect_time_series_vectors.geojson\n\u2502\u00a0\u00a0 |   |_tidally_corrected_transect_time_series.csv        # this file will only appear if tidal correction was applied\n\u2502\u00a0\u00a0 |   |_tidally_corrected_transect_time_series_merged.csv # this file will only appear if tidal correction was applied\n\u2502\u00a0\u00a0 |   |_tidally_corrected_transect_time_series_points.geojson # this file will only appear if tidal correction was applied\n\u2502\u00a0\u00a0 |   |_tidally_corrected_transect_time_series_vectors.geojson # this file will only appear if tidal correction was applied\n\u2502\u00a0\u00a0 |   |_shoreline_settings.json\n\u2502\u00a0\u00a0 |   |_transects_cross_distances.json\n\u2502\u00a0\u00a0 |   |_transects_settings.json\n\u2502\u00a0\u00a0 |   |\n|   |_ ID_3_datetime11-22-22__11_15_15\n\u2502\u00a0\u00a0 |   |_ jpg_files\n\u2502\u00a0\u00a0 |   |_config.json\n\u2502\u00a0\u00a0 |   |_config_gdf.json\n\u2502\u00a0\u00a0 |   |_&lt;rest of files&gt;\n</code></pre>"},{"location":"what-is-in-a-session/#session-files","title":"Session Files","text":"<p>Each session contains the following files that contain information related to the shorelines extracted from each ROI. Below is an explanation of each file:</p>"},{"location":"what-is-in-a-session/#configuration-files","title":"Configuration Files","text":"<ul> <li>config.json: Contains the settings that were used to download the ROI, the location of the downloaded ROI, and the settings that were used to extract shorelines.</li> <li>config_gdf.json: Contains all the features that were on the map when shorelines were extracted this includes:</li> <li>Selected ROIs</li> <li>Reference Shoreline</li> <li>Transects</li> <li>Bounding Box (if present)</li> <li>Shoreline Extraction Area (if present)</li> </ul>"},{"location":"what-is-in-a-session/#extracted-shorelines","title":"Extracted Shorelines","text":"<p>The raw shorelines that are extracted from each image are all stored together in geojson files in two formats lines and points. These shorelines are intersected with the transects to generate the timeseries of shoreline change along the transects.</p> <ul> <li>extracted_shorelines_lines.geojson: A GeoJSON file containing the extracted shorelines represented as lines.</li> <li>extracted_shorelines_points.geojson: A GeoJSON file containing the extracted shorelines represented as points.</li> <li>extracted_shorelines_dict.json: this contains all the extracted shorelines stored in a json format containing metadata like the satellite the shoreline was derived from and more.</li> </ul>"},{"location":"what-is-in-a-session/#raw-transect-time-series","title":"Raw Transect Time Series","text":"<ul> <li> <p>raw_transect_time_series.csv: Contains raw transect time series data in CSV format in the projected CRS (listed as <code>output_epsg</code> in the <code>config.json</code> settings)</p> <p>-- This file contains the intersection between the shoreline and all the transects for each date. This intersection is the distance along the transect the shoreline was captured at.</p> </li> <li> <p>raw_transect_time_series_merged.csv: Merged raw transect time series data in CSV format in the projected CRS (listed as <code>output_epsg</code> in the <code>config.json</code> settings)</p> <p>-- This file contains the intersection between the shoreline and all the transects for each date along with the x and y point in crs epsg 4326 of where the shoreline intersected the transect, and the x and y coordinate in crs epsg 4326 of the end point of the transect.</p> </li> </ul> <p></p> <ul> <li>raw_transect_time_series_points.geojson: Raw transect time series data represented as points in GeoJSON format in crs epsg 4326.</li> <li>raw_transect_time_series_vectors.geojson: Raw transect time series data represented as vectors in GeoJSON format in crs epsg 4326.</li> </ul>"},{"location":"what-is-in-a-session/#tidally-corrected-transect-time-series","title":"Tidally Corrected Transect Time Series","text":"<p>These files will only be present if tidal correction was applied during the analysis:</p> <ul> <li>tidally_corrected_transect_time_series.csv: Tidally corrected transect time series data in CSV format in the projected CRS (listed as <code>output_epsg</code> in the <code>config.json</code> settings)</li> <li>This file contains the intersection between the shoreline and all the transects for each date. This intersection is the distance along the transect the shoreline was captured at.</li> <li>tidally_corrected_transect_time_series_merged.csv: Merged tidally corrected transect time series data in the projected CRS (listed as <code>output_epsg</code> in the <code>config.json</code> settings)</li> <li>This file contains the intersection between the shoreline and all the transects for each date along with the x and y point in crs epsg 4326 of where the shoreline intersected the transect, the x and y coordinate in crs epsg 4326 of the end point of the transect, as well as the tide that was used for the tide correction.</li> </ul> <p> - This file contains the intersection between the shoreline and all the transects for each date along with the x and y point in crs epsg 4326 of where the shoreline intersected the transect, and the x and y coordinate in crs epsg 4326 of the end point of the transect.</p> <ul> <li>tidally_corrected_transect_time_series_points.geojson: Tidally corrected transect time series data represented as points in GeoJSON format.</li> <li>tidally_corrected_transect_time_series_vectors.geojson: Tidally corrected transect time series data represented as vectors in GeoJSON format.</li> </ul>"},{"location":"what-is-in-a-session/#shoreline-and-transect-settings","title":"Shoreline and Transect Settings","text":"<ul> <li>shoreline_settings.json: Contains settings specific to the shoreline extraction process.</li> <li>transects_cross_distances.json: Contains cross-distance data for transects.</li> <li>transects_settings.json: Contains settings specific to the transect analysis.</li> </ul>"},{"location":"what-is-in-a-session/#config-files","title":"Config Files","text":"<p>Config files are used to save the current state of the map and all the data downloaded during a session using CoastSeg. The config file is actually composed of two separate files a <code>config_gdf.geojson</code> file and <code>config.json</code> file. Under the <code>data</code> directory where all the downloaded ROIs are stored. Within each ROI's directory you will find a <code>config_gdf.geojson</code> file and a <code>config.json</code> file.</p> <ul> <li> <p><code>config_gdf.geojson</code> file that contains contains a geodataframe ( crs <code>espg 4326</code>) with all the ROIs, shorelines, transects, and the bounding box that were loaded on the map at the time the ROI was downloaded.</p> <p>-- It does NOT contain the extracted shorelines. Those are in separate geojson files.</p> </li> <li> <p><code>config.json</code> file that contains the settings used to download each ROI as well as the settings that were loaded into CoastSeg when either the shorelines were extracted or the download occured.</p> </li> </ul>"},{"location":"what-is-in-a-session/#config_gdfgeojson","title":"Config_gdf.geojson","text":"<p>Example: Loading the config_gdf.geojson into QGIS</p> <ul> <li>You can see the Bounding Box, ROI, reference shorelines and transects for this session</li> </ul> <p></p>"},{"location":"what-is-in-a-session/#configjson","title":"Config.json","text":"<p>Config.json files can be found in session directories as well as within ROI directories within the data directory.</p> <p>Sample Config.json in the data directory</p> <p>The config files are organized into 2 sections:</p> <ol> <li>Settings used to download each ROI organized by each ROI's id</li> <li>Settings that were saved when the ROI was downloaded under the 'settings' section</li> </ol> <p>a. Settings used to download each ROI organized by each ROI's id</p> <ul> <li> <p>One setting to pay attention to is the <code>output epsg</code> this is the CRS the ROI and all its features are re-projected features into and these re-projected features are the ones used to calculate the shoreline transect intersections.</p> </li> <li> <p>The following settings are associated with ROI 0:</p> </li> <li>ROI 0 has imagery for dates \"2018-01-01\" - \"2019-01-01\" and it was saved to the <code>ID_0_datetime03-22-23__07_29_15</code> directory at     <code>C:\\\\1_CoastSeg\\\\1_official_CoastSeg_repo\\\\CoastSeg\\\\data</code>.</li> </ul> <pre><code>{\n    \"0\": {\n        \"dates\": [\n            \"2018-01-01\",\n            \"2019-01-01\"\n        ],\n        \"sitename\": \"ID_0_datetime03-22-23__07_29_15\",\n        \"polygon\": [\n            [\n                [\n                    -75.75713505156588,\n                    36.189897585260795\n                ],\n                [\n                    -75.7514757042764,\n                    36.17420897122136\n                ],\n                [\n                    -75.74012332310643,\n                    36.176873810012815\n                ],\n                [\n                    -75.74578267039591,\n                    36.191909415885604\n                ],\n                [\n                    -75.75713505156588,\n                    36.189897585260795\n                ]\n            ]\n        ],\n        \"roi_id\": \"0\",\n        \"sat_list\": [\n            \"L5\",\n            \"L7\",\n            \"L8\"\n        ],\n        \"landsat_collection\": \"C02\",\n        \"filepath\": \"C:\\\\1_CoastSeg\\\\1_official_CoastSeg_repo\\\\CoastSeg\\\\data\"\n    },\n    \"roi_ids\": [\n        \"0\"\n    ],\n    \"settings\": {\n        \"landsat_collection\": \"C02\",\n        \"dates\": [\n            \"2018-01-01\",\n            \"2019-03-01\"\n        ],\n        \"sat_list\": [\n            \"L5\",\n            \"L7\",\n            \"L8\"\n        ],\n        \"cloud_thresh\": 0.68,\n        \"dist_clouds\": 100,\n        \"output_epsg\": 32618,\n        \"check_detection\": false,\n        \"adjust_detection\": false,\n        \"save_figure\": true,\n        \"min_beach_area\": 2100,\n        \"min_length_sl\": 200,\n        \"cloud_mask_issue\": false,\n        \"sand_color\": \"default\",\n        \"pan_off\": \"False\",\n        \"max_dist_ref\": 396,\n        \"along_dist\": 25,\n        \"min_points\": 3,\n        \"max_std\": 15.0,\n        \"max_range\": 30.0,\n        \"min_chainage\": -100.0,\n        \"multiple_inter\": \"auto\",\n        \"prc_multiple\": 0.1\n    }\n}\n</code></pre>"}]}